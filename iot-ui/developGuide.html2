<!DOCTYPE html><html><head><meta charset="utf-8"><style>body {
  width: 45em;
  border: 1px solid #ddd;
  outline: 1300px solid #fff;
  margin: 16px auto;
}

body .markdown-body
{
  padding: 30px;
}

@font-face {
  font-family: fontawesome-mini;
  src: url(data:font/woff;charset=utf-8;base64,d09GRgABAAAAAAzUABAAAAAAFNgAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAABGRlRNAAABbAAAABwAAAAcZMzaOEdERUYAAAGIAAAAHQAAACAAOQAET1MvMgAAAagAAAA+AAAAYHqhde9jbWFwAAAB6AAAAFIAAAFa4azkLWN2dCAAAAI8AAAAKAAAACgFgwioZnBnbQAAAmQAAAGxAAACZVO0L6dnYXNwAAAEGAAAAAgAAAAIAAAAEGdseWYAAAQgAAAFDgAACMz7eroHaGVhZAAACTAAAAAwAAAANgWEOEloaGVhAAAJYAAAAB0AAAAkDGEGa2htdHgAAAmAAAAAEwAAADBEgAAQbG9jYQAACZQAAAAaAAAAGgsICJBtYXhwAAAJsAAAACAAAAAgASgBD25hbWUAAAnQAAACZwAABOD4no+3cG9zdAAADDgAAABsAAAAmF+yXM9wcmVwAAAMpAAAAC4AAAAusPIrFAAAAAEAAAAAyYlvMQAAAADLVHQgAAAAAM/u9uZ4nGNgZGBg4ANiCQYQYGJgBEJuIGYB8xgABMMAPgAAAHicY2Bm42OcwMDKwMLSw2LMwMDQBqGZihmiwHycoKCyqJjB4YPDh4NsDP+BfNb3DIuAFCOSEgUGRgAKDgt4AAB4nGNgYGBmgGAZBkYGEAgB8hjBfBYGCyDNxcDBwMTA9MHhQ9SHrA8H//9nYACyQyFs/sP86/kX8HtB9UIBIxsDXICRCUgwMaACRoZhDwA3fxKSAAAAAAHyAHABJQB/AIEAdAFGAOsBIwC/ALgAxACGAGYAugBNACcA/wCIeJxdUbtOW0EQ3Q0PA4HE2CA52hSzmZDGe6EFCcTVjWJkO4XlCGk3cpGLcQEfQIFEDdqvGaChpEibBiEXSHxCPiESM2uIojQ7O7NzzpkzS8qRqnfpa89T5ySQwt0GzTb9Tki1swD3pOvrjYy0gwdabGb0ynX7/gsGm9GUO2oA5T1vKQ8ZTTuBWrSn/tH8Cob7/B/zOxi0NNP01DoJ6SEE5ptxS4PvGc26yw/6gtXhYjAwpJim4i4/plL+tzTnasuwtZHRvIMzEfnJNEBTa20Emv7UIdXzcRRLkMumsTaYmLL+JBPBhcl0VVO1zPjawV2ys+hggyrNgQfYw1Z5DB4ODyYU0rckyiwNEfZiq8QIEZMcCjnl3Mn+pED5SBLGvElKO+OGtQbGkdfAoDZPs/88m01tbx3C+FkcwXe/GUs6+MiG2hgRYjtiKYAJREJGVfmGGs+9LAbkUvvPQJSA5fGPf50ItO7YRDyXtXUOMVYIen7b3PLLirtWuc6LQndvqmqo0inN+17OvscDnh4Lw0FjwZvP+/5Kgfo8LK40aA4EQ3o3ev+iteqIq7wXPrIn07+xWgAAAAABAAH//wAPeJyFlctvG1UUh+/12DPN1B7P3JnYjj2Ox4/MuDHxJH5N3UdaEUQLqBIkfQQioJWQ6AMEQkIqsPGCPwA1otuWSmTBhjtps2ADWbJg3EpIXbGouqSbCraJw7kzNo2dRN1cnXN1ZvT7zuuiMEI7ncizyA0URofRBJpCdbQuIFShYY+GZRrxMDVtih5TwQPHtXDFFSIKoWIbuREBjLH27Ny4MsbVx+uOJThavebgVrNRLAiYx06rXsvhxLgWx9xpfHdrs/ekc2Pl2cpPCVEITQpwbj8VQhfXSq2m+Wxqaq2D73Kne5e3NjHqQNj3CRYlJlgUl/jRNP+2Gs2pNYRQiOnmUaQDqm30KqKiTTWPWjboxnTWpvgxjXo0KrtZXAHt7hwIz0YVcj88JnKlJKi3NPAwLyDwZudSmJSMMJFDYaOkaol6XtESx3Gt1VTytdZJ3DCLeaVhVnCBH1fycHTxFXwPX+l2e3d6H/TufGGmMTLTnbSJUdo00zuBswMO/nl3YLeL/wnu9/limCuD3vC54h5NBVz6Li414AI8Vx3iiosKcQXUbrvhFFiYb++HN4DaF4XzFW0fIN4XDWJ3a3XQoq9V8WiyRmdsatV9xUcHims1JloH0YUa090G3Tro3mC6c01f+YwCPquINr1PTaCP6rVTOOmf0GE2dBc7zWIhji3/5MchSuBHgDbU99RMWt3YUNMZMJmx92YP6NsHx/5/M1yvInpnkIOM3Z8fA3JQ2lW1RFC1KaBPDFXNAHYYvGy73aYZZZ3HifbeuiVZCpwA3oQBs0wGPYJbJfg60xrKEbKiNtTe1adwrpBRwlAuQ3q3VRaX0QmQ9a49BTSCuF1MLfQ6+tinOubRBZuWPNoMevGMT+V41KitO1is3D/tpMcq1JHZqDHGs8DoYGDkxJgKjHROeTCmhZvzPm9pod+ltKm4PN7Dyvvldlpsg8D+4AUJZ3F/JBstZz7cbFRxsaAGV6yX/dkcycWf8eS3QlQea+YLjdm3yrOnrhFpUyKVvFE4lpv4bO3Svx/6F/4xmiDu/RT5iI++lko18mY1oX+5UGKR6kmVjM/Zb76yfHtxy+h/SyQ0lLdpdKy/lWB6szatetQJ8nZ80A2Qt6ift6gJeavU3BO4gtxs/KCtNPVibCtYCWY3SIlSBPKXZALXiIR9oZeJ1AuMyxLpHIy/yO7vSiSE+kZvk0ihJ30HgHfzZtEMmvV58x6dtqns0XTAW7Vdm4HJ04OCp/crOO7rd9SGxQAE/mVA9xRN+kVSMRFF6S9JFGUtthkjBA5tFCWc2l4V43Ex9GmUP3SI37Jjmir9KqlaDJ4S4JB3vuM/jzyH1+8MuoZ+QGzfnvPoJb96cZlWjMcKLfgDwB7E634JTY+asjsPzS5CiVnEWY+KsrsIN5rn3mAPjqmQBxGjcGKB9f9ZxY3mYC2L85CJ2FXIxKKyHk+dg0FHbuEc7D5NzWUX32WxFcWNGRAbvwSx0RmIXVDuYySafluQBmzA/ssqJAMLnli+WIC90Gw4lm85wcp0qjArEDPJJV/sSx4P9ungTpgMw5gVC1XO4uULq0s3v1rqLi0vX/z65vlH50f8T/RHmSPTk5xxWBWOluMT6WiOy+tdvWxlV/XQb3o3c6Ssr+r6I708GsX9/nzp1tKFh0s3v7m4vAy/Hnb/KMOvc1wump6Il48K6mGDy02X9Yd65pa+nQIjk76lWxCkG8NBCP0HQS9IpAAAeJxjYGRgYGBhcCrq214Qz2/zlUGenQEEzr/77oug/zewFbB+AHI5GJhAogBwKQ0qeJxjYGRgYH3/P46BgZ0BBNgKGBgZUAEPAE/7At0AAAB4nGNngAB2IGYjhBsYBAAIYADVAAAAAAAAAAAAAFwAyAEeAaACCgKmAx4DggRmAAAAAQAAAAwAagAEAAAAAAACAAEAAgAWAAABAAChAAAAAHiclZI7bxQxFIWPd/JkUYQChEhIyAVKgdBMskm1QkKrRETpQiLRUczueB/K7HhlOxttg8LvoKPgP9DxFxANDR0tHRWi4NjrPIBEgh1p/dm+vufcawNYFWsQmP6e4jSyQB2fI9cwj++RE9wTjyPP4LYoI89iWbyLPIe6+Bh5Hs9rryMv4GbtW+RF3EhuRa7jbrIbeQkPkjdUETOLnL0Kip4FVvAhco1RXyMnSPEz8gzWxE7kWTwUp5HnsCLeR57HW/El8gJWa58iL+JO7UfkOh4l9yMv4UnyEtvQGGECgwF66MNBooF1bGCL1ELB/TYU+ZBRlvsKQ44Se6jQ4a7hef+fh72Crv25kp+8lNWGmeKoOI5jJLb1aGIGvb6TjfWNLdkqdFvJw4l1amjlXtXRZqRN7lSRylZZyhBqpVFWmTEXgWfUrpi/hZOQXdOd4rKuXOtEWT3k5IArPRzTUU5tHKjecZkTpnVbNOnt6jzN8240GD4xtikvZW56043rPMg/dS+dlOceXoR+WPbJ55Dsekq1lJpnypsMUsYOdCW30o103Ytu/lvh+5RWFLfBjm9/N8hJntPhvx92rnoE/kyHdGasGy754kw36vsVf/lFeBi+0COu+cfgQr42G3CRpeLoZ53gmfe3X6rcKt5oVxnptHR9JS8ehVUd5wvvahN2uqxOOpMXapibI5k7Zwbt4xBSaTfoKBufhAnO/uqNcfK8OTs0OQ6l7JIqFjDhYj5WcjevCnI/1DDiI8j4ndWb/5YzDZWh79yomWXeXj7Nnw70/2TIeFPTrlSh89k1ObOSRVZWZfgF0r/zJQB4nG2JUQuCQBCEd07TTg36fb2IyBaLd3vWaUh/vmSJnvpgmG8YcmS8X3Shf3R7QA4OBUocUKHGER5NNbOOEvwc1txnuWkTRb/aPjimJ5vXabI+3VfOiyS15UWvyezM2xiGOPyuMohOH8O8JiO4Af+FsAGNAEuwCFBYsQEBjlmxRgYrWCGwEFlLsBRSWCGwgFkdsAYrXFhZsBQrAAA=) format('woff');
}

@font-face {
  font-family: octicons-anchor;
  src: url(data:font/woff;charset=utf-8;base64,d09GRgABAAAAAAYcAA0AAAAACjQAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAABGRlRNAAABMAAAABwAAAAca8vGTk9TLzIAAAFMAAAARAAAAFZG1VHVY21hcAAAAZAAAAA+AAABQgAP9AdjdnQgAAAB0AAAAAQAAAAEACICiGdhc3AAAAHUAAAACAAAAAj//wADZ2x5ZgAAAdwAAADRAAABEKyikaNoZWFkAAACsAAAAC0AAAA2AtXoA2hoZWEAAALgAAAAHAAAACQHngNFaG10eAAAAvwAAAAQAAAAEAwAACJsb2NhAAADDAAAAAoAAAAKALIAVG1heHAAAAMYAAAAHwAAACABEAB2bmFtZQAAAzgAAALBAAAFu3I9x/Nwb3N0AAAF/AAAAB0AAAAvaoFvbwAAAAEAAAAAzBdyYwAAAADP2IQvAAAAAM/bz7t4nGNgZGFgnMDAysDB1Ml0hoGBoR9CM75mMGLkYGBgYmBlZsAKAtJcUxgcPsR8iGF2+O/AEMPsznAYKMwIkgMA5REMOXicY2BgYGaAYBkGRgYQsAHyGMF8FgYFIM0ChED+h5j//yEk/3KoSgZGNgYYk4GRCUgwMaACRoZhDwCs7QgGAAAAIgKIAAAAAf//AAJ4nHWMMQrCQBBF/0zWrCCIKUQsTDCL2EXMohYGSSmorScInsRGL2DOYJe0Ntp7BK+gJ1BxF1stZvjz/v8DRghQzEc4kIgKwiAppcA9LtzKLSkdNhKFY3HF4lK69ExKslx7Xa+vPRVS43G98vG1DnkDMIBUgFN0MDXflU8tbaZOUkXUH0+U27RoRpOIyCKjbMCVejwypzJJG4jIwb43rfl6wbwanocrJm9XFYfskuVC5K/TPyczNU7b84CXcbxks1Un6H6tLH9vf2LRnn8Ax7A5WQAAAHicY2BkYGAA4teL1+yI57f5ysDNwgAC529f0kOmWRiYVgEpDgYmEA8AUzEKsQAAAHicY2BkYGB2+O/AEMPCAAJAkpEBFbAAADgKAe0EAAAiAAAAAAQAAAAEAAAAAAAAKgAqACoAiAAAeJxjYGRgYGBhsGFgYgABEMkFhAwM/xn0QAIAD6YBhwB4nI1Ty07cMBS9QwKlQapQW3VXySvEqDCZGbGaHULiIQ1FKgjWMxknMfLEke2A+IJu+wntrt/QbVf9gG75jK577Lg8K1qQPCfnnnt8fX1NRC/pmjrk/zprC+8D7tBy9DHgBXoWfQ44Av8t4Bj4Z8CLtBL9CniJluPXASf0Lm4CXqFX8Q84dOLnMB17N4c7tBo1AS/Qi+hTwBH4rwHHwN8DXqQ30XXAS7QaLwSc0Gn8NuAVWou/gFmnjLrEaEh9GmDdDGgL3B4JsrRPDU2hTOiMSuJUIdKQQayiAth69r6akSSFqIJuA19TrzCIaY8sIoxyrNIrL//pw7A2iMygkX5vDj+G+kuoLdX4GlGK/8Lnlz6/h9MpmoO9rafrz7ILXEHHaAx95s9lsI7AHNMBWEZHULnfAXwG9/ZqdzLI08iuwRloXE8kfhXYAvE23+23DU3t626rbs8/8adv+9DWknsHp3E17oCf+Z48rvEQNZ78paYM38qfk3v/u3l3u3GXN2Dmvmvpf1Srwk3pB/VSsp512bA/GG5i2WJ7wu430yQ5K3nFGiOqgtmSB5pJVSizwaacmUZzZhXLlZTq8qGGFY2YcSkqbth6aW1tRmlaCFs2016m5qn36SbJrqosG4uMV4aP2PHBmB3tjtmgN2izkGQyLWprekbIntJFing32a5rKWCN/SdSoga45EJykyQ7asZvHQ8PTm6cslIpwyeyjbVltNikc2HTR7YKh9LBl9DADC0U/jLcBZDKrMhUBfQBvXRzLtFtjU9eNHKin0x5InTqb8lNpfKv1s1xHzTXRqgKzek/mb7nB8RZTCDhGEX3kK/8Q75AmUM/eLkfA+0Hi908Kx4eNsMgudg5GLdRD7a84npi+YxNr5i5KIbW5izXas7cHXIMAau1OueZhfj+cOcP3P8MNIWLyYOBuxL6DRylJ4cAAAB4nGNgYoAALjDJyIAOWMCiTIxMLDmZedkABtIBygAAAA==) format('woff');
}

.markdown-body {
  font-family: sans-serif;
  -ms-text-size-adjust: 100%;
  -webkit-text-size-adjust: 100%;
  color: #333333;
  overflow: hidden;
  font-family: "Helvetica Neue", Helvetica, "Segoe UI", Arial, freesans, sans-serif;
  font-size: 16px;
  line-height: 1.6;
  word-wrap: break-word;
}

.markdown-body a {
  background: transparent;
}

.markdown-body a:active,
.markdown-body a:hover {
  outline: 0;
}

.markdown-body b,
.markdown-body strong {
  font-weight: bold;
}

.markdown-body mark {
  background: #ff0;
  color: #000;
  font-style: italic;
  font-weight: bold;
}

.markdown-body sub,
.markdown-body sup {
  font-size: 75%;
  line-height: 0;
  position: relative;
  vertical-align: baseline;
}
.markdown-body sup {
  top: -0.5em;
}
.markdown-body sub {
  bottom: -0.25em;
}

.markdown-body h1 {
  font-size: 2em;
  margin: 0.67em 0;
}

.markdown-body img {
  border: 0;
}

.markdown-body hr {
  -moz-box-sizing: content-box;
  box-sizing: content-box;
  height: 0;
}

.markdown-body pre {
  overflow: auto;
}

.markdown-body code,
.markdown-body kbd,
.markdown-body pre,
.markdown-body samp {
  font-family: monospace, monospace;
  font-size: 1em;
}

.markdown-body input {
  color: inherit;
  font: inherit;
  margin: 0;
}

.markdown-body html input[disabled] {
  cursor: default;
}

.markdown-body input {
  line-height: normal;
}

.markdown-body input[type="checkbox"] {
  box-sizing: border-box;
  padding: 0;
}

.markdown-body table {
  border-collapse: collapse;
  border-spacing: 0;
}

.markdown-body td,
.markdown-body th {
  padding: 0;
}

.markdown-body .codehilitetable {
  border: 0;
  border-spacing: 0;
}

.markdown-body .codehilitetable tr {
  border: 0;
}

.markdown-body .codehilitetable pre,
.markdown-body .codehilitetable div.codehilite {
  margin: 0;
}

.markdown-body .linenos,
.markdown-body .code,
.markdown-body .codehilitetable td {
  border: 0;
  padding: 0;
}

.markdown-body td:not(.linenos) .linenodiv {
  padding: 0 !important;
}

.markdown-body .code {
  width: 100%;
}

.markdown-body .linenos div pre,
.markdown-body .linenodiv pre,
.markdown-body .linenodiv {
  border: 0;
  -webkit-border-radius: 0;
  -moz-border-radius: 0;
  border-radius: 0;
  -webkit-border-top-left-radius: 3px;
  -webkit-border-bottom-left-radius: 3px;
  -moz-border-radius-topleft: 3px;
  -moz-border-radius-bottomleft: 3px;
  border-top-left-radius: 3px;
  border-bottom-left-radius: 3px;
}

.markdown-body .code div pre,
.markdown-body .code div {
  border: 0;
  -webkit-border-radius: 0;
  -moz-border-radius: 0;
  border-radius: 0;
  -webkit-border-top-right-radius: 3px;
  -webkit-border-bottom-right-radius: 3px;
  -moz-border-radius-topright: 3px;
  -moz-border-radius-bottomright: 3px;
  border-top-right-radius: 3px;
  border-bottom-right-radius: 3px;
}

.markdown-body * {
  -moz-box-sizing: border-box;
  box-sizing: border-box;
}

.markdown-body input {
  font: 13px Helvetica, arial, freesans, clean, sans-serif, "Segoe UI Emoji", "Segoe UI Symbol";
  line-height: 1.4;
}

.markdown-body a {
  color: #4183c4;
  text-decoration: none;
}

.markdown-body a:hover,
.markdown-body a:focus,
.markdown-body a:active {
  text-decoration: underline;
}

.markdown-body hr {
  height: 0;
  margin: 15px 0;
  overflow: hidden;
  background: transparent;
  border: 0;
  border-bottom: 1px solid #ddd;
}

.markdown-body hr:before,
.markdown-body hr:after {
  display: table;
  content: " ";
}

.markdown-body hr:after {
  clear: both;
}

.markdown-body h1,
.markdown-body h2,
.markdown-body h3,
.markdown-body h4,
.markdown-body h5,
.markdown-body h6 {
  margin-top: 15px;
  margin-bottom: 15px;
  line-height: 1.1;
}

.markdown-body h1 {
  font-size: 30px;
}

.markdown-body h2 {
  font-size: 21px;
}

.markdown-body h3 {
  font-size: 16px;
}

.markdown-body h4 {
  font-size: 14px;
}

.markdown-body h5 {
  font-size: 12px;
}

.markdown-body h6 {
  font-size: 11px;
}

.markdown-body blockquote {
  margin: 0;
}

.markdown-body ul,
.markdown-body ol {
  padding: 0;
  margin-top: 0;
  margin-bottom: 0;
}

.markdown-body ol ol,
.markdown-body ul ol {
  list-style-type: lower-roman;
}

.markdown-body ul ul ol,
.markdown-body ul ol ol,
.markdown-body ol ul ol,
.markdown-body ol ol ol {
  list-style-type: lower-alpha;
}

.markdown-body dd {
  margin-left: 0;
}

.markdown-body code,
.markdown-body pre,
.markdown-body samp {
  font-family: Consolas, "Liberation Mono", Menlo, Courier, monospace;
  font-size: 12px;
}

.markdown-body pre {
  margin-top: 0;
  margin-bottom: 0;
}

.markdown-body kbd {
  background-color: #e7e7e7;
  background-image: -moz-linear-gradient(#fefefe, #e7e7e7);
  background-image: -webkit-linear-gradient(#fefefe, #e7e7e7);
  background-image: linear-gradient(#fefefe, #e7e7e7);
  background-repeat: repeat-x;
  border-radius: 2px;
  border: 1px solid #cfcfcf;
  color: #000;
  padding: 3px 5px;
  line-height: 10px;
  font: 11px Consolas, "Liberation Mono", Menlo, Courier, monospace;
  display: inline-block;
}

.markdown-body>*:first-child {
  margin-top: 0 !important;
}

.markdown-body>*:last-child {
  margin-bottom: 0 !important;
}

.markdown-body .headeranchor-link {
  position: absolute;
  top: 0;
  bottom: 0;
  left: 0;
  display: block;
  padding-right: 6px;
  padding-left: 30px;
  margin-left: -30px;
}

.markdown-body .headeranchor-link:focus {
  outline: none;
}

.markdown-body h1,
.markdown-body h2,
.markdown-body h3,
.markdown-body h4,
.markdown-body h5,
.markdown-body h6 {
  position: relative;
  margin-top: 1em;
  margin-bottom: 16px;
  font-weight: bold;
  line-height: 1.4;
}

.markdown-body h1 .headeranchor,
.markdown-body h2 .headeranchor,
.markdown-body h3 .headeranchor,
.markdown-body h4 .headeranchor,
.markdown-body h5 .headeranchor,
.markdown-body h6 .headeranchor {
  display: none;
  color: #000;
  vertical-align: middle;
}

.markdown-body h1:hover .headeranchor-link,
.markdown-body h2:hover .headeranchor-link,
.markdown-body h3:hover .headeranchor-link,
.markdown-body h4:hover .headeranchor-link,
.markdown-body h5:hover .headeranchor-link,
.markdown-body h6:hover .headeranchor-link {
  height: 1em;
  padding-left: 8px;
  margin-left: -30px;
  line-height: 1;
  text-decoration: none;
}

.markdown-body h1:hover .headeranchor-link .headeranchor,
.markdown-body h2:hover .headeranchor-link .headeranchor,
.markdown-body h3:hover .headeranchor-link .headeranchor,
.markdown-body h4:hover .headeranchor-link .headeranchor,
.markdown-body h5:hover .headeranchor-link .headeranchor,
.markdown-body h6:hover .headeranchor-link .headeranchor {
  display: inline-block;
}

.markdown-body h1 {
  padding-bottom: 0.3em;
  font-size: 2.25em;
  line-height: 1.2;
  border-bottom: 1px solid #eee;
}

.markdown-body h2 {
  padding-bottom: 0.3em;
  font-size: 1.75em;
  line-height: 1.225;
  border-bottom: 1px solid #eee;
}

.markdown-body h3 {
  font-size: 1.5em;
  line-height: 1.43;
}

.markdown-body h4 {
  font-size: 1.25em;
}

.markdown-body h5 {
  font-size: 1em;
}

.markdown-body h6 {
  font-size: 1em;
  color: #777;
}

.markdown-body p,
.markdown-body blockquote,
.markdown-body ul,
.markdown-body ol,
.markdown-body dl,
.markdown-body table,
.markdown-body pre,
.markdown-body .admonition {
  margin-top: 0;
  margin-bottom: 16px;
}

.markdown-body hr {
  height: 4px;
  padding: 0;
  margin: 16px 0;
  background-color: #e7e7e7;
  border: 0 none;
}

.markdown-body ul,
.markdown-body ol {
  padding-left: 2em;
}

.markdown-body ul ul,
.markdown-body ul ol,
.markdown-body ol ol,
.markdown-body ol ul {
  margin-top: 0;
  margin-bottom: 0;
}

.markdown-body li>p {
  margin-top: 16px;
}

.markdown-body dl {
  padding: 0;
}

.markdown-body dl dt {
  padding: 0;
  margin-top: 16px;
  font-size: 1em;
  font-style: italic;
  font-weight: bold;
}

.markdown-body dl dd {
  padding: 0 16px;
  margin-bottom: 16px;
}

.markdown-body blockquote {
  padding: 0 15px;
  color: #777;
  border-left: 4px solid #ddd;
}

.markdown-body blockquote>:first-child {
  margin-top: 0;
}

.markdown-body blockquote>:last-child {
  margin-bottom: 0;
}

.markdown-body table {
  display: block;
  width: 100%;
  overflow: auto;
  word-break: normal;
  word-break: keep-all;
}

.markdown-body table th {
  font-weight: bold;
}

.markdown-body table th,
.markdown-body table td {
  padding: 6px 13px;
  border: 1px solid #ddd;
}

.markdown-body table tr {
  background-color: #fff;
  border-top: 1px solid #ccc;
}

.markdown-body table tr:nth-child(2n) {
  background-color: #f8f8f8;
}

.markdown-body img {
  max-width: 100%;
  -moz-box-sizing: border-box;
  box-sizing: border-box;
}

.markdown-body code,
.markdown-body samp {
  padding: 0;
  padding-top: 0.2em;
  padding-bottom: 0.2em;
  margin: 0;
  font-size: 85%;
  background-color: rgba(0,0,0,0.04);
  border-radius: 3px;
}

.markdown-body code:before,
.markdown-body code:after {
  letter-spacing: -0.2em;
  content: "\00a0";
}

.markdown-body pre>code {
  padding: 0;
  margin: 0;
  font-size: 100%;
  word-break: normal;
  white-space: pre;
  background: transparent;
  border: 0;
}

.markdown-body .codehilite {
  margin-bottom: 16px;
}

.markdown-body .codehilite pre,
.markdown-body pre {
  padding: 16px;
  overflow: auto;
  font-size: 85%;
  line-height: 1.45;
  background-color: #f7f7f7;
  border-radius: 3px;
}

.markdown-body .codehilite pre {
  margin-bottom: 0;
  word-break: normal;
}

.markdown-body pre {
  word-wrap: normal;
}

.markdown-body pre code {
  display: inline;
  max-width: initial;
  padding: 0;
  margin: 0;
  overflow: initial;
  line-height: inherit;
  word-wrap: normal;
  background-color: transparent;
  border: 0;
}

.markdown-body pre code:before,
.markdown-body pre code:after {
  content: normal;
}

/* Admonition */
.markdown-body .admonition {
  -webkit-border-radius: 3px;
  -moz-border-radius: 3px;
  position: relative;
  border-radius: 3px;
  border: 1px solid #e0e0e0;
  border-left: 6px solid #333;
  padding: 10px 10px 10px 30px;
}

.markdown-body .admonition table {
  color: #333;
}

.markdown-body .admonition p {
  padding: 0;
}

.markdown-body .admonition-title {
  font-weight: bold;
  margin: 0;
}

.markdown-body .admonition>.admonition-title {
  color: #333;
}

.markdown-body .attention>.admonition-title {
  color: #a6d796;
}

.markdown-body .caution>.admonition-title {
  color: #d7a796;
}

.markdown-body .hint>.admonition-title {
  color: #96c6d7;
}

.markdown-body .danger>.admonition-title {
  color: #c25f77;
}

.markdown-body .question>.admonition-title {
  color: #96a6d7;
}

.markdown-body .note>.admonition-title {
  color: #d7c896;
}

.markdown-body .admonition:before,
.markdown-body .attention:before,
.markdown-body .caution:before,
.markdown-body .hint:before,
.markdown-body .danger:before,
.markdown-body .question:before,
.markdown-body .note:before {
  font: normal normal 16px fontawesome-mini;
  -moz-osx-font-smoothing: grayscale;
  -webkit-user-select: none;
  -moz-user-select: none;
  -ms-user-select: none;
  user-select: none;
  line-height: 1.5;
  color: #333;
  position: absolute;
  left: 0;
  top: 0;
  padding-top: 10px;
  padding-left: 10px;
}

.markdown-body .admonition:before {
  content: "\f056\00a0";
  color: 333;
}

.markdown-body .attention:before {
  content: "\f058\00a0";
  color: #a6d796;
}

.markdown-body .caution:before {
  content: "\f06a\00a0";
  color: #d7a796;
}

.markdown-body .hint:before {
  content: "\f05a\00a0";
  color: #96c6d7;
}

.markdown-body .danger:before {
  content: "\f057\00a0";
  color: #c25f77;
}

.markdown-body .question:before {
  content: "\f059\00a0";
  color: #96a6d7;
}

.markdown-body .note:before {
  content: "\f040\00a0";
  color: #d7c896;
}

.markdown-body .admonition::after {
  content: normal;
}

.markdown-body .attention {
  border-left: 6px solid #a6d796;
}

.markdown-body .caution {
  border-left: 6px solid #d7a796;
}

.markdown-body .hint {
  border-left: 6px solid #96c6d7;
}

.markdown-body .danger {
  border-left: 6px solid #c25f77;
}

.markdown-body .question {
  border-left: 6px solid #96a6d7;
}

.markdown-body .note {
  border-left: 6px solid #d7c896;
}

.markdown-body .admonition>*:first-child {
  margin-top: 0 !important;
}

.markdown-body .admonition>*:last-child {
  margin-bottom: 0 !important;
}

/* progress bar*/
.markdown-body .progress {
  display: block;
  width: 300px;
  margin: 10px 0;
  height: 24px;
  -webkit-border-radius: 3px;
  -moz-border-radius: 3px;
  border-radius: 3px;
  background-color: #ededed;
  position: relative;
  box-shadow: inset -1px 1px 3px rgba(0, 0, 0, .1);
}

.markdown-body .progress-label {
  position: absolute;
  text-align: center;
  font-weight: bold;
  width: 100%; margin: 0;
  line-height: 24px;
  color: #333;
  text-shadow: 1px 1px 0 #fefefe, -1px -1px 0 #fefefe, -1px 1px 0 #fefefe, 1px -1px 0 #fefefe, 0 1px 0 #fefefe, 0 -1px 0 #fefefe, 1px 0 0 #fefefe, -1px 0 0 #fefefe, 1px 1px 2px #000;
  -webkit-font-smoothing: antialiased !important;
  white-space: nowrap;
  overflow: hidden;
}

.markdown-body .progress-bar {
  height: 24px;
  float: left;
  -webkit-border-radius: 3px;
  -moz-border-radius: 3px;
  border-radius: 3px;
  background-color: #96c6d7;
  box-shadow: inset 0 1px 0 rgba(255, 255, 255, .5), inset 0 -1px 0 rgba(0, 0, 0, .1);
  background-size: 30px 30px;
  background-image: -webkit-linear-gradient(
    135deg, rgba(255, 255, 255, .4) 27%,
    transparent 27%,
    transparent 52%, rgba(255, 255, 255, .4) 52%,
    rgba(255, 255, 255, .4) 77%,
    transparent 77%, transparent
  );
  background-image: -moz-linear-gradient(
    135deg,
    rgba(255, 255, 255, .4) 27%, transparent 27%,
    transparent 52%, rgba(255, 255, 255, .4) 52%,
    rgba(255, 255, 255, .4) 77%, transparent 77%,
    transparent
  );
  background-image: -ms-linear-gradient(
    135deg,
    rgba(255, 255, 255, .4) 27%, transparent 27%,
    transparent 52%, rgba(255, 255, 255, .4) 52%,
    rgba(255, 255, 255, .4) 77%, transparent 77%,
    transparent
  );
  background-image: -o-linear-gradient(
    135deg,
    rgba(255, 255, 255, .4) 27%, transparent 27%,
    transparent 52%, rgba(255, 255, 255, .4) 52%,
    rgba(255, 255, 255, .4) 77%, transparent 77%,
    transparent
  );
  background-image: linear-gradient(
    135deg,
    rgba(255, 255, 255, .4) 27%, transparent 27%,
    transparent 52%, rgba(255, 255, 255, .4) 52%,
    rgba(255, 255, 255, .4) 77%, transparent 77%,
    transparent
  );
}

.markdown-body .progress-100plus .progress-bar {
  background-color: #a6d796;
}

.markdown-body .progress-80plus .progress-bar {
  background-color: #c6d796;
}

.markdown-body .progress-60plus .progress-bar {
  background-color: #d7c896;
}

.markdown-body .progress-40plus .progress-bar {
  background-color: #d7a796;
}

.markdown-body .progress-20plus .progress-bar {
  background-color: #d796a6;
}

.markdown-body .progress-0plus .progress-bar {
  background-color: #c25f77;
}

.markdown-body .candystripe-animate .progress-bar{
  -webkit-animation: animate-stripes 3s linear infinite;
  -moz-animation: animate-stripes 3s linear infinite;
  animation: animate-stripes 3s linear infinite;
}

@-webkit-keyframes animate-stripes {
  0% {
    background-position: 0 0;
  }

  100% {
    background-position: 60px 0;
  }
}

@-moz-keyframes animate-stripes {
  0% {
    background-position: 0 0;
  }

  100% {
    background-position: 60px 0;
  }
}

@keyframes animate-stripes {
  0% {
    background-position: 0 0;
  }

  100% {
    background-position: 60px 0;
  }
}

.markdown-body .gloss .progress-bar {
  box-shadow:
    inset 0 4px 12px rgba(255, 255, 255, .7),
    inset 0 -12px 0 rgba(0, 0, 0, .05);
}

/* Multimarkdown Critic Blocks */
.markdown-body .critic_mark {
  background: #ff0;
}

.markdown-body .critic_delete {
  color: #c82829;
  text-decoration: line-through;
}

.markdown-body .critic_insert {
  color: #718c00 ;
  text-decoration: underline;
}

.markdown-body .critic_comment {
  color: #8e908c;
  font-style: italic;
}

.markdown-body .headeranchor {
  font: normal normal 16px octicons-anchor;
  line-height: 1;
  display: inline-block;
  text-decoration: none;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  -webkit-user-select: none;
  -moz-user-select: none;
  -ms-user-select: none;
  user-select: none;
}

.headeranchor:before {
  content: '\f05c';
}

.markdown-body .task-list-item {
  list-style-type: none;
}

.markdown-body .task-list-item+.task-list-item {
  margin-top: 3px;
}

.markdown-body .task-list-item input {
  margin: 0 4px 0.25em -20px;
  vertical-align: middle;
}

/* Media */
@media only screen and (min-width: 480px) {
  .markdown-body {
    font-size:14px;
  }
}

@media only screen and (min-width: 768px) {
  .markdown-body {
    font-size:16px;
  }
}

@media print {
  .markdown-body * {
    background: transparent !important;
    color: black !important;
    filter:none !important;
    -ms-filter: none !important;
  }

  .markdown-body {
    font-size:12pt;
    max-width:100%;
    outline:none;
    border: 0;
  }

  .markdown-body a,
  .markdown-body a:visited {
    text-decoration: underline;
  }

  .markdown-body .headeranchor-link {
    display: none;
  }

  .markdown-body a[href]:after {
    content: " (" attr(href) ")";
  }

  .markdown-body abbr[title]:after {
    content: " (" attr(title) ")";
  }

  .markdown-body .ir a:after,
  .markdown-body a[href^="javascript:"]:after,
  .markdown-body a[href^="#"]:after {
    content: "";
  }

  .markdown-body pre {
    white-space: pre;
    white-space: pre-wrap;
    word-wrap: break-word;
  }

  .markdown-body pre,
  .markdown-body blockquote {
    border: 1px solid #999;
    padding-right: 1em;
    page-break-inside: avoid;
  }

  .markdown-body .progress,
  .markdown-body .progress-bar {
    -moz-box-shadow: none;
    -webkit-box-shadow: none;
    box-shadow: none;
  }

  .markdown-body .progress {
    border: 1px solid #ddd;
  }

  .markdown-body .progress-bar {
    height: 22px;
    border-right: 1px solid #ddd;
  }

  .markdown-body tr,
  .markdown-body img {
    page-break-inside: avoid;
  }

  .markdown-body img {
    max-width: 100% !important;
  }

  .markdown-body p,
  .markdown-body h2,
  .markdown-body h3 {
    orphans: 3;
    widows: 3;
  }

  .markdown-body h2,
  .markdown-body h3 {
    page-break-after: avoid;
  }
}
</style><title>developGuide</title></head><body><article class="markdown-body"><h1 id="_1"><a name="user-content-_1" href="#_1" class="headeranchor-link" aria-hidden="true"><span class="headeranchor"></span></a>开发指南</h1>
<ul>
<li><a href="#1">平台简介</a></li>
<li><a href="#2">接入流程</a></li>
<li><a href="#3">快速入门</a><ul>
<li><a href="#3.1">基本知识</a></li>
<li><a href="#3.2">产品创建</a></li>
<li><a href="#3.3">设备开发</a></li>
<li><a href="#3.4">自定义云服务开发</a></li>
<li><a href="#3.5">APP联调开发</a></li>
</ul>
</li>
<li><a href="#4">开发指导</a><ul>
<li><a href="#4.1">设备开发</a><ul>
<li><a href="#4.1.1">Linux</a></li>
</ul>
</li>
<li><a href="#4.2">云端应用开发</a><ul>
<li><a href="#4.2.1">云端应用开发简介</a></li>
<li><a href="#4.2.2">开发准备</a></li>
<li><a href="#4.2.3">开发指南</a></li>
</ul>
</li>
<li><a href="#4.3">云对接开发</a><ul>
<li><a href="#4.3.1">云对接Java SDK简介</a></li>
<li><a href="#4.3.2">开发准备</a></li>
<li><a href="#4.3.3">开发指南</a></li>
</ul>
</li>
<li><a href="#4.4">APP开发</a><ul>
<li><a href="#4.4.1">iOS</a></li>
<li><a href="#4.4.2">Android</a></li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id='1'>平台简介</h2>

<p>1 概述</p>
<p>MAX提供设备端、APP端、云端三位一体的开发平台，能够大幅降低物联网产品和应用的开发难度，让厂商的开发者从解决海量设备和用户访问带来的高并发、高可用、安全性等一系列基础问题中解放出来，更多的专注在设备端、App端、应用端的业务逻辑上，专心做好产品和服务的用户体验，并在极短时间内便可完成自身产品的联网智能化。<br />
我们的解决方案中包括：</p>
<ul>
<li>
<p>设备端联网固件</p>
</li>
<li>
<p>云应用引擎</p>
</li>
<li>
<p>应用开发SDK</p>
</li>
</ul>
<p>2 设备端联网固件</p>
<p>MAX提供了能够适配多个目前市面上常采购的Wi-Fi厂商的联网固件。<br />
开发者购买WiFi/GPRS联网模块后，将联网固件烧制进去，MCU端修改基本的对接配置，设备便能自动和MAX云端建立安全的数据连接，基于此可以完成远程控制、固件升级、数据上报等。</p>
<p>点击这里了解 MAX 当前支持的联网模块。<br />
3 云应用引擎</p>
<p>物联网产品需要提供优质的服务体验，比如健康管理、用户积分体系等，需要对应进行云端应用的开发，即自定义云端服务。</p>
<p>MAX提供了分布式云端应用引擎，通过弹性扩容的机制提供高并发访问、服务异常情况下容错恢复的特性，让开发者可聚焦云端应用的业务逻辑。</p>
<p>4 应用开发SDK</p>
<p>MAX 提供了 Android 和 iOS 移动应用开发SDK及供 web 后台应用开发的Java、PHP SDK，通过集成SDK快速开发移动App应用或者Web后台应用。<br />
SDK 提供了设备配网、近场通讯、远程控制、固件升级等基础功能，还提供了账号管理、设备管理、设备定时、实时数据等通用服务组件，避免通用云端应用功能的重复开发。</p>
<h2 id='2'>接入流程</h2>

<p>1 MAX注册</p>
<p>需要开发者到MAX官网进行注册，按照页面要求，提供真实完整的申请人基本信息及产品的基本信息。<br />
我们会对每一位注册帐号进行人工审核，审核通过后开通MAX的开发者帐号。</p>
<p>2 商务接洽</p>
<p>信息预审：在注册提交信息后，我们会有相应的工作人员在后台对您提交的信息进行预审。<br />
意向沟通：预审通过后会与您取得联系，与您就合作意向、合作需求进行初步沟通。<br />
签署保密协议：双方确认合作意向后，签署保密协议，互传技术资料。</p>
<p>3 技术评估<br />
双方技术人员沟通确定技术对接方案。</p>
<p>4 商务合同</p>
<p>与客户沟通确定：预估设备量、确定定价、上线时间等合同事宜。<br />
签署合作协议：签署正式合作合同。</p>
<p>5 开发环境产品开发</p>
<p>在开发环境下进行产品功能开发。</p>
<p>6 生产环境产品上线</p>
<p>产品开发完成之后，请联系MAX的客服人员申请上线。MAX后台会将开发环境的配置迁移到生产环境。<br />
开发者再在生产环境进行相关配置后产品正式上线。</p>
<p><code>注意：将产品由开发环境转移到生产环境的详细操作步骤详见产品上线操作说明。</code></p>
<h2 id='3'>快速入门</h2>

<h3 id='3.1'>产品创建</h3>

<p>1 通用基本概念</p>
<p>在进入正题前，我们简单阐述几个重要的概念，在后续开发中会经常用到。</p>
<ul>
<li>主域：即domain,每个开发者在MAX上的唯一标识；</li>
<li>子域：即subdomian,开发者每个产品在MAX上的唯一标识，同一个主域下可以建立多个子域；</li>
<li>云应用引擎：云应用引擎是MAX推出的自定义云服务托管平台, 开发者可以基于MAX提供的开发框架开发自定义应用服务并实现云端托管。</li>
<li>产品属性：产品属性是用来描述硬件产品功能参数的信息。开发者可以通过在云平台定义产品属性，实现对硬件产品功能参数的持久化存储、查询等相关操作。</li>
</ul>
<blockquote>
<p>举例：</p>
<ul>
<li>某家电公司在MAX开通了账号，为了标识此公司，MAX给其分配了&gt;代号Galaxy。这个代号我们称之为此公司的主域。</li>
<li>该公司基于MAX开发了一款空调产品叫做Turing，为了标识这款产品，Galaxy公司为其分配了代号turingIV16。这款产品的代号我们称之为子域。</li>
<li>该公司开发者开发了用户活跃积分系统的云端应用服务来提升用户活跃度，此应用服务为自定义云服务，并运行于云应用引擎。</li>
<li>该空调产品包括当前温度、实际温度、风速3个功能参数，开发者在云平台定义了当前温度、实际温度、风速3个产品属性，并通过自定义云服务将产品属性写入云平台。<br />
</li>
</ul>
</blockquote>
<p>2 物联网应用云架构</p>
<p>下图是物联网应用的基本云架构,MAX 分别提供了设备端、云端、APP 端相对应的 SDK、框架和组件，简化物联网应用的开发复杂度。</p>
<ul>
<li>智能硬件设备搭载了内嵌 MAX 联网固件的联网模块后，即可安全的连接至云端，同各类设备和用户进行安全的数据交互；</li>
<li>移动端 App 使用了 MAX App SDK 后，就可以方便快速的针对物联网应用场景做开发；</li>
<li>云端开发者在 MAX 云端应用框架的支撑下，可以专注于业务场景，快速开发高可靠分布式的自定义云服务，稳定运行在 MAX 云应用引擎中。</li>
</ul>
<p>3 主要数据流图</p>
<p>本节中，我们将针对App给设备发送控制指令、设备上报数据这两个场景，从数据流的角度阐述自定义云服务、数据表。</p>
<p>3.1 远程发送控制指令</p>
<p>App给设备发送控制指令的基本流程如下示意图所示：</p>
<p><img alt="" src="///E://work/frontwork/ngx-os/images/device-data-flow-downlink.png" /></p>
<p>1.App用户通过App上调用的SDK接口（如 sendToDeviceWithOption()），给绑定的某台设备发送控制指令。</p>
<p>2.MAX的接入服务集群对上述消息中的用户身份进行安全认证，对用户访问设备的合法权限进行检查，通过后将控制指令转发给设备网关集群。</p>
<p>3.设备网关集群（GW）通过路由找到设备的长连接通路，将上述控制指令转发至设备。<br />
3.2 设备上报数据</p>
<p>设备上报数据的路径如下示意图所示：</p>
<p><img alt="" src="///E://work/frontwork/ngx-os/images/device-data-flow-uplink.png" /></p>
<p>1.设备和MAX设备网关集群建立安全通信链路后，定期或者非定期的上报事件/数据给设备网关集群。</p>
<p>2.设备网关集群按照上报数据帧中包含的基本信息（设备所属的主域和子域），将数据分发至产品对应的自定义服务中。</p>
<h3 id='3.2'>产品创建</h3>

<p>开通账号<br />
首先，开发者需要联系MAX，双方达成合作意向后，获取一个开发者账号，MAX开通客户的账号，确定公司的主域信息。</p>
<blockquote>
<p>转发给自定云服务的消息包括如下基本内容： - 设备所属产品的主域、子域信息，指明设备所属的开发者、产品。 - 设备的唯一标识，如设备的物理 ID。 - 设备实际上报的数据帧。</p>
</blockquote>
<p>1.开发者可以在自定义云服务中解析上报的数据帧，识别数据内容，进行相应的处理计算，比如，将上报的数据持久化存储到产品属性中、向此设备绑定的用户发送提醒等。</p>
<p>2.App则可以通过产品属性提供的接口，获取设备有关历史数据。</p>
<p>4 实战进阶<br />
接下来，我们将通过构建一个智能灯demo，来了解如何基于MAX快速打造一款物联网应用。</p>
<h4 id='3.1.2'>创建产品</h4>

<p>1 开通账号</p>
<p>首先，开发者需要联系MAX，双方达成合作意向后，获取一个开发者账号，MAX开通客户的账号，确定公司的主域信息。</p>
<p>2 创建产品</p>
<p>比如我们要开发构建一个物联网应用：智能灯。</p>
<p>对其产品定义如下：</p>
<p>此智能灯可以通过 wifi 连接至云端；<br />
用户可通过物理开关直接控制此灯的开关状态；<br />
用户也可通过 app 控制此灯的开关状态；<br />
用户可以在 app 上看到此灯的开关历史记录；<br />
开发者获取了账号登陆控制台，通过【产品管理 =&gt; 新建产品】完成产品新建。</p>
<p><img alt="" src="///E://work/frontwork/ngx-os/images/create_product.jpg" /></p>
<p>需要注意以下字段：</p>
<ul>
<li>子域名：开发者给产品设置的子域名（主域名、子域名的概念见快速入门-基本知识）。</li>
<li>数据格式：如实选择设备和云端通信的数据格式。目前MAX支持 json 或者二进制两种格式的数据流。</li>
<li>加密方式：所有连接至 MAX的硬件产品都需要通过加密保证通信链路数据的安全性。可根据可用资源处理能力选择加密类型。</li>
</ul>
<p>3 定义属性</p>
<p>我们需要知道智能灯的开关状态属性的记录，就需要依赖于产品属性实现。 对产品属性的定义如下：</p>
<ul>
<li>switch：智能灯的开关状态属性。</li>
<li>source：智能灯的操作来源属性。<br />
开发者登录控制台后，通过【产品管理 =&gt; 智能灯Demo =&gt; 属性管理 =&gt; 新建属性 】完成产品属性的定义。</li>
</ul>
<p><img alt="" src="///E://work/frontwork/ngx-os/images/%E6%96%B0%E5%BB%BA%E5%B1%9E%E6%80%A7.jpg" /></p>
<p>需要注意以下字段：</p>
<ul>
<li>属性名称：属性在控制台上的中文显示名。</li>
<li>属性标识：产品维度此属性的唯一标识，不能重复。</li>
<li>属性类型：属性的参数类型，例如布尔型、整数型、字符串型等。<br />
创建好的属性如下图所示：</li>
</ul>
<p><img alt="" src="///E://work/frontwork/ngx-os/images/%E5%B1%9E%E6%80%A7%E7%A4%BA%E5%9B%BE.jpg" /></p>
<p>4 创建密钥</p>
<p>设备端可以选择两种安全等级，一是产品级密钥，二是设备级密钥，前者安全性不如后者，但对于设备生产流程而言更方便。</p>
<ul>
<li>产品级秘钥：每个产品的所有设备共享同一个秘钥。</li>
<li>设备级秘钥：每个设备一个独立不重复的秘钥。<br />
为了简单，在 demo 中我们选择了使用产品级秘钥。</li>
</ul>
<p>通过【产品管理 =&gt;（选择产品）=&gt; 管理 =&gt; 产品信息】界面，选择【系统生成】来生成一对 RSA 公私钥。 </p>
<p><img alt="" src="///E://work/frontwork/ngx-os/images/product_generate_key.jpg" /></p>
<p>这里生成的设备秘钥对，将在设备开发中使用到。</p>
<h3 id='3.2'>设备开发</h3>

<p>本节中我们将阐述如何获取和烧录设备固件，以及如何使用MCU模拟器进行联网模块配置。</p>
<p>设备端开发和调试涉及如下概念：</p>
<ul>
<li>配网：通过SmartConfig，AirKiss等技术，使WiFi模块获取到路由器的SSID和密码。</li>
<li>设备绑定：建立App用户和指定设备间的绑定关系，以实现App用户与指定设备间的访问授权。</li>
</ul>
<p>1 环境搭建</p>
<p>本demo中，我们以汉枫的WiFi模块LPB100作为WiFi联网模块，以MAX开发的MCU模拟器来模拟MCU。另外，还需要下载并安装用于WiFi配网及设备控制的App（如何下载下面描述）。</p>
<blockquote>
<p>注：如果您使用的WiFi模块不是本Demo中的型号，请联系我们的FAE，我们会提供给您适用于您的WiFi芯片的WiFi固件。目前MAX已经适配了大部分主流的WiFi芯片，具体列表参见合作厂商模块型号。</p>
</blockquote>
<p>1.1 软件环境</p>
<table>
<thead>
<tr>
<th>软件</th>
<th>说明</th>
<th>如何下载</th>
</tr>
</thead>
<tbody>
<tr>
<td>MCU调试工具</td>
<td>模拟MCU的软件工具（windows）</td>
<td>请到下载页面的“工具”部分下载</td>
</tr>
<tr>
<td>ac-service-android-demo.apk</td>
<td>App Demo调试工具</td>
<td>请在下载页面的“Demo下载”部分下载</td>
</tr>
<tr>
<td>LPBS2W_UPGRADE.bin</td>
<td>Demo固件</td>
<td>请联系我们获取</td>
</tr>
<tr>
<td>1.2 硬件环境</td>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<table>
<thead>
<tr>
<th>配置项</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>USR-WIFI232-G2-EVK V1.2</td>
<td>WiFi开发板型号</td>
</tr>
<tr>
<td>USB串口转接线</td>
<td>连接WiFi开发板与PC机</td>
</tr>
<tr>
<td>能够连接外网的路由器</td>
<td></td>
</tr>
<tr>
<td>环境搭建时各模块连接示意图如下：</td>
<td></td>
</tr>
</tbody>
</table>
<p><img alt="" src="///E://work/frontwork/ngx-os/images/Demo%E5%9C%BA%E6%99%AF%E8%BF%9E%E6%8E%A5%E7%A4%BA%E6%84%8F%E5%9B%BE.png" /></p>
<p>汉枫WiFi模块开发板连线图如下：</p>
<blockquote>
<p>需要注意红色方框中跳线帽的连接！</p>
</blockquote>
<p><img alt="" src="///E://work/frontwork/ngx-os/images/DemoWiFi%E5%BC%80%E5%8F%91%E6%9D%BF%E8%BF%9E%E7%BA%BF%E7%A4%BA%E6%84%8F%E5%9B%BE.png" /></p>
<p>2 开始</p>
<p>环境搭建好后，我们开始按如下步骤实现demo功能：</p>
<p>2.1 烧录WiFi固件</p>
<p>将下载的WiFi固件烧录到您的WiFi芯片中。具体的烧录方法请参见您的WiFi芯片对应的固件升级文档，也可以联系我们的FAE。</p>
<blockquote>
<p>本Demo中的汉枫LPB100的固件升级方法可以参考汉枫LPB100固件升级流程。</p>
<p>固件烧录后，请始终保持WiFi在上电状态。</p>
</blockquote>
<p>2.2 配置模拟MCU</p>
<p>在PC端双击MCU模拟器.exe后，在弹出的视窗中填写相应的信息，MCU模拟器界面如下： </p>
<p><img alt="" src="///E://work/frontwork/ngx-os/images/DemoMCUConfig.png" /></p>
<p>图中，用红框标出的区域为开发者需要关心的地方，其中：</p>
<ul>
<li>窗口1：WiFi连接到PC机上的串口端口号，MCU模拟器会自动检测</li>
<li>窗口2：MCU模拟器与WiFi进行串口通信时的波特率，Demo采用的是9600</li>
<li>窗口3：串口开关按钮</li>
<li>窗口4：开发者的DomainId</li>
<li>窗口5：开发者注册的产品的SubDomainId</li>
<li>窗口6：开发者注册产品时，生成的RSA密钥对中的私钥</li>
<li>窗口7：触发WiFi模块进入配网状态的按钮，处于配网状态的WiFi模块会等待App进行配网以获取路由器的SSID和密码</li>
<li>窗口8：MCU模拟器的串口数据输出区，MCU与WiFi模块的交互过程中的log信息会显示在此处</li>
</ul>
<p>2.3 通过MCU触发配网</p>
<p>点击MCU模拟器中的“打开串口”按钮，之后点击“智能配网”按钮，会使WiFi模块重新进入配网状态，MCU模拟器会显示如下log：</p>
<p><img alt="" src="///E://work/frontwork/ngx-os/images/DemoLogIntoSmartlink.png" /></p>
<p>至此，设备还需要通过App完成配网，然后才可以连接云端，并进行绑定、控制等操作。</p>
<h3 id='3.3'>自定义云服务开发</h3>

<p>本节介绍如何将智能灯云端自定义云服务 Demo运行在MAX提供的云应用引擎之上。</p>
<blockquote>
<p>以下内容假设开发者有一定的 Java 基础，确保安装1.7版本及以上版本的JDK。</p>
</blockquote>
<p>1 环境安装</p>
<p>首先请按照如下文档安装 IntelliJ IDE 和 Maven（至少 3.2 以上版本）。</p>
<ul>
<li>
<p><a href="http://www.phperz.com/article/15/0923/159066.html">IntelliJ IDE</a></p>
</li>
<li>
<p><a href="http://wiki.jikexueyuan.com/project/maven/environment-setup.html">Maven</a></p>
</li>
</ul>
<p>安装好 Maven 后，使用 <code>mvn -version</code> 来检查是否安装成功。</p>
<p>2 本地运行 Demo</p>
<p>开发者首先在本地进行开发和调试自定义云服务，可在本地运行自定义云服务，方便调试和查看问题。</p>
<blockquote>
<p>注意：</p>
<p>1.本机运行自定义云服务要求已安装 Java 的运行时环境 JRE（推荐 1.7 或更新版本）。</p>
<p>2.DemoService只能在英文目录下执行。<br />
</p>
</blockquote>
<p>步骤如下：</p>
<p>Step 1</p>
<p>从 MAX 下载页面下载智能灯的云端 自定义云服务demo。<br />
解压后包括两个部分，其中<code>/src</code> 是自定义云服务的源代码，<code>/package</code> 的目录结构则是自定义云服务的打包结构、不能随意修改。</p>
<p>Step 2</p>
<p>进入 <code>/package</code> 目录。修改 <code>/config</code> 文件夹下的 <code>cloudservice-conf.xml</code> 文件。</p>
<p>按照下面注释的信息，分别填写开发者 ID、开发者秘钥对、主域子域信息。</p>
<blockquote>
<p>开发者 ID，开发者秘钥对（access-key，secret-key），主域子域等信息，均能登录 MAX 开发者控制台获取：</p>
<ul>
<li>开发者 ID：【个人中心 =&gt; 开发者 ID】获取。</li>
<li>开发者秘钥对：【服务管理 =&gt; 开发秘钥】任选一对 AK/SK &gt; * 签名秘钥即可（AK/SK 签名原理请参考这里）。</li>
<li>主域：【个人中心 =&gt; 主域】获取。</li>
<li>子域：【产品管理】页面上，查看特定产品的子域。</li>
</ul>
</blockquote>
<pre><code class="xml">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;configuration&gt;
    &lt;developer&gt;
        &lt;!-- 控制台路径：【个人信息-&gt;个人信息-&gt;开发者ID】 --&gt;
        &lt;id&gt;此处填写你的开发者ID&lt;/id&gt;
    &lt;/developer&gt;

    &lt;authentication&gt;
        &lt;!-- 控制台路径：【密钥对管理-&gt;全部密钥对】，选择已启用的任意一对。 --&gt;
        &lt;access-key&gt;此处填写开发者 access-key&lt;/access-key&gt;
        &lt;secret-key&gt;此处填写开发者 secret-key&lt;/secret-key&gt;
    &lt;/authentication&gt;

    &lt;service&gt;
        &lt;!-- 控制台路径：【产品管理-&gt;产品列表-&gt;主域名】 --&gt;
        &lt;major-domain&gt;此处填写你的主域名&lt;/major-domain&gt;
        &lt;!-- 控制台路径：【产品管理-&gt;产品列表-&gt;子域名】 --&gt;
        &lt;sub-domain&gt;此处填写自定义云服务对应的产品的子域名&lt;/sub-domain&gt;
    &lt;/service&gt;
&lt;/configuration&gt;
</code></pre>

<p>Step 3</p>
<p>demo 中为了能够查询开关状态属性纪录，需要持久化存储设备上报的开关记录数据。</p>
<p>通过开发者管理控制台的【产品管理=&gt;智能灯Demo=&gt;属性管理】完成设备上报属性参数的定义。</p>
<p>定义好的属性如下图所示：</p>
<p><img alt="" src="///E://work/frontwork/ngx-os/images/%E5%B1%9E%E6%80%A7%E7%A4%BA%E5%9B%BE.jpg" /></p>
<p>Step 4</p>
<p>进入 <code>/package</code> 目录。</p>
<p>Linux 下，在终端运行如下命令启动服务：</p>
<p><pre><code>sh start.sh
</code></pre><br />
Windows 下，在 cmd 窗口中运行如下命令启动服务：</p>
<pre><code>start.cmd
</code></pre>

<p>至此，本地自定义云服务提供 Restful API 的一个服务就已经启动了，通过文件夹下的 /log 目录可以看到服务运行的日志。</p>
<p>本地启动自定义云服务成功后，可使用 curl 命令进行测试。</p>
<blockquote>
<p>注意： Linux 系统上如果没有 curl 则使用诸如 apt-get install curl（Ubuntu、Debian）或者 yum install curl（RedHat、Fedora）的方式来安装。 Windows 系统上安装 curl 的方法见<a href="http://jingyan.baidu.com/article/a681b0dec4c67a3b1943467c.html">这里</a>。</p>
</blockquote>
<p>测试用的 curl 指令如下：</p>
<blockquote>
<p>注意： 下面的 curl 指令中有两处需开发者自行修改：</p>
<p>1.将 X-Zc-Major-Domain: DOMAIN_NAME 中的 DOMAIN_NAME 替换成开发者主域。</p>
<p>2.将 X-Zc-Sub-Domain: SUBDOMAIN_NAME 中的 SUBDOMAIN_NAME 替换成产品子域。</p>
<p>主域和子域参考上述《本地运行 Demo》里的 Step 2。</p>
</blockquote>
<pre><code>curl -v -X POST -H &quot;Content-Type:application/x-zc-object&quot; -H &quot;X-Zc-User-Id:1&quot; -H &quot;X-Zc-Major-Domain: DOMAIN_NAME&quot; -H &quot;X-Zc-Sub-Domain: SUBDOMAIN_NAME&quot; --data-ascii &quot;{\&quot;action\&quot;:\&quot;I am test\&quot;}&quot; &quot;http://localHost:8080/test&quot;
</code></pre>

<p>简单解释一下上面的 curl 指令（更多 curl 用法请参考 curl 手册）：</p>
<ul>
<li>-v 表示 verbose 即显示 HTTP 通信交互详情。</li>
<li>-x POST 表示使用 HTTP POST 方法。</li>
<li>-H 表示 HTTP 请求头。</li>
<li>&ndash;data-ascii 表示本请求的 HTTP body 格式是 ASCII。 其余经常用到的格式还有 &ndash;data-binary，即按照字节流（octet stream）来发送请求；具体使用请参考 curl 手册，此处不赘述。</li>
<li>&ldquo;<a href="http://localHost:8080/test">http://localHost:8080/test</a>&rdquo; 表示给本地 8080 端口运行的自定义云服务的 test 方法发送请求。 8080 是自定义云服务demo本地默认的端口号，见 /config 文件夹下的 cloudservice-conf.xml 文件，<service> <port> 配置。 test 方法是专供测试使用的一个方法，什么动作都不会触发，只回复一个空HTTP响应（没有任何 payload 的 HTTP 响应）表示请求被正常处理。</li>
</ul>
<p>发送了上述 curl 指令后，开发者应该可以在控制台上看到类似下面的响应。</p>
<pre><code>&lt; HTTP/1.1 200 OK
&lt; Content-Type: application/x-zc-object
&lt; X-Zc-Msg-Name: X-Zc-Ack
&lt; Content-Length: 0
</code></pre>

<p>其中：</p>
<ul>
<li>200 是 HTTP 返回码（表示 HTTP 请求正常返回）；</li>
<li>X-Zc-Msg-Name 是 MAX 服务框架自定义的 HTTP 请求头，当此值等于 X-Zc-Ack 时表示请求被正常处理（反之，如果是 X-Zc-Err 则表示出现了错误，并会附带错误码和错误详情）；<br />
至此，我们已完成了本地运行 自定义云服务demo 和发送 curl 指令进行测试。</li>
</ul>
<p>3 发布服务</p>
<p>接下来，我们将阐述如何编译<br />
自定义云服务demo（见下面的《<a href="#3.4">编译自定义云服务工程</a>》），并将编译好的自定义云服务发布至云端（见《<a href="#3.4">发布自定义云服务</a>》。</p>
<p>3.1 编译自定义云服务工程</p>
<p>在上面的环境安装中，开发者已经安装了 maven 并使用 <code>mvn -version</code> 验证了安装是否成功。</p>
<p>本节中，将阐述如何利用 maven 来编译自定义云服务工程。</p>
<p>非常简单，只需要如下两步。</p>
<p>Step 1</p>
<p>进入下载的 demo 解压缩后的文件夹，修改 maven 的项目对象模型（project object model）文件 <code>pom.xml</code>。</p>
<p>修改下面的部分，其余部分都无需变动。</p>
<pre><code>&lt;groupId&gt;com.MAX.demo&lt;/groupId&gt;
&lt;artifactId&gt;demo_service&lt;/artifactId&gt;
&lt;version&gt;1.1.9&lt;/version&gt;
</code></pre>

<p>上面三项的准确含义，请参考 maven 文档。 简单来说：</p>
<ul>
<li><code>groupId</code> 就是服务源代码文件夹所在的目录结构；</li>
<li><code>artifactId</code> 是开发者给自己的自定义云服务起的名字（可以任意自定义）；</li>
<li><code>version</code> 就是开发者给自己的自定义云服务标记的版本号（便于开发者管理版本）。<br />
因此，一般来说，开发者可以任性修改 artifactId 和 version，groupId 则保持不变。</li>
</ul>
<p>Step 2</p>
<p>依然是在上述文件夹（有 pom.xml 文件的文件夹）内，打开终端（Linux）或者 cmd 窗口（Windows），执行 mvn package 开始打包。</p>
<p>初次打包会花费较长时间，等待一段时间后，就能在终端或者 cmd 中看到类似下面的信息。</p>
<pre><code>[INFO] BUILD SUCCESS
[INFO] ------------------------------------------------------------------------
[INFO] Total time: 3.582s
[INFO] Finished at: Wed Aug 17 16:34:14 CST 2016
[INFO] Final Memory: 8M/151M
[INFO] ------------------------------------------------------------------------
</code></pre>

<p>至此，开发者就已经完成了服务编译，可以在项目文件夹的 <code>package/lib</code> 路径下找到对应的 jar 包了。<br />
比如，在第一步中开发者设置的 <code>artifactId</code> 是 <code>demo_service</code>，那么在 <code>package/lib</code> 文件夹中就能看到刚打包生成的 <code>demo_service.jar</code> 包。</p>
<p>3.2 发布自定义云服务</p>
<p>UDS完成本地开发和测试后，按照要求的目录结构打包成 zip，即可上传到 MAX 云应用引擎完成上线发布。</p>
<p>具体步骤如下：</p>
<p>Step 1</p>
<p>进入 demo 文件夹里的 <code>package</code> 路径，然后将 <code>package</code> 路径下所有内容打包成 zip。 再次说明：要求 zip 文件解压缩后能直接得到此目录结构，不能存在其它中间层次的目录。</p>
<p>Step 2</p>
<p>登陆管理控制台，通过【服务管理 =&gt; 自定义云服务 =&gt; 新建服务】可创建产品（子域）级别的自定义云服务，也可以创建主域级别的自定义云服务。</p>
<p><img alt="" src="///E://work/frontwork/ngx-os/images/upload_uds_new_service.png" /></p>
<ul>
<li>所属产品：在下拉菜单中，选择前面我们创建的产品。</li>
<li>服务名：填写自定义云服务的名称，如 demo_service。</li>
<li>服务描述：填写自定义云服务的描述。</li>
</ul>
<p>之后，我们就可以在【服务管理 =&gt; 自定义云服务】里看到新建的服务了。</p>
<p>Step 3</p>
<p>点击 Step 2 里新建的服务的【配置】，就能进行版本管理，并上传服务到MAX的分布式应用引擎里运行了。</p>
<p><img alt="" src="///E://work/frontwork/ngx-os/images/upload_uds_new_version.png" /></p>
<ul>
<li>主版本、副版本、修订版本号：MAX 对自定义云服务采取的一种版本约定，即类似于上面在 pom.xml 文件里填写的 version 参数（1.9.1）。</li>
<li>App 文件：Step 1 里打包的 zip 包。<br />
Step 4</li>
</ul>
<p>我们可通过控制台【服务管理 =&gt;自定义云服务 =&gt; 版本管理 =&gt; 上线/下线】，管理/查看此自定义云服务版本的运行状态了。</p>
<p>3.3 设置设备转发</p>
<p>创建完成自定义云服务后，设备可以选择将设备转发到指定的UDS服务，回到之前创建的智能灯设备配置之中，选择将设备数据转发到此自定义云服务。<br />
如下图所示。</p>
<p><img alt="" src="///E://work/frontwork/ngx-os/images/%E6%95%B0%E6%8D%AE%E8%BD%AC%E5%8F%91.jpg" /></p>
<h3 id='3.4'>APP联调开发</h3>

<p>本节是《快速入门》的最后一节，开发者将通过App Demo对设备进行配网、绑定设备、控制设备，设备通过上报开关状态和自定义云服务进行联调，通过App查看操作的历史纪录，将App和自定义云服务进行功能联调。</p>
<p>1 App Domain配置</p>
<p>将上一步中下载的App Demo调试工具安装到安卓手机中并运行。<br />
在界面的右上角点击“Domain配置”，在弹出的界面内填写信息，示意如下图：</p>
<blockquote>
<p>注意：<br />
开发者需要填写自己在&rdquo;注册开发者账号和注册产品&rdquo;时注册的产品的Domain、DomainId以及SubDomain</p>
</blockquote>
<p><img alt="" src="///E://work/frontwork/ngx-os/images/DemoAppConfig.png" /></p>
<p>之后，点击“配置”按钮，回到登录界面。</p>
<p>2 App用户注册并登录</p>
<p>Domain配置结束后，在返回的在登录界面里，点击“新用户注册”，在弹出的界面填写用户注册信息：</p>
<blockquote>
<p>注意：<br />
开发者需要填写自己的信息，下图中的内容只是示意。</p>
</blockquote>
<p><img alt="" src="///E://work/frontwork/ngx-os/images/DemoAppRegister.png" /></p>
<p>注册成功后，在登录界面输入用户名和密码，点击登录。</p>
<p>3 设备绑定<br />
保证路由器正常工作的前提下，在App上点击“添加新设备”后，输入路由器的信息，WiFi模块会自动连接MAX的云端服务器，在MCU模拟器上显示如下log：</p>
<p><img alt="" src="///E://work/frontwork/ngx-os/images/DemoLogConnectCloud.png" /></p>
<p>App会弹出如下界面： </p>
<p><img alt="" src="///E://work/frontwork/ngx-os/images/DemoAppBindDevice.png" /></p>
<p>输入用户自定义的设备名称后，点击绑定设备，App会弹出如下界面：</p>
<p><img alt="" src="///E://work/frontwork/ngx-os/images/DemoAppControl.png" /></p>
<p>4 设备控制</p>
<p>设备绑定成功后，就可以通过App对设备进行远程控制了，点击App上的开/关灯按钮，在MCU模拟器上会有相应的log打印，表明MCU收到并响应了App的远程控制指令： </p>
<p><img alt="" src="///E://work/frontwork/ngx-os/images/DemoLogDeviceControl.png" /></p>
<p>5 查看开关记录</p>
<p>如果在“自定义云服务开发”章节中，按照步骤创建了自定义云服务，则可以在App中查看到对应的</p>
<p>历史开关灯的记录： </p>
<p><img alt="" src="///E://work/frontwork/ngx-os/images/DemoAppUDSLog.png" /></p>
<blockquote>
<p>注意：<br />
想要了解更多自定义云服务实现层面的细节，请阅读自定义云服务开发指导。<br />
至此，一个智能灯的Demo完整运行起来了，涉及准备开发者账号、自定义云服务开发、设备端开发以及App端的配网、绑定、控制、查看历史纪录等功能。</p>
</blockquote>
<p>如果中间有任何的疑问，可以联系MAX的技术支持，我们会竭诚为您服务！</p>
<h2 id='4'>开发指导</h2>

<h3 id='4.1'>设备开发</h3>

<h4 id='4.1.1'>Linux</h4>

<h3 id='4.2'>云端应用开发</h3>

<h4 id='4.2.1'>云端应用开发简介</h4>

<p>1 功能与目的</p>
<p>为了快速开发和业务逻辑相关的服务端程序，提高开发者效率，提高企业产品研发/上线的效率，MAX提供了统一的服务开发框架，并内嵌了一系列由MAX提供的云端服务。该框架支持开发者开发可运行于MAX云端的自定义后端服务（UDS：User Defined Service）以及定时任务。MAX的服务框架提供了高度封装的RPC服务，client与server通信时，client只需要知道service的名字，并提供相应的访问参数即可。<br />
当前MAX提供Java版本的服务编程框架。</p>
<p>2 主要功能</p>
<table>
<thead>
<tr>
<th>序号</th>
<th>功能名称</th>
<th>详细内容</th>
</tr>
</thead>
<tbody>
<tr>
<td>1.</td>
<td>UDS服务</td>
<td>可运行于MAX云端的自定义后端服务</td>
</tr>
<tr>
<td>2.</td>
<td>定时任务</td>
<td>可定时触发的自定义定时任务</td>
</tr>
<tr>
<td>3.</td>
<td>正向代理</td>
<td>通过正向代理服务支持UDS服务访问外部网络</td>
</tr>
<tr>
<td>4.</td>
<td>消息交互</td>
<td>与设备端、APP端进行消息交互通信</td>
</tr>
<tr>
<td>5.</td>
<td>账号管理</td>
<td>支持管理用户基本信息并及时做出操作</td>
</tr>
<tr>
<td>6.</td>
<td>设备管理</td>
<td>支持管理设备的基本信息并及时做出操作</td>
</tr>
<tr>
<td>7.</td>
<td>设备属性</td>
<td>MAX提供的用于处理及存储设备上报数据的服务</td>
</tr>
<tr>
<td>8.</td>
<td>存储服务</td>
<td>MAX提供的类似数据库的通用数据存储服务</td>
</tr>
<tr>
<td>9.</td>
<td>文件存储</td>
<td>对常见的文件/图片类等大文件进行上传下载</td>
</tr>
<tr>
<td>10.</td>
<td>排行榜</td>
<td>支持按照不同周期、数据获取数据排行</td>
</tr>
<tr>
<td>11.</td>
<td>推送服务</td>
<td>对APP进行消息推送</td>
</tr>
<tr>
<td>12.</td>
<td>用户意见反馈</td>
<td>支持快速开发用户意见反馈页</td>
</tr>
<tr>
<td>13.</td>
<td>短信服务</td>
<td>向当前注册用户发送自定义短信消息</td>
</tr>
<tr>
<td>14.</td>
<td>天气服务</td>
<td>支持快速获取PM2.5、天气/空气质量等常用天气信息</td>
</tr>
<tr>
<td>15.</td>
<td>定时服务</td>
<td>定时向设备下发消息</td>
</tr>
<tr>
<td>16.</td>
<td>测试桩</td>
<td>模拟真实设备或者服务接收并响应消息</td>
</tr>
</tbody>
</table>
<h4 id='4.2.2'>开发准备</h4>

<p>本章先介绍UDS（User Defined Service）在MAX平台上的发布要求，然后以官网上发布的DemoService为基础，介绍如何在本地运行UDS服务，以及如何开发自己的UDS服务。</p>
<p>1 UDS发布说明</p>
<p>在MAX管理控制台中，设备通过长连接上报数据可以由对应产品指定转发的UDS来处理。 其它业务请求（包括设备或其它客户端发起的）也可以由请求发起方选择由指定UDS来处理。</p>
<p>开发者可通过MAX开发者管理控制台提交、运行UDS。提交和运行UDS时，要求压缩包其目录结构与MAX发布的Java版本服务开发框架一致，如下所示。</p>
<pre><code>/config
    /cloudservice-conf.xml
/lib
    /MAX-framework-1.5.6.jar
    /ac-java-api-1.6.3.jar
    /commons-collections-3.2.1.jar
    /commons-configuration-1.10.jar
    /commons-lang-2.6.jar
    /slf4j-api-1.7.7.jar
    /...
start.sh
start.cmd
</code></pre>

<blockquote>
<p>注意事项：</p>
<p>1.所有依赖的第三方jar包，均放在lib文件夹下。其中包括MAX的服务框架MAX-framework-1.5.6.jar和ac-java-api-1.6.3.jar。根据SDK的发行状态，各jar包的版本号可能不同。</p>
<p>2.开发者开发的UDS服务需要编译成jar包，并置于lib文件夹下。另外，开发者自己所引用的第三方jar包，也需要一并置于lib文件夹下。</p>
<p>3.按上述目录结构将所有文件压缩、打包成一个ZIP文件（文件名可自取）。要求ZIP文件解压缩后能直接得到上述目录或文件，不能存在其它中间层次的目录。</p>
<p>4.在开发者管理控制台中提交压缩后的ZIP文件，之后即可通过“上线”/“下线”功能管理UDS的运行状态。</p>
</blockquote>
<p>2 本机运行UDS</p>
<p>本机运行UDS要求已安装Java的运行时环境JRE（推荐1.7或更新版本）。</p>
<p>1、首先，从MAX官网下载栏目下载DemoService.zip，解压后进入package目录，修改config文件夹下的cloudservice-conf.xml文件。</p>
<pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;configuration&gt;
    &lt;developer&gt;
        &lt;!-- 对应“管理控制台-&gt;开发者ID” --&gt;
        &lt;id&gt;4&lt;/id&gt;
    &lt;/developer&gt;

    &lt;authentication&gt;
        &lt;!-- 对应“服务管理-&gt;开发密钥”，选择已启用的任意一对。 --&gt;
        &lt;access-key&gt;33df24a54054067e80af49d939b429c2&lt;/access-key&gt;
        &lt;secret-key&gt;5e2fec3440e23c5e807910b13b672015&lt;/secret-key&gt;
    &lt;/authentication&gt;

    &lt;service&gt;
        &lt;!-- 对应“产品管理-&gt;产品列表-&gt;主域名” --&gt;
        &lt;major-domain&gt;MAX&lt;/major-domain&gt;
        &lt;!-- 对应“产品管理-&gt;产品列表-&gt;子域” --&gt;
        &lt;sub-domain&gt;demo&lt;/sub-domain&gt;
    &lt;/service&gt;
&lt;/configuration&gt;
</code></pre>

<blockquote>
<p>注：开发者ID，access-key，secret-key等信息，均能登录MAX网站（开发者管理控制台）获取。其它项不需要修改。<br />
2、启动终端，进入package目录下，接下来就可以在本地启动服务并进行测试。</p>
</blockquote>
<p>linux下在终端运行如下命令启动服务：<br />
<pre><code>sh start.sh
</code></pre><br />
windows下在cmd中运行如下命令启动服务：<br />
<pre><code>start.cmd
</code></pre><br />
本地启动成功后，可使用curl命令进行开灯测试。</p>
<p>linux下使用curl命令：</p>
<p><pre><code>curl -v -X POST -H &quot;Content-Type:application/x-zc-object&quot;  -H &quot;X-Zc-Major-Domain:MAX&quot; -H &quot;X-Zc-Sub-Domain:test&quot; -H &quot;X-Zc-User-Id:1&quot; -d &quot;{\&quot;action\&quot;:\&quot;I'm test\&quot;}&quot; 'http://localHost:8080/test'
</code></pre><br />
windows下使用curl命令请求：</p>
<pre><code>curl -v -X POST -H &quot;Content-Type:application/x-zc-object&quot; -H &quot;X-Zc-Major-Domain:MAX&quot; -H &quot;X-Zc-Sub-Domain:test&quot; -H &quot;X-Zc-User-Id:1&quot; --data-ascii &quot;{\&quot;action\&quot;:\&quot;I'm test\&quot;}&quot; &quot;http://localHost:8080/test&quot;
</code></pre>

<blockquote>
<p>注：X-Zc-Major-Domain是开发者帐号的主域的名字；X-Zc-Sub-Domain是要访问的服务所关联的子域的名字；X-Zc-User-Id是用户的ID。</p>
</blockquote>
<p>3 开始自己的UDS程序</p>
<p>3.1 系统准备</p>
<p>在进行开发前，需要对系统以及环境进行设置。目前框架只支持java语言，因此系统准备基本都是和java相关，如JDK、maven等。</p>
<ul>
<li>JDK</li>
</ul>
<p>安装JDK，建议采用1.7版本JDK。</p>
<ul>
<li>maven</li>
</ul>
<p>安装maven，建议采用3.2以上版本。</p>
<ul>
<li>Cloud SDK</li>
</ul>
<p>点此进入下载页 获取MAX云端服务SDK</p>
<p>3.2 新建maven工程</p>
<p>熟悉上述流程之后，可以开始开发自己的UDS程序。以下从开始逐步介绍开发步骤。</p>
<p>Intellij</p>
<p>1、 新建工程</p>
<p>选择新建maven工程，JDK选择正确的版本。</p>
<p><img alt="" src="///E://work/frontwork/ngx-os/images/new_project_1_1.png" /></p>
<p>选择maven工程。</p>
<p><img alt="" src="///E://work/frontwork/ngx-os/images/new_project_1_2.png" /></p>
<p>注意JDK版本选择安装的1.7。点击next即可。</p>
<p><img alt="" src="///E://work/frontwork/ngx-os/images/next.png" /></p>
<p>进入下一个页面，根据情况填写groupid/artifactid/version等信息。</p>
<p><img alt="" src="///E://work/frontwork/ngx-os/images/new_project_1_3.png" /></p>
<p>填好后点击next，进入下一步，填写工程名以及存放路径。</p>
<p><img alt="" src="///E://work/frontwork/ngx-os/images/new_project_1_4.png" /></p>
<p>然后点击finish完成新建工程向导。</p>
<p><img alt="" src="///E://work/frontwork/ngx-os/images/new_project_1_5.png" /></p>
<p>至此，新建工程完成。</p>
<p>2、 部署MAX框架便于本机测试以及提交版本</p>
<p>新建package目录，将MAX-framework-1.4.0.zip解压到package目录下。</p>
<blockquote>
<p>package子目录的结构为config/、lib/、start.sh文件等</p>
</blockquote>
<p>3、 设置工程</p>
<p>设置编码方式，建议将字符编码设置为UTF-8或GBK</p>
<p><img alt="" src="///E://work/frontwork/ngx-os/images/setting.png" /></p>
<p><img alt="" src="images/fileencoding.png" /></p>
<p>按照步骤1完成了工程的新建，还需对工程属性进行一些设置以方便后续的编译、单测。 点击File -&gt; Project Structure&hellip;</p>
<p><img alt="" src="///E://work/frontwork/ngx-os/images/set_project_1_1.png" /></p>
<p>首先设置工程所使用的JDK版本1.7和语言级别7.0。</p>
<p><img alt="" src="///E://work/frontwork/ngx-os/images/set_project_1_2.png" /></p>
<p>设置开发服务所要依赖的MAX框架包：同上，打开Project Structure&hellip;,然后选择Libraries，点击右边的+号，选择Java，如下图所示。</p>
<p><img alt="" src="///E://work/frontwork/ngx-os/images/set_project_2_1.png" /></p>
<p>在弹出的对话框中选择下载并解压后的MAX中的lib目录，并点击OK。</p>
<p><img alt="" src="///E://work/frontwork/ngx-os/images/set_project_2_2.png" /></p>
<p>回到上一个窗口后再次点击OK确认。</p>
<p><img alt="" src="///E://work/frontwork/ngx-os/images/set_project_2_3.png" /></p>
<p>这个过程中，我们可以对添加的lib库重命名（可选），例如这里重命名为MAX-libs。点击OK完成添加。</p>
<p><img alt="" src="///E://work/frontwork/ngx-os/images/set_project_2_4.png" /></p>
<p>至此，UDS开发所依赖的MAX开发框架库添加成功。</p>
<p>4、 修改pom.xml文件</p>
<p>下面是一个示例服务的完整pom.xml文件：</p>
<p><pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot;
         xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;
         xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;
    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;

    &lt;groupId&gt;com.MAX.demo&lt;/groupId&gt;
    &lt;artifactId&gt;DemoService&lt;/artifactId&gt;
    &lt;version&gt;1.2.0&lt;/version&gt;

    &lt;properties&gt;
        &lt;MAX.lib.dir&gt;./package/lib&lt;/MAX.lib.dir&gt;
    &lt;/properties&gt;

    &lt;build&gt;
        &lt;plugins&gt;
            &lt;plugin&gt;
                &lt;!--this plugin and dependency jars are used for testing--&gt;
                &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;
                &lt;artifactId&gt;maven-surefire-plugin&lt;/artifactId&gt;
                &lt;version&gt;2.18.1&lt;/version&gt;
                &lt;dependencies&gt;
                    &lt;dependency&gt;
                        &lt;groupId&gt;org.apache.maven.surefire&lt;/groupId&gt;
                        &lt;artifactId&gt;surefire-junit47&lt;/artifactId&gt;
                        &lt;version&gt;2.18.1&lt;/version&gt;
                    &lt;/dependency&gt;
                &lt;/dependencies&gt;
                &lt;configuration&gt;
                    &lt;additionalClasspathElements&gt;
                        &lt;additionalClasspathElement&gt;${MAX.lib.dir}/MAX-framework-1.5.6.jar&lt;/additionalClasspathElement&gt;
                        &lt;additionalClasspathElement&gt;${MAX.lib.dir}/ac-java-api-1.6.3.jar&lt;/additionalClasspathElement&gt;
                        &lt;additionalClasspathElement&gt;${MAX.lib.dir}/slf4j-log4j12-1.7.7.jar&lt;/additionalClasspathElement&gt;
                        &lt;additionalClasspathElement&gt;${MAX.lib.dir}/slf4j-api-1.7.7.jar&lt;/additionalClasspathElement&gt;
                        &lt;additionalClasspathElement&gt;${MAX.lib.dir}/log4j-1.2.17.jar&lt;/additionalClasspathElement&gt;
                        &lt;additionalClasspathElement&gt;${MAX.lib.dir}/junit-4.11.jar&lt;/additionalClasspathElement&gt;
                        &lt;additionalClasspathElement&gt;${MAX.lib.dir}/hamcrest-core-1.3.jar&lt;/additionalClasspathElement&gt;
                        &lt;additionalClasspathElement&gt;${MAX.lib.dir}/commons-configuration-1.10.jar&lt;/additionalClasspathElement&gt;
                        &lt;additionalClasspathElement&gt;${MAX.lib.dir}/commons-collections-3.2.1.jar&lt;/additionalClasspathElement&gt;
                        &lt;additionalClasspathElement&gt;${MAX.lib.dir}/commons-lang-2.6.jar&lt;/additionalClasspathElement&gt;
                        &lt;additionalClasspathElement&gt;${MAX.lib.dir}/commons-logging-1.1.1.jar&lt;/additionalClasspathElement&gt;
                        &lt;additionalClasspathElement&gt;${MAX.lib.dir}/jetty-all-9.1.5.v20140505.jar&lt;/additionalClasspathElement&gt;
                        &lt;additionalClasspathElement&gt;${MAX.lib.dir}/jackson-core-2.3.2.jar&lt;/additionalClasspathElement&gt;
                        &lt;additionalClasspathElement&gt;${MAX.lib.dir}/jackson-annotations-2.3.2.jar&lt;/additionalClasspathElement&gt;
                        &lt;additionalClasspathElement&gt;${MAX.lib.dir}/jackson-databind-2.3.2.jar&lt;/additionalClasspathElement&gt;
                        &lt;additionalClasspathElement&gt;${MAX.lib.dir}/javax.servlet-api-3.1.0.jar&lt;/additionalClasspathElement&gt;
                        &lt;additionalClasspathElement&gt;${MAX.lib.dir}/javax.websocket-api-1.0.jar&lt;/additionalClasspathElement&gt;
                        &lt;additionalClasspathElement&gt;${MAX.lib.dir}/gson-2.3.1.jar&lt;/additionalClasspathElement&gt;
                        &lt;additionalClasspathElement&gt;${MAX.lib.dir}/okhttp-2.7.1.jar&lt;/additionalClasspathElement&gt;
                        &lt;additionalClasspathElement&gt;${MAX.lib.dir}/okio-1.6.0.jar&lt;/additionalClasspathElement&gt;
                        &lt;additionalClasspathElement&gt;${MAX.lib.dir}/qiniu-java-sdk-7.0.10.jar&lt;/additionalClasspathElement&gt;
                    &lt;/additionalClasspathElements&gt;
                &lt;/configuration&gt;
            &lt;/plugin&gt;
            &lt;plugin&gt;
                &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;
                &lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt;
                &lt;configuration&gt;
                    &lt;source&gt;1.7&lt;/source&gt;
                    &lt;target&gt;1.7&lt;/target&gt;
                    &lt;encoding&gt;UTF-8&lt;/encoding&gt;
                    &lt;compilerArguments&gt;
                        &lt;extdirs&gt;${MAX.lib.dir}&lt;/extdirs&gt;
                    &lt;/compilerArguments&gt;
                &lt;/configuration&gt;
            &lt;/plugin&gt;

            &lt;plugin&gt;
                &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;
                &lt;artifactId&gt;maven-jar-plugin&lt;/artifactId&gt;
                &lt;executions&gt;
                    &lt;execution&gt;
                        &lt;phase&gt;package&lt;/phase&gt;
                        &lt;goals&gt;
                            &lt;goal&gt;jar&lt;/goal&gt;
                        &lt;/goals&gt;
                    &lt;/execution&gt;
                &lt;/executions&gt;
                &lt;configuration&gt;
                    &lt;outputDirectory&gt;${MAX.lib.dir}&lt;/outputDirectory&gt;
                &lt;/configuration&gt;
            &lt;/plugin&gt;
        &lt;/plugins&gt;
    &lt;/build&gt;
&lt;/project&gt;
</code></pre><br />
完整拷贝该示例pom.xml文件内容，其中绝大部分内容都无须修改，开发者仅需修改如下几个配置项即可：<br />
<pre><code>&lt;project&gt;
    &lt;groupId&gt;your service group id&lt;/groupId&gt;
    &lt;artifactId&gt;your service artifact id&lt;/artifactId&gt;
    &lt;version&gt;your service version&lt;/version&gt;
&lt;/project&gt;
</code></pre><br />
5、 修改配置文件</p>
<p>配置文件位于MAX发行库的config文件夹下，名字为<code>cloudservice-conf.xml</code>。</p>
<pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;configuration&gt;
    &lt;developer&gt;
        &lt;!-- 对应“个人信息-&gt;个人信息-&gt;开发者ID” --&gt;
        &lt;id&gt;4&lt;/id&gt;
    &lt;/developer&gt;

    &lt;authentication&gt;
        &lt;!-- 对应“密钥对管理-&gt;全部密钥对”，选择已启用的任意一对即可。 --&gt;
        &lt;access-key&gt;33df24a54054067e80af49d939b429c2&lt;/access-key&gt;
        &lt;secret-key&gt;5e2fec3440e23c5e807910b13b672015&lt;/secret-key&gt;
        &lt;timeout&gt;5000&lt;/timeout&gt;
    &lt;/authentication&gt;

    &lt;framework&gt;
        &lt;!-- 此处为开发环境配置,默认为测试环境,仅本地测试时生效--&gt;
        &lt;router&gt;test.MAX.cn:5000&lt;/router&gt;
    &lt;/framework&gt;

    &lt;service&gt;
        &lt;!-- 此处为继承ACService的类的相对路径,即UDS的唯一入口 --&gt;
        &lt;class&gt;com.MAX.demo.DemoService&lt;/class&gt;
        &lt;!-- 此处为本机启动的端口号 --&gt;
        &lt;port&gt;1234&lt;/port&gt;
        &lt;!-- 对应“产品管理-&gt;产品列表-&gt;主域名” --&gt;
        &lt;major-domain&gt;ac&lt;/major-domain&gt;
        &lt;!-- 对应“产品管理-&gt;产品列表-&gt;子域” --&gt;
        &lt;sub-domain&gt;test&lt;/sub-domain&gt;
    &lt;/service&gt;

    &lt;!-- Options--&gt;
    &lt;client&gt;
        &lt;!-- UDS所有访问云端接口的超时时间 --&gt;
        &lt;timeout&gt;5000&lt;/timeout&gt;
        &lt;!-- UDS所有访问云端接口的重试次数 --&gt;
        &lt;retry-count&gt;1&lt;/retry-count&gt;
    &lt;/client&gt;
&lt;/configuration&gt;
</code></pre>

<blockquote>
<p>注:开发者ID，access-key，secret-key等信息，均能登录MAX网站（开发者管理控制台）获取。</p>
</blockquote>
<p>至此，即完成了新建一个工程所需的所有准备工作以及环境配置，接下来可以开始UDS的业务逻辑开发。</p>
<p>6、 新建Class并继承ACService</p>
<p>参照DemoService或者API文档里关于ACSevice的介绍。</p>
<p>7、 编译单测</p>
<p>在IDE的终端（terminal）或系统终端中运行命令mvn package即可完整的执行编译、单元测试（如果写了单测代码的话），这种方式要求已安装maven环境并配置系统环境变量。另外也可以通过安装MAVEN HELPER的Intellij插件进行编译。</p>
<p>8、 本地运行</p>
<p>如果编译、单测都没有问题，则将编译出来的服务jar包（在服务工程主目录下的target/lib目录下）拷贝到MAX框架的lib目录下。之后，在MAX的框架主目录执行MAX提供的脚本sh start.sh或start.cmd，即可在您的开发机上启动您编写好的服务程序。</p>
<blockquote>
<p>注：服务启动所需的参数，如域名、版本、端口等信息均在xml的配置文件中设置。</p>
</blockquote>
<p>9、 提交到平台</p>
<p>将MAX的config目录、lib目录（含编译好的UDS服务jar包），以及start.sh文件等压缩、打包为一个zip文件，通过MAX的Web管理控制台提交。</p>
<h4 id='4.2.3'>开发指南</h4>

<h5 id='4.2.3.1'>服务开发框架</h5>

<p>开发者在使用MAX框架开发服务时，仅需简单的使用前文介绍的基础数据结构，将精力集中在实现应用的业务逻辑上，快速完成服务程序的开发/测试/发布。</p>
<p>1 ACService：UDS</p>
<p>MAX定义了抽象基类ACService，开发者只需要继承该类，并实现各个handler即可。定义如下:</p>
<pre><code>public abstract class ACService {
    // 开发者可以调用ac的相关接口直接调用MAX提供的云服务。
    protected AC ac;

    // 以下信息可用于服务内部追踪问题等用，比如打印到日志中
    protected long developerId;         // 开发者id
    protected String majorDomain;       // 服务的主域名
    protected String subDomain;         // 服务的子域名
    protected int majorVersion;         // 服务的主版本号
    protected int minorVersion;         // 服务的副版本号
    protected int patchVersion;         // 服务的修订版本号

    /**
     * 开发者可根据自身需要，重载该方法，在该方法里做一些初始化工作，框架在启动服务时会调用该函数。
     *
     * @throws Exception
     */
    public void init() throws Exception {}

    /**
     * 处理APP--&gt;Service，Service--&gt;Service之间的交互消息
     * @param req   请求消息体
     * @param resp  响应消息体
     * @throws Exception
     */
    public abstract void handleMsg(ACMsg req, ACMsg resp) throws Exception;

    /**
     * 处理匿名请求
     *
     * @param req  请求消息体
     * @param resp 响应消息体
     * @throws Exception
     */
    public void handleAnonymousMsg(ACMsg req, ACMsg resp) throws Exception {}

    /**
     * 处理Device--&gt;Service之间的交互消息
     * 如果服务不处理和设备之间的交互消息，则无须重载该方法。
     * &lt;p/&gt;
     * 该接口处理设备汇报的消息后不做响应处理。
     *
     * @param reportInfo 设备的信息,包括上下文/设备逻辑id/设备物理id/设备ip
     * @param req        请求消息体
     * @throws Exception
     */
    public abstract void handleDeviceMsg(ACDeviceReportInfo reportInfo, ACDeviceMsg req) throws Exception;

    /**
     * 处理Device--&gt;Service之间的交互消息并做响应
     * 与以上方法对比，如果需要给上报的设备回复响应，则重载该方法
     * &lt;p/&gt;
     * 处理设备汇报的消息并做响应。
     *
     * @param reportInfo 设备的信息,包括上下文/设备逻辑id/设备物理id/设备ip
     * @param req        请求消息体
     * @param resp       回复消息体
     * @throws Exception
     */
     public void handleDeviceMsg(ACDeviceReportInfo reportInfo, ACDeviceMsg req, ACDeviceMsg resp) throws Exception {}

     /**
      * 异步处理Device--&gt;Service之间的交互消息(需要在init方法中调用ACThreadPool.init()初始化才能生效)
      *
      * @param reportInfo 设备的信息,包括上下文/设备逻辑id/设备物理id/设备ip
      * @param req        请求消息体
      */
      public void handleAsyncDeviceMsg(ACDeviceReportInfo reportInfo, ACDeviceMsg req) {}

    /**
     * 处理JINDDONG--&gt;Service之间的交互消息，收到Stream点数组，进行设备控制
     *
     * @param context          设备的上下文，其中uid字段为系统填充
     * @param physicalDeviceId 设备的物理id
     * @param req              请求消息体(Stream数组)
     * @param resp             响应消息体
     * @throws Exception
     */
    public void handleJDSetStatusMsg(ACContext context, String physicalDeviceId, List&lt;ACJDMsg&gt; req, ACMsg resp) throws Exception {}

    /**
     * 处理JINDDONG--&gt;Service之间的交互消息,获取设备上所有Stream点
     *
     * @param context          设备的上下文，其中uid字段为系统填充
     * @param physicalDeviceId 设备的物理id
     * @param resp             响应消息体(Stream数组)
     * @throws Exception
     */
    public void handleJDGetStatusMsg(ACContext context, String physicalDeviceId, List&lt;ACJDMsg&gt; resp) throws Exception {}

    /**
     * 处理SUNING--&gt;Service之间的交互消息，收到Stream点数组，进行设备控制
     *
     * @param physicalDeviceId 设备的物理id
     * @param req              请求消息体(Stream数组)
     * @param resp             响应消息体
     * @throws Exception
     */
    public void handleSNSetStatusMsg(ACContext context, String physicalDeviceId, List&lt;ACSNMsg&gt; req, ACMsg resp) throws Exception {
    }

    /**
     * 处理SUNING--&gt;Service之间的交互消息,获取设备上所有Stream点
     *
     * @param physicalDeviceId 设备的物理id
     * @param resp             响应消息体(Stream数组)
     * @throws Exception
     */
    public void handleSNGetStatusMsg(ACContext context, String physicalDeviceId, List&lt;ACSNMsg&gt; resp) throws Exception {
    }

    /**
     * 处理设备强制解绑的消息（不需要调解绑接口，此时不能与设备进行交互）
     * 如果除了解绑设备之外没有任何其他的处理逻辑，则无需继承此方法
     *
     * @param context          设备的上下文，其中uid字段为系统填充
     * @param physicalDeviceId 设备的物理id
     */
    public void handleDeviceForceUnbind(ACContext context, String physicalDeviceId, ACMsg resp) throws Exception {
    }

    /**
     * 处理设备上下线通知
     *
     * @param event 设备上下线的信息
     */
    public void handleDeviceEvent(ACDeviceEvent event) throws Exception {}

    /**
     * 内部调用接口，开发者不用关注且不能修改。
     * 设置服务相关的信息，并将全局AC框架传给服务
     * 服务内部可以使用AC框架提供的各种功能，如
     * 帐号管理、设备管理、存储服务等。
     * @param ac
     * @param config
     */
    public final void setEnv(AC ac, ACConfiguration config) {}

    /**
     * 内部调用接口，开发者不用关注且不能修改。
     * @return
     */
    public final AC getAc() {}
}
</code></pre>

<p>ACDeviceReportInfo为设备上报的属性信息，包含如下：</p>
<p><pre><code>public class ACDeviceReportInfo {
    //设备上下文
    private ACContext context;
    //设备逻辑id
    private Long deviceId;
    //设备物理id
    private String physicalDeviceId;
    //设备的ip地址
    private String ip;
}
public class ACDeviceEvent {
     //设备上下文,可以获取设备的主子域信息
     private ACContext context;
     //设备物理ID
     private String physicalDeviceId;
     //设备状态 0设备下线 1设备上线
     private int status;
     //设备状态发生变化的时间戳，自1970年UTC时间之后的相对毫秒数
     private long timestamp;
}
</code></pre><br />
在上述抽象类中，对开发者来说，总共有七个公共接口，其中init提供了默认实现。如果开发者实现的某一服务不需要和设备直接交互，则直接重载handleDeviceMsg为空实现即可。开发者可以将精力集中在handleMsg接口的实现中，该接口处理客户端请求，并作出响应。下文会对该抽象类进行详细介绍。</p>
<blockquote>
<p>注：通常情况下，开发者只需要重点实现handleMsg即可。当然如果需要处理复杂的设备上报数据，则还需要重点实现handleDeviceMsg并根据不同code做不同处理 。</p>
</blockquote>
<p>2 ACCronJob：后台任务</p>
<p>2.1 ACCronJob</p>
<p>MAX定义了云端定时任务的抽象基类ACCronJob。开发者需要继承该类，并实现其定义的抽象方法ACCronJob::run，即能完成定时任务的开发。ACCronJob的定义如下：</p>
<pre><code>public abstract class ACCronJob {
    // 开发者可以调用ac的相关接口直接调用MAX提供的云服务。
    protected AC ac;

    // 以下信息可用于任务内部追踪问题等用，比如打印到日志中等。
    protected long developerId;         // 开发者id
    protected String majorDomain;       // 服务的主域名
    protected String subDomain;         // 服务的子域名
    protected int majorVersion;         // 服务的主版本号
    protected int minorVersion;         // 服务的副版本号
    protected int patchVersion;         // 服务的修订版本号

    /**
     * 内部调用接口，开发者不用关注且不能修改。
     * 设置服务相关的信息，并将全局AC框架传给服务。服务内部可以使用AC框架提供的各种功能，如帐号管理、设备管理、存储服务等。
     * @param ac
     * @param config
     */
    public final void setEnv(AC ac, ACConfiguration config) {
        this.ac = ac;
        this.developerId = config.getDeveloperId();
        this.majorDomain = config.getServiceMajorDomain();
        this.subDomain = config.getServiceSubDomain();
        this.majorVersion = config.getServiceMajorVersion();
        this.minorVersion = config.getServiceMinorVersion();
        this.patchVersion = config.getServicePatchVersion();
    }

    /**
     * 用于获取AC框架。
     * @return AC对象。
     */
    public final AC getAc() {
        return ac;
    }

    /**
     * 定时任务的执行函数。
     * @return 返回任务的结束后，进程退出时所使用的状态码。
     * @throws Exception
     */
    public abstract int run() throws Exception;
}
</code></pre>

<p>上述抽象类共定义了三个公共方法：ACCronJob::setEnv，ACCronJob::getAC，以及ACCronJob::run。其中，ACCronJob::run是定时任务的执行函数，要求开发者提供具体实现。</p>
<p>2.2 Crontab</p>
<p>Crontab定时规则由五部分组成，由左至右分别表示分、时、日、月、周。每个部分之间以空格字符分隔。如“30 12 * <em> </em>”表示“每天的12:30”。其中，第一个部分的“30”表示30分，第二个部分的“12”表示12点，后面三个部分的“*”分别表示每天、每月及一星期内的每一天。 规则中各部分的取值范围如下（参考http://linux.vbird.org/linux_basic/0430cron.php）：</p>
<table>
<thead>
<tr>
<th>代表意义</th>
<th>分钟</th>
<th>小时</th>
<th>日期</th>
<th>月份</th>
<th>周</th>
<th></th>
</tr>
</thead>
<tbody>
<tr>
<td>数字范围</td>
<td>0-59</td>
<td>0-23</td>
<td>1-31</td>
<td>1-12</td>
<td>0-7</td>
<td></td>
</tr>
<tr>
<td>其中，“周”的取值为0或7时都表示“星期天”。除此之外，还有如下辅助字符可用于定义时间规则。</td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<table>
<thead>
<tr>
<th>辅助字符</th>
<th>代表意义</th>
</tr>
</thead>
<tbody>
<tr>
<td>*（星号）</td>
<td>代表任何时刻。例如“30 12 * <em> </em>”中日、月、周都是*， 表示“不论何月、何日、星期几的 12:30”。</td>
</tr>
<tr>
<td>,（英文逗号）</td>
<td>用于指定确定的多个值。如果要定义“每天的3:10及6:10”可使用如下规则：“10 3,6 * <em> </em>”。</td>
</tr>
<tr>
<td>-（连字符）</td>
<td>用于指定时间范围。如果定义“每天的8点至12点之间每小时的20分钟”可使用如下规则：“20 8-12 * <em> </em>”。</td>
</tr>
<tr>
<td>/n（斜杠后跟数字）</td>
<td>表示每个n个单位。例如定义“每5分钟”时可使用如下规则：“<em>/5 * </em> * *”。</td>
</tr>
</tbody>
</table>
<h5 id='4.2.3.2'>UDS Demo</h5>

<p>这里我们以一个完整的demo程序做示例，通过真实代码介绍如何基于ACService开发用户自己的服务程序。demo场景不一定完全符合常识，其目的是为了尽量简单而全面的演示服务框架提供的功能。</p>
<p>1 场景介绍</p>
<p>本示例场景有一智能灯，可以通过手机端向云端发消息远程控制灯的开/关，云端服务把这些APP发来的控制行为记录到MAX提供的云存储中。同时，智能灯也可能由用户通过机械开关起停，智能灯将这类开/关事件也主动汇报到服务端，我们写的服务程序将这类主动汇报的开/关数据也存到云存储中。所有存储在云存储中的数据，可提供给APP查询，比如可用于统计用户的作息习惯等。</p>
<p>2 实现步骤</p>
<p>先简单分析下需求，然后梳理出实现步骤。</p>
<blockquote>
<p>1.要开发服务程序，需从ACService派生子类来实现自己的服务框架。本示例中，DemoService就是继承自ACService的子类；</p>
<p>2.服务要接收来自APP对灯的远程控制命令，也会接收来自APP的数据查询请求，因此必须为handleMsg提供具体的实现handler；</p>
<p>3.服务要向智能灯发送控制命令，因此我们需要和灯以及APP端定义具体的控制消息格式LightMsg；</p>
<p>4.服务要接收智能灯汇报的开/关消息，因此必须为handleDeviceMsg提供具体的实现handler。</p>
</blockquote>
<p>3 具体实现</p>
<p>3.1 新建设备属性</p>
<p>为了能够查询开关历史纪录，需要持久化存储设备上报的开关记录数据。</p>
<p>通过开发者管理控制台的【产品管理=&gt;智能灯Demo=&gt;属性管理】完成设备上报属性参数的定义。<br />
定义好的属性如下图所示：</p>
<p><img alt="" src="///E://work/frontwork/ngx-os/images/%E5%B1%9E%E6%80%A7%E7%A4%BA%E5%9B%BE.png" /></p>
<p>3.2 DemoService</p>
<p><code>DemoService</code>为自定义服务的主要逻辑处理类，通过<code>handleMsg</code>处理APP端发来的消息，通过<code>handleDeviceMsg</code>处理设备上报上来的消息。<br />
本Demo的逻辑比较简单，在<code>DemoService</code>中实现了两个具体的处理函数<code>handleControlLight</code>（用于响应开关灯的指令）和<code>handleQueryData</code>（用于响应查询开关灯历史记录的指令）。<br />
在<code>DemoService</code>中只实现了一个具体的处理函数<code>handleLightReport</code>（用于处理智能灯上报的消息）。开发者可以根据业务需求任意扩展handler。</p>
<pre><code>public class DemoService extends ACService {
    private static final Logger logger = LoggerFactory.getLogger(DemoService.class);

    /**
     * 重载init函数。
     *
     * @throws Exception
     */
    public void init() throws Exception {
    }

    /**
     * 处理来自APP或其它service发来消息的入口函数
     *
     * @param req  请求消息
     * @param resp 响应消息
     * @throws Exception
     */
    public void handleMsg(ACMsg req, ACMsg resp) throws Exception {
        String name = req.getName();
        switch (name) {
            case &quot;controlLight&quot;:
                handleControlLight(req, resp);
                break;
            case &quot;fetchHistoryPropertyData&quot;:
                fetchHistoryPropertyData(req, resp);
                break;
            case &quot;test&quot;:
                logger.info(req.toString());
                resp.put(&quot;result&quot;, &quot;userId[&quot; + req.getContext().getUserId() + &quot;] is testing, return ack&quot;);
                resp.setAck();
                break;
            default:
                logger.warn(&quot;got an invalid request, method[&quot; + name + &quot;] is not implemented.&quot;);
                resp.setErr(Errors.ERR_MSG_NOT_SUPPORTED.code, Errors.ERR_MSG_NOT_SUPPORTED.error);
                break;
        }
    }

    /**
     * 处理来自设备上报消息的入口函数
     *
     * @param reportInfo 设备的属性
     * @param req        设备上报消息
     * @throws Exception
     */
    public void handleDeviceMsg(ACDeviceReportInfo reportInfo, ACDeviceMsg req) throws Exception {
        int msgCode = req.getCode();
        switch (msgCode) {
            case LightMsg.REPORT_CODE:
                handleLightReport(reportInfo, req.getContent());
                break;
            default:
                logger.warn(&quot;got an unknown report, opcode[&quot; + msgCode + &quot;]&quot;);
        }
    }

    /**
     * 处理匿名请求。某些特殊请求，如用户注册，没有有效用户的信息，可以考虑使用匿名请求的方式执行。
     *
     * @param req  请求消息体
     * @param resp 响应消息体
     * @throws Exception
     */
    public void handleAnonymousMsg(ACMsg req, ACMsg resp) throws Exception {
        String name = req.getName();
        switch (name) {
            case &quot;register&quot;:    // 用户注册。
                handleRegister(req, resp);
                break;
            default:
                logger.warn(&quot;got an invalid request, method[&quot; + name + &quot;] is not implemented.&quot;);
                resp.setErr(Errors.ERR_MSG_NOT_SUPPORTED.code, Errors.ERR_MSG_NOT_SUPPORTED.error);
                break;
        }
    }

    //////////////////////////////////////
    // 具体的私有handler

    /**
     * 处理来自APP端的智能灯控制命令，再将命令发往具体的设备
     * &lt;p/&gt;
     * 实际上，厂商在实现后端服务的时候，通常情况下自定义服务不用处理APP端发来的设备控制请求也
     * 能实现远程控制。因为MAX在云端提供了设备管理服务，APP通过APP端的sendToDevice
     * 接口可以将控制命令远程发往MAX的设备管理服务，设备管理服务再将控制命令发给设备。
     * &lt;p/&gt;
     * 本示例在开发者自定义的这个服务中实现对灯的控制，一方面是为了展示后端服务的灵活性，可以作
     * 各种事情，包括对设备的控制，比如后端服务在多设备联动的时候，可能会主动往设备发控制命令。
     *
     * @param req  请求消息
     * @param resp 响应消息
     * @throws Exception
     */
    private void handleControlLight(ACMsg req, ACMsg resp) throws Exception {
        long userId = req.getContext().getUserId();
        long lightId = req.getLong(&quot;deviceId&quot;);
        String action = req.get(&quot;action&quot;);
        byte deviceAction;
        if (action.equalsIgnoreCase(&quot;on&quot;)) {
            deviceAction = LightMsg.ON;
        } else
            deviceAction = LightMsg.OFF;
        ACDeviceMsg deviceReqMsg = new ACDeviceMsg(LightMsg.CODE, new byte[]{deviceAction, 0, 0, 0});
        ACDeviceMsg deviceRespMsg;
        try {
            // 获取子域
            // (1) 此处通过已过时的方法 ACConfig.getSubDomain 来指定设备所属的子域名。这是旧的子域级别UDS中的使用方法。
            // 新版的云应用引擎不支持从配置项（ACConfig）中获取子域名（返回值为空字符串）。此时应通过其它方法指定子域，如从请求的上下文中获取（如果存在）、从请求参数中获取等。
            // String subDomainName = this.getAc().getACConfig().getSubDomain();
            // (2) 从请求上下文中获取子域
            String subDomainName = req.getContext().getSubDomainName();
            // (3) 从请求参数中获取子域
            // String subDomainName = req.get(&quot;subDomain&quot;);

            // 通过ac框架的sendToDevice接口，向灯发送控制命令
            deviceRespMsg = ac.bindMgr(req.getContext()).sendToDevice(subDomainName, lightId, deviceReqMsg, userId);
            // 获取控制开关结果
            byte[] payload = deviceRespMsg.getContent();
            if (payload.length &gt; 0 &amp;&amp; payload[0] == 1)
                resp.put(&quot;result&quot;, &quot;success&quot;);
            else
                resp.put(&quot;result&quot;, &quot;fail&quot;);
            resp.setAck();
            logger.info(&quot;handle control light ok, action[&quot; + action + &quot;].&quot;);
        } catch (ACServiceException e) {
            resp.setErr(e.getErrorCode(), e.getErrorMsg());
            logger.warn(&quot;send to device[&quot; + lightId + &quot;] error:&quot;, e);
        }
    }

    /**
     * 处理来自APP端的查询智能灯历史属性数据请求
     * @param req  请求消息
     * @param resp 响应消息
     * @throws Exception
     */
    private void fetchHistoryPropertyData(ACMsg req, ACMsg resp) throws Exception {
        long userId = req.getContext().getUserId();
        long lightId = req.getLong(&quot;deviceId&quot;);
        long startTime = req.getLong(&quot;startTime&quot;);  // 查询开始时间戳
        long endTime = req.getLong(&quot;endTime&quot;);      // 查询结束时间戳
        String subDomainName = req.getContext().getSubDomainName();  // 被查询的设备所属的子域的名字。
        //查找所有开灯记录
        List&lt;ACObject&gt; historyData = ac.dstore(subDomainName)
                .scanHistory(lightId)
                .where(ac.filter().whereEqualTo(LightMsg.KEY_SWITCH, 1))
                .startTime(true, startTime) //true为代表闭区间包含的意思即: &gt;= startTime
                .endTime(true, endTime)
                .execute();
        resp.put(&quot;data&quot;, historyData);
        resp.put(&quot;result&quot;, &quot;success&quot;);
        resp.setAck();
    }

    /**
     * 处理智能灯汇报的消息，在该函数中，服务还将收到的汇报数据写入MAX提供的云端存储中。
     *
     * @param reportInfo 汇报数据的设备的信息。
     * @param payload  汇报的具体消息内容。
     * @throws Exception
     */
    private void handleLightReport(ACDeviceReportInfo reportInfo, byte[] payload) throws Exception {
        try {
            LightMsg lightMsg = new LightMsg(payload);
            // 通过ac框架，将智能灯汇报的数据存入云端存储
            ac.dstore(reportInfo.getContext().getSubDomainName())
                    .create(reportInfo.getDeviceId(), System.currentTimeMillis())
                    .put(LightMsg.KEY_SWITCH, lightMsg.getLedOnOff())
                    .put(LightMsg.KEY_SOURCE, lightMsg.getSource())
                    .execute(true); //true:为存储属性并发布推送 false:只存储属性数据
        } catch (ACServiceException e) {
            logger.warn(&quot;handle light report error:&quot;, e);
        }
    }

    /**
     * 处理APP端发来的用户注册请求。用户注册的请求使用匿名访问的方式。
     *
     * @param req  请求消息
     * @param resp 响应消息
     * @throws Exception
     */
    private void handleRegister(ACMsg req, ACMsg resp) throws Exception {
        // 实现用户注册的逻辑，并设置响应的结果。
        resp.setAck();    // 注册成功返回OK。
        // 注册失败是返回错误消息。
        // resp.setErr(errCode, errMessage);
    }
}
</code></pre>

<p>3.3 LightMsg</p>
<p>LightMsg是控制灯开/关的消息（命令），需要设备/APP/服务三方共同确定。如果服务需要和其它类型的智能设备交互，则再定义其它的message即可。</p>
<pre><code>public class LightMsg {
    public static final int CODE = 68;
    public static final int RESP_CODE = 102;
    public static final int REPORT_CODE = 203;

    public static final String KEY_SWITCH = &quot;switch&quot;;
    public static final String KEY_SOURCE = &quot;source&quot;;

    //0代表关，1代表开
    public static final byte ON = 1;
    public static final byte OFF = 0;
    //控制类型，0代表app控制，1代表物理开关控制
    public static final byte FROM_APP = 0;
    public static final byte FROM_SWITCH = 1;

    //开关状态
    private byte ledOnOff;
    //操作来源
    private byte source;

    public LightMsg(byte[] payload) {
        this.ledOnOff = payload[0];
        this.source = payload[1];
    }

    public byte getLedOnOff() {
        return ledOnOff;
    }

    public byte getSource() {
        return source;
    }
}
</code></pre>

<p>前文的代码实现了本示例的全部功能。在终端运行<code>mvn package</code>即可编译成jar包。你可以开发更多好玩的逻辑，比如多设备联动：当某些设备上报的数据达到设置的规则时，触发另外的设备做出响应。 对该服务的测试见后文的相关章节。</p>
<h5 id='4.2.3.3'>数据存储</h5>

<p>1 基础概念</p>
<p>1.1 术语</p>
<table>
<thead>
<tr>
<th>名字</th>
<th>中文描述</th>
<th>语义</th>
</tr>
</thead>
<tbody>
<tr>
<td>schem</td>
<td>a class的元数据，在前端定义</td>
<td></td>
</tr>
<tr>
<td>class</td>
<td>数据集</td>
<td>相当于数据库中的table</td>
</tr>
<tr>
<td>group</td>
<td>数据空间</td>
<td>相当于数据库中的database，不指定使用默认值</td>
</tr>
<tr>
<td>partition</td>
<td>分区</td>
<td>数据集水平拆分，当前只支持散列分区</td>
</tr>
<tr>
<td>row</td>
<td>数据行</td>
<td>相当于数据库上的一行记录</td>
</tr>
<tr>
<td>column</td>
<td>数据列列名</td>
<td>相当于数据库中的列名</td>
</tr>
<tr>
<td>key</td>
<td>键</td>
<td>相当于数据库表中某一列的名字</td>
</tr>
<tr>
<td>value</td>
<td>值</td>
<td>相当于数据库表中某一列的值</td>
</tr>
<tr>
<td>primaryKeys</td>
<td>主键</td>
<td>数据集中唯一标识一行记录</td>
</tr>
<tr>
<td>partitionKeys</td>
<td>分区键</td>
<td>数据集用于水平拆分的键</td>
</tr>
<tr>
<td>filter</td>
<td>过滤条件</td>
<td>过滤结果集中数据的条件，如:a&gt;=10</td>
</tr>
<tr>
<td>expr</td>
<td>表达式</td>
<td>支持简单运算</td>
</tr>
<tr>
<td>connector</td>
<td>连接符</td>
<td>AND, OR</td>
</tr>
<tr>
<td>operator</td>
<td>操作符</td>
<td>&lt;, &gt;, &lt;=, &gt;=, ==, !=, LIKE, in等</td>
</tr>
<tr>
<td>join</td>
<td>联结</td>
<td>多表查询条件</td>
</tr>
<tr>
<td>select</td>
<td>选择列</td>
<td>结果集中需要返回的列</td>
</tr>
<tr>
<td>ACContext</td>
<td>上下文标识</td>
<td></td>
</tr>
</tbody>
</table>
<p>1.2 支持的数据类型</p>
<table>
<thead>
<tr>
<th>类型</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>整型</td>
<td>byte, short, int, long</td>
</tr>
<tr>
<td>浮点型</td>
<td>float, double</td>
</tr>
<tr>
<td>字符串</td>
<td>String</td>
</tr>
<tr>
<td>布尔型</td>
<td>Boolean</td>
</tr>
</tbody>
</table>
<p>1.3 支持的接口</p>
<table>
<thead>
<tr>
<th>名字</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>Create</td>
<td>创建一行数据（行不存在，则执行创建; 行存在，报错）</td>
</tr>
<tr>
<td>BatchCreate</td>
<td>批量插入数据</td>
</tr>
<tr>
<td>Replace</td>
<td>覆盖一行数据（行存在，则执行覆盖; 行不存在，则执行插入)</td>
</tr>
<tr>
<td>BatchReplace</td>
<td>批量覆盖数据</td>
</tr>
<tr>
<td>Delete</td>
<td>删除一行数据（行存在，则执行删除; 行不存在，不执行）</td>
</tr>
<tr>
<td>Update</td>
<td>更改一行数据（行存在，则执行更改; 行不存在，执行创建）</td>
</tr>
<tr>
<td>Modify</td>
<td>更改一行数据（行存在，则执行更改; 行不存在，不执行）</td>
</tr>
<tr>
<td>Find</td>
<td>查找一行数据（行存在，则返回这行记录; 行不存在，返回NULL）</td>
</tr>
<tr>
<td>Scan</td>
<td>查找多行数据（行存在，则返回多行记录; 行不存在，结果集为空)</td>
</tr>
<tr>
<td>BatchDelete</td>
<td>批量删除数据（行存在，则执行删除; 行不存在，不执行）</td>
</tr>
<tr>
<td>BatchUpdate</td>
<td>批量更新数据（行存在，则执行更新; 行不存在，不执行）</td>
</tr>
<tr>
<td>MultiScan</td>
<td>多表查询（当前只支持处于同一个Group的非分区数据集）</td>
</tr>
<tr>
<td>SimpleFullScan</td>
<td>全表扫描（结果集不保证顺序）</td>
</tr>
</tbody>
</table>
<p>1.4 数据模型</p>
<p>MAX目前提供基于MySQL的分布式存储服务。开发者需要预先设定数据集的结构，同时可以选择对数据进行分区或不分区。为定位数据所在分区，需要定义数据分区键(partitionKeys)，可以为一列或多列。主键（primaryKeys）唯一表示一行数据, 可以为一列或多列。</p>
<p>分区数据集数据模型<br />
<img alt="" src="///E://work/frontwork/ngx-os/images/moxing1.jpg" /></p>
<p>非分区数据集数据模型<br />
<img alt="" src="///E://work/frontwork/ngx-os/images/moxing2.jpg" /></p>
<p>1.5 分区与非分区</p>
<p>什么是分区</p>
<p>分区指的是对数据集进行水平拆分，将同一个数据集中的数据分发到不同的分区，从而可以增大数据存储容量，实现负载均衡。</p>
<p>如何分区</p>
<p>当前是根据用户指定的分区键，内部使用散列分区算法来实现。分区键必须是主键的前缀，同一个分区键的数据会分布到同一个分区。</p>
<p>如何选择</p>
<p>如果是数据随着时间不断增加，建议使用分区数据集，如设备的上报数据，可以将设备ID设置为分区键，(设备ID, 时间戳)做为主键。</p>
<p>如果是数据随着时间变化不大，如设备表，用户表，则建议使用非分区数据集</p>
<p>分区的限制</p>
<p>分区一旦设定，不能更改，对于分区数据集，查询或是执行其它批量操作时，必须明确指定分区键。不能跨分区操作数据</p>
<p>2 基础数据结构</p>
<p>2.1 ACContext</p>
<p>ACContext 包含了用户的MajorDomain, SubDomain, DeveloperId, TraceId, 时间戳, 签名等信息，每个请求都必须带有ACContext才能与云端交互。单个ACContext可以认为是逻辑上一系列请求的唯一标识。</p>
<p>获取方式</p>
<pre><code>ACContext ctx = ac.newContext();
</code></pre>

<p>2.2 ACFilter</p>
<p>ACFilter用于过滤结果集中的数据，当前支持：</p>
<table>
<thead>
<tr>
<th>名字</th>
<th>数学表示</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>EQUAL</td>
<td>==</td>
<td>等于</td>
</tr>
<tr>
<td>NOT_EQUAL</td>
<td>!=</td>
<td>不等于</td>
</tr>
<tr>
<td>GREATER</td>
<td>&gt;</td>
<td>大于</td>
</tr>
<tr>
<td>GREATE_OR_EQUAL</td>
<td>&gt;=</td>
<td>大于等于</td>
</tr>
<tr>
<td>LESS</td>
<td>&lt;</td>
<td>小于</td>
</tr>
<tr>
<td>LESS_OR_EQUAL</td>
<td>&lt;=</td>
<td>小于等于</td>
</tr>
<tr>
<td>LIKE</td>
<td>like</td>
<td>字符串模糊匹配</td>
</tr>
<tr>
<td>NOT_LIKE</td>
<td>not like</td>
<td>字符串模糊匹配</td>
</tr>
<tr>
<td>BINARY_LIKE</td>
<td>binary like</td>
<td>区分大小写的字符串模糊匹配</td>
</tr>
<tr>
<td>BINARY_NOT_LIKE</td>
<td>binary not like</td>
<td>区分大小写的字符串模糊匹配</td>
</tr>
<tr>
<td>IN</td>
<td>in</td>
<td>基于列表进行查找</td>
</tr>
<tr>
<td>NOT_IN</td>
<td>not in</td>
<td>基于列表进行查找</td>
</tr>
<tr>
<td>AND</td>
<td>and</td>
<td>与(与的优化级高于或)</td>
</tr>
<tr>
<td>OR</td>
<td>or</td>
<td>或</td>
</tr>
</tbody>
</table>
<p>使用实例</p>
<pre><code>// 实例1: 创建一个filter(key1&gt;0 and key1&lt;10)
ACFilter f1 = ac.filter().whereGreaterThan(&quot;key1&quot;, 0).andLessThan(&quot;key1&quot;, 10);

// 实例2: 创建一个filter(key1&lt;=0 or key1&gt;=10)
ACFilter f1 = ac.filter().whereLessThanOrEqualTo(&quot;key1&quot;, 0).orGreaterThanOrEqualTo(&quot;key1&quot;, 10);

// 实例3: 创建一个filter(key1以 &quot;abcd&quot; 为前缀, 不区分大小写)
ACFilter f1 = ac.filter().whereLike(&quot;key1&quot;, &quot;abcd%&quot;);

// 实例4: 创建一个filter(key1以 &quot;abcd&quot; 为前缀, 不区分大小写)
ACFilter f1 = ac.filter().whereLike(&quot;key1&quot;, &quot;abcd%&quot;);

// 实例5: 创建一个filter(key1以 &quot;abcd&quot; 为后缀, 不区分大小写)
ACFilter f1 = ac.filter().whereLike(&quot;key1&quot;, &quot;%abcd&quot;);

// 实例6: 创建一个filter(key1包含子串 &quot;abcd&quot;, 不区分大小写)
ACFilter f1 = ac.filter().whereLike(&quot;key1&quot;, &quot;%abcd%&quot;);

// 实例7: 创建一个filter(key1 为 &quot;v1&quot; 或 &quot;v2&quot; 或 &quot;v3&quot;中的一个)
ACFilter f1 = ac.filter().whereIn(&quot;key1&quot;, String[]{&quot;v1&quot;, &quot;v2&quot;, &quot;v3&quot;});

// 实例8: 创建一个filter(数据集t1的c1列与数据集t2的c2列相等)
ACFilter f1 = ac.filter().whereEqualToColumn(&quot;t1.c1&quot;, &quot;t2.c2&quot;);
</code></pre>

<p>2.3 ACJoin</p>
<p>ACJoin在多表查询时用于表示联表条件，当前仅支持内联结</p>
<p>使用实例</p>
<pre><code>// t1为基准表，t2是需要联结的表

// 实例1: 联表条件(数据集t1的c1列 与 数据集t2的c2列相等)
ACFilter f1 = ac.filter().whereEqualToColumn(&quot;t1.c1&quot;, &quot;t2.c2&quot;);
ACJoin j1 = ac.innerJoin(&quot;t2&quot;).where(f1);

// 实例2: 联表条件(数据集t1的c1列 与 数据集t2的c2列相等，并且 数据集t1的c1列的值大于100)
ACFilter f1 = ac.filter().whereEqualToColumn(&quot;t1.c1&quot;, &quot;t2.c2&quot;).andGreaterThan(&quot;t1.c1&quot;, 100);
ACJoin j1 = ac.innerJoin(&quot;t2&quot;).where(f1);
</code></pre>

<p>3 使用实例</p>
<p>以空气净化器为例来说明。每个实例会针对分区数据集和非分区数据集分别说明接口使用方法。</p>
<table>
<thead>
<tr>
<th>列名</th>
<th>类型</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>device_id</td>
<td>字符串</td>
<td>设备ID</td>
</tr>
<tr>
<td>timestamp</td>
<td>整数</td>
<td>时间戳</td>
</tr>
<tr>
<td>pm25</td>
<td>浮点数</td>
<td>pm2.5值</td>
</tr>
<tr>
<td>speed</td>
<td>整数</td>
<td>当前风机转速</td>
</tr>
<tr>
<td>mode</td>
<td>字符串</td>
<td>当前净化器状态(auto(自动), high(高速), medium(中速), low(低速))</td>
</tr>
</tbody>
</table>
<p>3.1 device_data(分区数据集)<br />
<img alt="" src="///E://work/frontwork/ngx-os/images/fenqu1.jpg" /></p>
<p>3.2 device_data(非分区数据集)<br />
<img alt="" src="///E://work/frontwork/ngx-os/images/fenqu2.jpg" /></p>
<p>4 数据写入</p>
<p>4.1 Create</p>
<p>在数据集中插入一条数据，如果数据不存在，则执行插入; 如果数据已经存在，则会报错。</p>
<blockquote>
<p>分区数据集和非分区数据集使用方式相同</p>
</blockquote>
<p>标准用法</p>
<p><pre><code>ac.store(数据集名字, context).create(键值列表)
        .put(key_1，value_1)
        .put(key_..., value_...)
        .put(key_n, value_n)
        .execute();
</code></pre><br />
注意事项</p>
<ul>
<li>主键列表至少包含所有的主键列，可以包含非主键列</li>
<li>key,value对根据需要选填，如果没有设置，则会填充默认值。整数，浮点数的默认值为0，字符串默认值为空字符串，布尔型的默认值为false</li>
</ul>
<p>错误码</p>
<p>通用错误码</p>
<table>
<thead>
<tr>
<th>Exception</th>
<th>报错位置</th>
<th>errorCode</th>
<th>errorMsg</th>
<th>errorDesc/日志</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>ACServiceException</td>
<td>CLOUD</td>
<td>3002</td>
<td>invalid param</td>
<td>createParam is not set</td>
<td>createParam没有设置</td>
</tr>
<tr>
<td>ACServiceException</td>
<td>CLOUD</td>
<td>3924</td>
<td>data already exist</td>
<td>row[key1=xxx, keys2=xxx] is already exist</td>
<td>数据行已经存在，创建失败</td>
</tr>
</tbody>
</table>
<p>使用实例</p>
<ul>
<li>实例1: 插入一条数据（device_id:&rdquo;001&rdquo;, timestamp:1469098960, pm25:70.5, speed:40, mode:&rdquo;low&rdquo;）<br />
<pre><code>// 其它所有接口都有以下三种使用方式

// 使用方式一
ac.store(&quot;device_data&quot;, ctx).create(&quot;device_id&quot;, &quot;001&quot;, &quot;timestamp&quot;, 1469098960)
        .put(&quot;pm25&quot;, 70.5)
        .put(&quot;speed&quot;, 40)
        .put(&quot;mode&quot;, &quot;low&quot;)
        .execute();

// 使用方式二
ac.store(&quot;device_data&quot;, ctx).create(&quot;device_id&quot;, &quot;001&quot;, &quot;timestamp&quot;, 1469098960, &quot;pm25&quot;, 70.5, &quot;speed&quot;, 40, &quot;mode&quot;, &quot;low&quot;)
        .execute();

// 使用方式三
ACObject keyObj = new ACObject();
keyObj.put(&quot;device_id&quot;, &quot;001&quot;);
keyObj.put(&quot;timestamp&quot;, 1469098960);

ac.store.(&quot;device_data&quot;, ctx).create(keyObj)
        .put(&quot;pm25&quot;, 70.5)
        .put(&quot;speed&quot;, 40)
        .put(&quot;mode&quot;, &quot;low&quot;)
        .execute();
</code></pre><br />
类比SQL<br />
<pre><code>INSERT INTO `device_data` SET `device_id`='001', `timestamp`=1469098960, `pm25`=70.5, `speed`=40, `mode`='low';
</code></pre><br />
4.2 BatchCreate</li>
</ul>
<p>在数据集中指插入多行数据，如果数据不存在，则执行插入; 如果数据已经存在，则会报错。</p>
<blockquote>
<p>分区数据集和非分区数据集使用方式相同</p>
</blockquote>
<p>标准用法<br />
<pre><code>// 用法1
ac.store(数据集名字， context).batchCreate()
        .add(ACObject_1)
        ...
        .add(ACObject_n)
        .execute();

// 用法2
List&lt;ACObject&gt; objs = new ArrayList&lt;&gt;();

ac.store(数据集名字, context).batchCreate()
        .put(objs)
        .execute();
</code></pre><br />
注意事项</p>
<ul>
<li>一次批量最多支持1000条</li>
</ul>
<p>错误码</p>
<p>通用错误码</p>
<table>
<thead>
<tr>
<th>Exception</th>
<th>报错位置</th>
<th>errorCode</th>
<th>errorMsg</th>
<th>errorDesc/日志</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>ACServiceException</td>
<td>CLOUD</td>
<td>3002</td>
<td>invalid param</td>
<td>batchCreateParam is not set</td>
<td>batchCreateParam没有设置</td>
</tr>
</tbody>
</table>
<p>使用实例</p>
<ul>
<li>实例1：批量插入三条数据</li>
</ul>
<p>(device_id:&rdquo;001&rdquo;, timestamp:1469098960, pm25:70.5, speed:40, mode:&rdquo;low&rdquo;) (device_id:&rdquo;001&rdquo;, timestamp:1469098961, pm25:70.6, speed:41, mode:&rdquo;low&rdquo;) (device_id:&rdquo;001&rdquo;, timestamp:1469098962, pm25:70.7, speed:42, mode:&rdquo;low&rdquo;)<br />
<pre><code>ACObject obj1 = new ACObject();
obj1.put(&quot;device_id&quot;, &quot;001&quot;);
obj1.put(&quot;timestamp&quot;, 1469098960);
obj1.put(&quot;pm25&quot;, 70.5);
obj1.put(&quot;speed&quot;, 40);
obj1.put(&quot;mode&quot;, &quot;low&quot;);

ACObject obj2 = new ACObject();
obj2.put(&quot;device_id&quot;, &quot;001&quot;);
obj2.put(&quot;timestamp&quot;, 1469098961);
obj2.put(&quot;pm25&quot;, 70.6);
obj2.put(&quot;speed&quot;, 41);
obj2.put(&quot;mode&quot;, &quot;low&quot;);

ACObject obj3 = new ACObject();
obj3.put(&quot;device_id&quot;, &quot;001&quot;);
obj3.put(&quot;timestamp&quot;, 1469098962);
obj3.put(&quot;pm25&quot;, 70.7);
obj3.put(&quot;speed&quot;, 42);
obj3.put(&quot;mode&quot;, &quot;low&quot;);

// 方法一:
ac.store(&quot;device_data&quot;, ctx).batchCreate()
    .add(obj1, obj2, obj3)
    .execute();

// 方法二:
ac.store(&quot;device_data&quot;, ctx).batchCreate()
    .add(obj1)
    .add(obj2)
    .add(obj3)
    .execute();

//方法三:
List&lt;ACObject&gt; objs = new ArrayList&lt;&gt;();
objs.add(obj1);
objs.add(obj2);
objs.add(obj3);

ac.store(&quot;device_data&quot;, ctx).batchCreate()
    .put(objs)
    .execute();
</code></pre><br />
类比SQL<br />
<pre><code>INSERT INTO `device_data`(`device_id`, `timestamp`, `pm25`, `speed`, `mode`) VALUES ('001', 1469098960, 70.5, 40, 'low'), ('001', 1469098961, 70.6, 41, 'low'), ('001', 1469098962, 70.7, 42, 'low');
</code></pre><br />
4.3 Replace</p>
<p>当此行数据不存在时，则插入这行数据，如果已经存在，则覆盖已有数据</p>
<blockquote>
<p>分区数据集和非分区数据集使用方式相同</p>
</blockquote>
<p>标准用法<br />
<pre><code>ac.store(数据集名字, context).replace(键值列表)
        .put(key_1, value_1)
        .put(key_..., value_...)
        .put(key_n, value_n)
        .execute();
</code></pre><br />
注意事项</p>
<ul>
<li>键值列表至少包含所有的主键列，可以包含其它键值</li>
<li>(key,value)对选填，如果没有设置，则会使用默认值，整数，浮点型的默认值为0，字符串默认值为空字符串，布尔型的默认值为false。</li>
</ul>
<p>错误码</p>
<p>通用错误码</p>
<table>
<thead>
<tr>
<th>Exception</th>
<th>报错位置</th>
<th>errorCode</th>
<th>errorMsg</th>
<th>errorDesc/日志</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>ACServiceException</td>
<td>CLOUD</td>
<td>3002</td>
<td>invalid param</td>
<td>replaceParam is not set</td>
<td>replaceParam没有设置</td>
</tr>
</tbody>
</table>
<p>使用实例</p>
<ul>
<li>实例1：覆盖写入一条数据（device_id=&rdquo;001&rdquo;, timestamp:1469098960, pm25:70.5, speed:40, mode:low)</li>
</ul>
<p><pre><code>// 使用方法一
ac.store(&quot;device_data&quot;, ctx).replace(&quot;device_id&quot;, &quot;001&quot;, &quot;timestamp&quot;, 1469098960)
        .put(&quot;pm25&quot;, 70.5)
        .put(&quot;speed&quot;, 40)
        .put(&quot;mode&quot;, &quot;low&quot;)
        .execute();

// 使用方法二
ac.store(&quot;device_data&quot;, ctx).replace(&quot;device_id&quot;, &quot;001&quot;, &quot;timestamp&quot;, 1469098960, &quot;pm25&quot;, 70.5, &quot;speed&quot;, 40, &quot;mode&quot;, &quot;low&quot;)
        .execute();
</code></pre><br />
类比SQL<br />
<pre><code>REPLACE INTO `device_data` SET `device_id`='001', `timestamp`=1469098960, `pm25`=70.5, `speed`=40, `mode`='low';
</code></pre><br />
4.4 BatchReplace</p>
<p>在数据集中批量覆盖多行数据，如果数据不存在，则执行插入; 如果数据已经存在，则执行覆盖。</p>
<blockquote>
<p>分区数据集和非分区数据集使用方式相同</p>
</blockquote>
<p>标准用法</p>
<p><pre><code>// 用法1
ac.store(数据集名字， context).batchReplace()
        .add(ACObject_1)
        ...
        .add(ACObject_n)
        .execute();

// 用法2
List&lt;ACObject&gt; objs = new ArrayList&lt;&gt;();

ac.store(数据集名字, context).batchReplace()
        .put(objs)
        .execute();
</code></pre><br />
注意事项</p>
<ul>
<li>一次批量最多支持1000条</li>
</ul>
<p>错误码</p>
<p>通用错误码</p>
<table>
<thead>
<tr>
<th>Exception</th>
<th>报错位置</th>
<th>errorCode</th>
<th>errorMsg</th>
<th>errorDesc/日志</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>ACServiceException</td>
<td>CLOUD</td>
<td>3002</td>
<td>invalid param</td>
<td>batchReplaceParam is not set</td>
<td>batchReplaceParam没有设置</td>
</tr>
</tbody>
</table>
<p>使用实例</p>
<ul>
<li>实例1：批量插入三条数据<br />
(device_id:&rdquo;001&rdquo;, timestamp:1469098960, pm25:70.5, speed:40, mode:&rdquo;low&rdquo;) (device_id:&rdquo;001&rdquo;, timestamp:1469098961, pm25:70.6, speed:41, mode:&rdquo;low&rdquo;) (device_id:&rdquo;001&rdquo;, timestamp:1469098962, pm25:70.7, speed:42, mode:&rdquo;low&rdquo;)</li>
</ul>
<p><pre><code>ACObject obj1 = new ACObject();
obj1.put(&quot;device_id&quot;, &quot;001&quot;);
obj1.put(&quot;timestamp&quot;, 1469098960);
obj1.put(&quot;pm25&quot;, 70.5);
obj1.put(&quot;speed&quot;, 40);
obj1.put(&quot;mode&quot;, &quot;low&quot;);

ACObject obj2 = new ACObject();
obj2.put(&quot;device_id&quot;, &quot;001&quot;);
obj2.put(&quot;timestamp&quot;, 1469098961);
obj2.put(&quot;pm25&quot;, 70.6);
obj2.put(&quot;speed&quot;, 41);
obj2.put(&quot;mode&quot;, &quot;low&quot;);

ACObject obj3 = new ACObject();
obj3.put(&quot;device_id&quot;, &quot;001&quot;);
obj3.put(&quot;timestamp&quot;, 1469098962);
obj3.put(&quot;pm25&quot;, 70.7);
obj3.put(&quot;speed&quot;, 42);
obj3.put(&quot;mode&quot;, &quot;low&quot;);

// 方法一:
ac.store(&quot;device_data&quot;, ctx).batchReplace()
    .add(obj1, obj2, obj3)
    .execute();

// 方法二:
ac.store(&quot;device_data&quot;, ctx).batchReplace()
    .add(obj1)
    .add(obj2)
    .add(obj3)
    .execute();

//方法三:
List&lt;ACObject&gt; objs = new ArrayList&lt;&gt;();
objs.add(obj1);
objs.add(obj2);
objs.add(obj3);

ac.store(&quot;device_data&quot;, ctx).batchReplace()
    .put(objs)
    .execute();
</code></pre><br />
类比SQL<br />
<pre><code>REPLACE INTO `device_data`(`device_id`, `timestamp`, `pm25`, `speed`, `mode`) VALUES ('001', 1469098960, 70.5, 40, 'low'), ('001', 1469098961, 70.6, 41, 'low'), ('001', 1469098962, 70.7, 42, 'low');
</code></pre><br />
5 数据删除<br />
5.1 Delete</p>
<p>删除单行数据，如果这行数据存在，则执行删除，如果数据不存在，不会执行</p>
<blockquote>
<p>分区数据集和非分区数据集使用方式相同</p>
</blockquote>
<p>标准用法<br />
<pre><code>ac.store(数据集名字, context).delete(键值列表)
        .execute();
</code></pre><br />
注意事项</p>
<ul>
<li>键值列表至少含所有的主键列</li>
</ul>
<p>错误码</p>
<p>通用错误码</p>
<table>
<thead>
<tr>
<th>Exception</th>
<th>报错位置</th>
<th>errorCode</th>
<th>errorMsg</th>
<th>errorDesc/日志</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>ACServiceException</td>
<td>CLOUD</td>
<td>3002</td>
<td>invalid param</td>
<td>deleteParam is not set</td>
<td>deleteParam没有设置</td>
</tr>
</tbody>
</table>
<p>使用实例</p>
<ul>
<li>实例1: 删除一行设备数据记录（ID=&rdquo;001&rdquo;, timestamp=1469098960）<br />
<pre><code>ac.store(&quot;device_data&quot;, ctx).delete(&quot;device_id&quot;, &quot;001&quot;, &quot;timestamp&quot;, 1469098960)
        .execute();
</code></pre><br />
类比SQL<br />
<pre><code>DELETE FROM `device_data` WHERE `device_id`='001' AND `timestamp`=1469098960;
实例2: 删除一行设备数据记录（ID=&quot;001&quot;, timestamp=1469098960, mode='high'）
ac.store(&quot;device_data&quot;, ctx).delete(&quot;device_id&quot;, &quot;001&quot;, &quot;timestamp&quot;, 1469098960, &quot;mode&quot;, &quot;high&quot;)
        .execute();
</code></pre><br />
类比SQL<br />
<pre><code>DELETE FROM `device_data` WHERE `device_id`='001' AND `timestamp`=1469098960 AND `mode`='high';
</code></pre><br />
5.2 BatchDelete</li>
</ul>
<p>根据过滤条件删除多行数据</p>
<blockquote>
<p>分区数据集的使用有限制，键值列表至少包含完整的分区键</p>
</blockquote>
<p>标准用法<br />
<pre><code>ac.store(数据集名字，context).batchDelete(键值列表)
        .where(filter_1)
        .and(filter_2)
        .or(filter_3)
        .execute();
</code></pre></p>
<p>注意事项</p>
<ul>
<li>对于分区数据集，键值列表必须包含完整的分区键</li>
<li>对于非分区数据集，键值列表可以为空</li>
</ul>
<p>错误码</p>
<p>通用错误码</p>
<table>
<thead>
<tr>
<th>Exception</th>
<th>报错位置</th>
<th>errorCode</th>
<th>errorMsg</th>
<th>errorDesc/日志</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>ACServiceException</td>
<td>CLOUD</td>
<td>3002</td>
<td>invalid param</td>
<td>batchDeleteParam is not set</td>
<td>batchDeleteParam没有设置</td>
</tr>
</tbody>
</table>
<p>使用实例</p>
<ul>
<li>实例1：删除设备（ID=&rdquo;001&rdquo;, timestamp&gt;=1469098960 and timestamp&lt;=1469102560)之间的所有数据<br />
<pre><code>ACFilter filter1 = ac.filter().whereGreaterThanOrEqualTo(&quot;timestamp&quot;, 1469098960).andLessThanOrEqualTo(&quot;timestamp&quot;, 1469102560);

ac.store(&quot;device_data&quot;, context).batchDelete(&quot;device_id&quot;, &quot;001&quot;).
        .where(filter1)
        .execute();
</code></pre><br />
类比SQL<br />
<pre><code>DELETE FROM `device_data` WHERE `device_id`=&quot;001&quot; AND (`timestamp`&gt;=1469098960 AND `timestamp`&lt;=1469102560);
</code></pre><br />
实例2：删除设备（ID=&rdquo;001&rdquo;, timestamp&gt;=1469098960 timestamp&lt;=1469102560)之间并且speed大于40的所有数据<br />
<pre><code>ACFilter filter1 = ac.filter().whereGreaterThanOrEqualTo(&quot;timestamp&quot;, 1469098960).andLessThanOrEqualTo(&quot;timestamp&quot;, 1469102560);
ACFilter filter2 = ac.filter().whereGreaterThan(&quot;speed&quot;, 40);

ac.store(&quot;device_data&quot;, context).batchDelete(&quot;device_id&quot;, &quot;001&quot;).
        .where(filter1)
        .and(filter2)
        .execute();
</code></pre><br />
类比SQL<br />
<pre><code>DELETE FROM `device_data` WHERE `device_id`=&quot;001&quot; AND (`timestamp`&gt;=1469098960 AND `timestamp`&lt;=1469102560) AND `speed`&gt;40;
</code></pre><br />
6 修改数据</li>
</ul>
<p>6.1 Update</p>
<p>修改单行数据，如果这行数据不存在则执行插入，如果存在，则修改指定的列。</p>
<blockquote>
<p>分区数据集和非分区数据集使用方式相同</p>
</blockquote>
<p>标准用法<br />
<pre><code>ac.store(数据集名字, context).update(键值列表)
        .put(key_1, value_1)
        .put(key_..., value_...)
        .put(key_n, value_n)
        .execute();
</code></pre><br />
注意事项</p>
<ul>
<li>键值列表至少包含所有主键列</li>
<li>(key,value)对可选</li>
<li>没有更新的列会使用原来的值</li>
</ul>
<p>错误码</p>
<p>通用错误码</p>
<table>
<thead>
<tr>
<th>Exception</th>
<th>报错位置</th>
<th>errorCode</th>
<th>errorMsg</th>
<th>errorDesc/日志</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>ACServiceException</td>
<td>CLOUD</td>
<td>3002</td>
<td>invalid param</td>
<td>updateParam is not set</td>
<td>updateParam没有设置</td>
</tr>
</tbody>
</table>
<p>使用实例</p>
<ul>
<li>实例1：写入一条数据(device_id=&rdquo;001&rdquo;, timestamp=1469098960, speed=60)数据，如果数据行不存在，则插入此行数据(device_id=&rdquo;001&rdquo;, timestamp=1469098960, speed=60,其它列使用默认值），如果数据行已经存在，则将speed列的值改为60。<br />
<pre><code>ac.store(&quot;device_data&quot;, context).batchUpdate(&quot;device_id&quot;, &quot;001&quot;, &quot;timestamp&quot;, 1469098960)
        .put(&quot;speed&quot;, 60)
        .execute();
</code></pre><br />
类比SQL<br />
<pre><code>INSERT INTO `device_data` SET `device_id`='001', `timestamp`=1469098960, `speed`=60 ON DUPLICATE KEY update `device_id`='001', `timestamp`=1469098960, `speed`=60;
</code></pre><br />
6.2 Modify</li>
</ul>
<p>修改单行数据，如里数据不存在，则报错，如果数据存在，则将指定列修改为特定的值，可以进行加减运算</p>
<blockquote>
<p>分区数据集和非分区数据集使用方式相同</p>
</blockquote>
<p>标准用法<br />
<pre><code>ac.store(数据集名字, context).modify(键值列表)
        .where(key_xxx, value_xxx)
        .and(key_xxx, value_xxx)
        .set(key_1, value_1)
        .inc(key_..., value_...)
        .dec(key_n, value_n)
        .execute();
</code></pre><br />
注意事项</p>
<ul>
<li>键值列表至少包含所有主键列</li>
<li>where指的是过滤条件</li>
<li>set/inc/dec至少使用一个</li>
</ul>
<p>错误码</p>
<p>通用错误码</p>
<table>
<thead>
<tr>
<th>Exception</th>
<th>报错位置</th>
<th>errorCode</th>
<th>errorMsg</th>
<th>errorDesc/日志</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>ACServiceException</td>
<td>CLOUD</td>
<td>3002</td>
<td>invalid param</td>
<td>modifyParam is not set</td>
<td>modifyParam没有设置</td>
</tr>
</tbody>
</table>
<p>使用实例</p>
<ul>
<li>实例1：将(ID=&rdquo;001&rdquo;, timestamp=1469098960)的数据，speed加5,mode设备设置为high, pm25值减1.5<br />
<pre><code>ac.store(&quot;device_data&quot;, context).modify(&quot;device_id&quot;, &quot;001&quot;, &quot;timestamp&quot;, 1469098960)
        .inc(&quot;speed&quot;, 5)
        .set(&quot;mode&quot;, &quot;high&quot;)
        .dec(&quot;pm25&quot;, 1.5)
        .execute();
</code></pre><br />
类比SQL<br />
<pre><code>UPDATE `device_data` SET `speed`=`speed`+5, `mode`='high', `pm25`=`pm25`-1.5 WHERE `device_id`=&quot;001&quot; AND `timestamp`=1469098960;
</code></pre></li>
<li>实例2：将(ID=&rdquo;001&rdquo;, timestamp=1469098960 并且 speed=5)的数据，mode设置为high<br />
<pre><code>ac.store(&quot;device_data&quot;, context).modify(&quot;device_id&quot;, &quot;001&quot;, &quot;timestamp&quot;, 1469098960)
        .where(&quot;speed&quot;, 5)
        .set(&quot;mode&quot;, &quot;high&quot;)
        .execute();
</code></pre><br />
类比SQL<br />
<pre><code>UPDATE `device_data` SET `mode`='high' WHERE `device_id`=&quot;001&quot; AND `timestamp`=1469098960 AND `speed`=5;
</code></pre><br />
6.3 BatchUpdate</li>
</ul>
<p>根据条件修改数据</p>
<blockquote>
<p>分区数据集的使用方式有限制，键值列表至少包含完整的分区键</p>
</blockquote>
<p>标准用法<br />
<pre><code>ac.store(数据集名字, ctx).batchUpdate(键值列表)
        .where(filter_1)
        .or(filter_2)
        .and(filter_3)
        .set(key_n, value_n)
        .inc(key_n, value_n)
        .dec(key_n, value_n)
        .execute();
</code></pre><br />
注意事项</p>
<ul>
<li>对于分区数据集，键值列表至少包含所有的分区键</li>
<li>对于非分区数据集，键值列表可以为空</li>
<li>set/inc/dec可以为多个，至少包含一个</li>
</ul>
<p>错误码</p>
<p>通用错误码</p>
<table>
<thead>
<tr>
<th>Exception</th>
<th>报错位置</th>
<th>errorCode</th>
<th>errorMsg</th>
<th>errorDesc/日志</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>ACServiceException</td>
<td>CLOUD</td>
<td>3002</td>
<td>invalid param</td>
<td>batchUpdateParam is not set</td>
<td>batchUpdateParam没有设置</td>
</tr>
</tbody>
</table>
<p>使用实例</p>
<ul>
<li>实例1：将(device_id=&rdquo;001&rdquo;, pm25&gt;40)的数据的mode改为&rdquo;high&rdquo;, speed加20<br />
<pre><code>ACFilter f1 = ac.filter().whereGreaterThan(&quot;pm25&quot;, 40);

ac.store(&quot;device_data&quot;, ctx).batchUpdate(&quot;device_id&quot;, &quot;001&quot;)
        .where(f1)
        .set(&quot;mode&quot;, &quot;high&quot;)
        .inc(&quot;speed&quot;, 20)
        .execute();
</code></pre><br />
类比SQL<br />
<pre><code>UPDATE `device_data` SET `mode`='high', `speed`=`speed`+20 WHERE `deviceId`='001' AND `pm25`&gt;40;
</code></pre><br />
7 查询数据</li>
</ul>
<p>7.1 find</p>
<p>查询单条数据，如果数据不存在，则返回的数据为空，如果存在，则返回单行数据。</p>
<blockquote>
<p>分区数据集和不分区数据集使用方式相同</p>
</blockquote>
<p>标准用法<br />
<pre><code>// 如果数据不存在，则返回null
ACObject result = ac.store(数据集名字, ctx).find(键值列表)
                    .select(key1, ..., keyn)
                    .execute();
</code></pre><br />
注意事项</p>
<ul>
<li>键值列表必须包含完整的主键列</li>
<li>select可选，如果没有指定select，则会返回所有的列</li>
</ul>
<p>错误码</p>
<p>通用错误码</p>
<table>
<thead>
<tr>
<th>Exception</th>
<th>报错位置</th>
<th>errorCode</th>
<th>errorMsg</th>
<th>errorDesc</th>
<th>日志</th>
</tr>
</thead>
<tbody>
<tr>
<td>ACServiceException</td>
<td>CLOUD</td>
<td>3002</td>
<td>invalid param</td>
<td>findParam is not set</td>
<td>findParam is not set</td>
</tr>
</tbody>
</table>
<p>使用实例</p>
<ul>
<li>实例1：查询(device_id=&rdquo;001&rdquo;, timestamp=1469098960)这一行的所有列<br />
<pre><code>ACObject result = ac.store(&quot;device_data&quot;, ctx).find(&quot;device_id&quot;, &quot;001&quot;, &quot;timestamp&quot;, 1469098960)
                .execute();
// 结果集如果为空则, result==null

// 结果集不为空输出数据
String device_id = result.getString(&quot;device_id&quot;);
Long timestamp = result.getLong(&quot;timestamp&quot;);
Double pm25 = result.getDouble(&quot;pm25&quot;);
String mode = result.getString(&quot;mode&quot;);
Long speed = result.getLong(&quot;speed&quot;);
System.out.Println(device_id + &quot;, &quot; + timestamp + &quot;, &quot; + pm25 + &quot;, &quot; + mode + &quot;, &quot; + speed);
</code></pre><br />
类比SQL<br />
<pre><code>SELECT * FROM `device_data` WHERE `device_id`='001' AND `timestamp`=1469098960;
</code></pre></li>
<li>实例2：查询(device_id=&rdquo;001&rdquo;, timestamp=1469098960)这一行的speed列和mode列<br />
<pre><code>ACObject result = ac.store(&quot;device_data&quot;, ctx).find(&quot;device_id&quot;, &quot;001&quot;, &quot;timestamp&quot;, 1469098960)
        .select(&quot;speed&quot;, &quot;mode&quot;)
        .execute();
// 如果为空则, result==null

// 如果结果不为空，取出数据
Long speed = result.getLong(&quot;speed&quot;);
String mode = result.getString(&quot;mode&quot;);
System.out.Println(speed + &quot;, &quot; + mode);
</code></pre><br />
类比SQL<br />
<pre><code>SELECT `speed`, `mode` FROM `device_data` WHERE `device_id`='001' AND `timestamp`=1469098960;
</code></pre><br />
7.2 scan</li>
</ul>
<p>根据条件查询数据，可能有多条。</p>
<blockquote>
<p>分区数据集的使用有限制，键值列表至少包含完整的分区键</p>
</blockquote>
<p>标准用法<br />
<pre><code>// 如果符合条件的数据不存在，则返回一个空的数组
List&lt;ACObject&gt; results = ac.store(数据集名字, ctx).scan(键值列表)
                      .select(key_1, ...., key_n)
                      .start(键值列表)
                      .end(键值列表)
                      .where(filter_1)
                      .and(filter_2)
                      .or(filter_3)
                      .groupBy(key_1, ..., key_n)
                      .sum(key_1, ..., key_n)
                      .avg(key_1, ..., key_n)
                      .max(key_1, ..., key_n)
                      .min(key_1, ..., key_n)
                      .count()
                      .orderByAsc(key_1, ..., key_n)
                      .orderByDesc(key_1, ..., key_n)
                      .offset(数值)
                      .limit(数值)
                      .execute();
</code></pre><br />
注意事项</p>
<ul>
<li>select可以包含一列或多列，如果未指定，则表示返回所有列</li>
<li>start/end至少包含完整的分区键</li>
<li>start/end最多可以包含一个非主键key</li>
<li>sum(key1, &hellip;, keyn)指的是对每一列分别求sum</li>
<li>limit最大为1000, 每次最多返回1000行数据</li>
</ul>
<p>错误码</p>
<p>通用错误码</p>
<table>
<thead>
<tr>
<th>Exception</th>
<th>报错位置</th>
<th>errorCode</th>
<th>errorMsg</th>
<th>errorDesc</th>
<th>日志</th>
</tr>
</thead>
<tbody>
<tr>
<td>ACServiceException</td>
<td>CLOUD</td>
<td>3002</td>
<td>invalid param</td>
<td>scanParam is not set</td>
<td>scanParam is not set</td>
</tr>
</tbody>
</table>
<p>使用实例</p>
<ul>
<li>实例1：查询(device_id=&rdquo;001&rdquo;, timestamp&gt;=1469098960, timestamp&lt;=1469102560) 的pm25值和对应的timestamp<br />
<pre><code>List&lt;ACObject&gt; results = ac.store(&quot;device_data&quot;, ctx).scan(&quot;device_id&quot;, &quot;001&quot;)
        .select(&quot;timestamp&quot;, &quot;pm25&quot;)
        .start(&quot;timestamp&quot;, 1469098960)
        .end(&quot;timestamp&quot;, 1469102560)
        .execute();

// 输出结果
for (ACObject result:results) {
    long timestamp = result.getLong(&quot;timestamp&quot;);
    double pm25 = result.getDouble(&quot;pm25&quot;);
    System.out.Println(timestamp + &quot;,&quot; + pm25)
}
</code></pre><br />
类比SQL<br />
<pre><code>SELECT `timestamp`, `pm25` FROM `device_data` WHERE `timestamp`&gt;-1469098960 AND `timestamp`&lt;=1469102560;
</code></pre></li>
<li>实例2：查询(device_id=&rdquo;001&rdquo;, timestamp&gt;=1469098960) 的第11条到第30条的 pm25值和对应的timestamp<br />
<pre><code>List&lt;ACObject&gt; results = ac.store(&quot;device_data&quot;, ctx).scan(&quot;device_id&quot;, &quot;001&quot;)
        .select(&quot;timestamp&quot;, &quot;pm25&quot;)
        .start(&quot;timestamp&quot;, 1469098960)
        .offset(10)
        .limit(20)
        .execute();

// 输出结果
for (ACObject result:results) {
    long timestamp = result.getLong(&quot;timestamp&quot;);
    double pm25 = result.getDouble(&quot;pm25&quot;);
    System.out.Println(timestamp + &quot;,&quot; + pm25)
}
</code></pre><br />
类比SQL<br />
<pre><code>SELECT `timestamp`, `pm25` FROM `device_data` WHERE `device_id`='001' AND `timestamp`&gt;-1469098960 limit 10,20;
</code></pre></li>
<li>实例3：查询(device_id=&rdquo;001&rdquo;)的最近的20条数据的pm25值和对应的时间戳<br />
<pre><code>List&lt;ACObject&gt; results = ac.store(&quot;device_data&quot;, ctx).scan(&quot;device_id&quot;, &quot;001&quot;)
        .select(&quot;timestamp&quot;, &quot;pm25&quot;)
        .orderByDesc(&quot;timestamp&quot;)
        .limit(20)
        .execute();

// 输出结果
for (ACObject result:results) {
    long timestamp = result.getLong(&quot;timestamp&quot;);
    double pm25 = result.getDouble(&quot;pm25&quot;);
    System.out.Println(timestamp + &quot;,&quot; + pm25)
}
</code></pre><br />
类比SQL<br />
<pre><code>SELECT `timestamp`, `pm25` FROM `device_data` WHERE `device_id`='001' ORDERY BY `timestamp`DESC limit 10,20;
</code></pre><br />
实例4：查询device_id=&rdquo;001&rdquo;并且pm25&gt;40.5的pm25值和时间戳<br />
<pre><code>ACFilter f1 = ac.filter().whereGreaterThan(&quot;pm25&quot;, 40.5);

List&lt;ACObject&gt; results = ac.store(&quot;device_data&quot;, ctx).scan(&quot;device_id&quot;, &quot;001&quot;)
        .select(&quot;timestamp&quot;, &quot;pm25&quot;)
        .where(f1)
        .execute();

// 输出结果
for (ACObject result:results) {
    long timestamp = result.getLong(&quot;timestamp&quot;);
    double pm25 = result.getDouble(&quot;pm25&quot;);
    System.out.Println(timestamp + &quot;,&quot; + pm25)
}
</code></pre><br />
类比SQL<br />
<pre><code>SELECT `timestamp`, `pm25` FROM `device_data` WHERE `device_id`='001' AND `pm25`&gt;40.5 LIMIT 1000;
</code></pre></li>
<li>实例5：查询device_id=&rdquo;001&rdquo; 并且 pm25&gt;40.5的数据行数<br />
<pre><code>Filter f1 = ac.filter().whereGreaterThan(&quot;pm25&quot;, 40.5);

List&lt;ACObject&gt; results = ac.store(&quot;device_data&quot;, ctx).scan(&quot;device_id&quot;, &quot;001&quot;)
        .where(f1)
        .count()
        .execute();

// 输出结果
Long count = results.get(0).getLong(&quot;_count&quot;);
System.out.Println(count)
</code></pre><br />
类比SQL<br />
<pre><code>SELECT count(*) FROM `device_data` WHERE `device_id`='001' AND `pm25`&gt;40.5;
</code></pre></li>
<li>实例6：计算device_id=&rdquo;001&rdquo; 并且 timestamp&gt;=1469098960 &amp;&amp; timestamp&lt;=146910256的pm25平均值<br />
<pre><code>List&lt;ACObject&gt; results = ac.store(&quot;device_data&quot;, ctx).scan(&quot;device_id&quot;, &quot;001&quot;)
        .start(&quot;timestamp&quot;, 1469098960)
        .end(&quot;timestamp&quot;, 1469102560)
        .avg(&quot;pm25&quot;)
        .execute();

// 输出结果
Long avg_pm25 = results.get(0).getLong(&quot;_avg_pm25&quot;);
System.out.Println(avg_pm25)
</code></pre><br />
类比SQL<br />
<pre><code>SELECT AVG(`pm25`) as _avg_pm25 FROM `device_data` WHERE `device_id`='001' AND (`timestamp`&gt;=1469098960 AND `timestamp`&lt;=1469102560);
</code></pre></li>
<li>实例7：查询device_id=&rdquo;001&rdquo; (mode=&rdquo;auto&rdquo;并且pm25&gt;40) 或 (mode=&rdquo;high&rdquo;并且pm25&gt;30)的pm25,mode,timestamp，最多返回500条<br />
<pre><code>ACFilter f1 = ac.filter().whereEqualTo(&quot;mode&quot;, &quot;auto&quot;).andGreateThan(&quot;pm25&quot;, 40);
ACFilter f2 = ac.filter().whereEqualTo(&quot;mode&quot;, &quot;high&quot;).andGreateThan(&quot;pm25&quot;, 30);

List&lt;ACObject&gt; results = ac.store(&quot;device_data&quot;, ctx).scan(&quot;device_id&quot;, &quot;001&quot;)
        .select(&quot;timestamp&quot;, &quot;mode&quot;, &quot;pm25&quot;)
        .where(f1)
        .or(f2)
        .limit(500)
        .execute();

// 输出结果
for (ACObject result:results) {
    long timestamp = result.getLong(&quot;timestamp&quot;);
    String mode = result.getString(&quot;mode&quot;);
    double pm25 = result.getDouble(&quot;pm25&quot;);
    System.out.Println(timestamp + &quot;, &quot; + mode + &quot;, &quot; + pm25)
}
</code></pre><br />
类比SQL<br />
<pre><code>SELECT `timestamp`, `mode`, `pm25` FROM `device_data` WHERE `device_id`='001' AND (`mode`='auto' AND `pm25`&gt;40) AND (`mode`='high' AND `pm25`&gt;30) LIMIT 500;
</code></pre></li>
<li>实例8：查询device_id=&rdquo;001&rdquo;并且(timestamp&gt;1469098960并且timestamp&lt;=1469102560)的时间戳和pm25值，并按pm25值逆序排列<br />
<pre><code>List&lt;ACObject&gt; results = ac.store(&quot;device_data&quot;, ctx).scan(&quot;device_id&quot;, &quot;001&quot;)
        .start(&quot;timestamp&quot;, 1469098960)
        .end(&quot;timestamp&quot;, 1469102560)
        .orderByDesc(&quot;pm25&quot;)
        .execute();

// 输出结果
for (ACObject result:results) {
    long timestamp = result.getLong(&quot;timestamp&quot;);
    double pm25 = result.getDouble(&quot;pm25&quot;);
    System.out.Println(timestamp + &quot;, &quot; + pm25)
}
</code></pre><br />
类比SQL<br />
<pre><code>SELECT * FROM `device_data` WHERE `device_id`='001' AND (`timestamp`&gt;=1469098960 AND `timestamp`&lt;=1469102560) ORDER BY `pm25`DESC;
</code></pre></li>
<li>实例9：查询device_id=&rdquo;001&rdquo;并且(timestamp&gt;1469098960并且timestamp&lt;=1469102560)的数据中的pm25的最大值和时间点<br />
<pre><code>List&lt;ACObject&gt; results = ac.store(&quot;device_data&quot;, ctx).scan(&quot;device_id&quot;, &quot;001&quot;)
        .select(&quot;timestamp&quot;)
        .start(&quot;timestamp&quot;, 1469098960)
        .end(&quot;timestamp&quot;, 1469102560)
        .max(&quot;pm25&quot;)
        .execute();

// 输出结果
Long timestamp = results.get(0).getLong(&quot;timestamp&quot;);
Double pm25 = result.get(0).getString(&quot;pm25&quot;);
</code></pre><br />
类比SQL<br />
<pre><code>SELECT `timestamp`, MAX(`pm25`) as _max_pm25 FROM `device_data` WHERE `device_id`='001' AND (`timestamp`&gt;=1469098960 AND `timestamp`&lt;=1469102560);
</code></pre></li>
<li>实例10：查询device_id=&rdquo;001&rdquo;在使用不同mode时的speed平均值<br />
<pre><code>List&lt;ACObject&gt; results = ac.store(&quot;device_data&quot;, ctx).scan(&quot;device_id&quot;, &quot;001&quot;)
        .select(&quot;mode&quot;, &quot;speed&quot;)
        .groupBy(&quot;mode&quot;)
        .execute();

// 输出结果
for (ACObject result:results) {
    String mode = result.getString(&quot;mode&quot;);
    long speed = result.getLong(&quot;speed&quot;);
    System.out.Println(mode + &quot;, &quot; + speed)
}
</code></pre><br />
类比SQL<br />
<pre><code>SELECT `mode`, `speed`, AVG(`pm25`) as _avg_pm25 FROM `device_data` WHERE `device_id`='001' GROUP BY(`mode`);
</code></pre><br />
8 多表数据查询<br />
同时查询多个数据集的数据</li>
</ul>
<p>执行多表查询的数据集，必须是非分区数据集，并且属于同一个数据空间<br />
数据集实例</p>
<p>以商场的订单系统为例来说明</p>
<p>user数据集: 商场的用户信息，记录了用户的id, 名字，地址，电话号码<br />
<img alt="" src="///E://work/frontwork/ngx-os/images/store_join_1.png" /></p>
<p>order数据集: 商场的订单数据，记录了订单ID，下订单的用户，商品ID，当时的价格，下订单的时间<br />
<img alt="" src="///E://work/frontwork/ngx-os/images/store_join_2.png" /></p>
<p>8.1 MultiScan</p>
<p>查询多个数据集的数据</p>
<p>标准用法<br />
<pre><code>// 如果符合条件的数据不存在，则返回一个空的数组
// 查询请求和结果中的列名，必须是完整的格式（表名.列表)，不支持使用不完整的列名
List&lt;ACObject&gt; results = ac.store(ctx, &quot;数据集1&quot;, &quot;数据集2&quot;, &quot;数据集n&quot;)
        .multiScan()
        .select(key_1, ..., key_n)
        .from(&quot;基准数据集&quot;)
        .join(join条件)
        .where(filter条件)
        .and(filter条件)
        .or(filter条件)
        .sum(key_1, ..., key_n)
        .avg(key_1, ..., key_n)
        .max(key_1, ..., key_n)
        .min(key_1, ..., key_n)
        .count()
        .orderByAsc(key_1, ..., key_n)
        .orderByDesc(key_1, ..., key_n)
        .offset(数值)
        .limit(数值)
        .execute();
</code></pre><br />
注意事项</p>
<ul>
<li>limit最大为1000, 每次最多返回1000行数据</li>
<li>当前仅支持内联结</li>
<li>支持多个(&gt;=2)数据集的联表查询</li>
<li>如果数据集的数据量很大，则不建议使用多表查询，而是通过使用多次查询来实现</li>
</ul>
<p>错误码</p>
<p>通用错误码</p>
<p>使用实例</p>
<ul>
<li>实例1: 查询用户名为&rdquo;jack&rdquo;的地址和所有订单(订单ID, 商品ID, 下单价格)<br />
<pre><code>ACContext ctx = ac.newContext();

ACFilter f1 = ac.filter().whereEqualTo(&quot;user.user_name&quot;, &quot;jack&quot;);
ACFilter f2 = ac.filter().whereEqualToColumn(&quot;user.user_id&quot;, &quot;order.user_id&quot;);
ACJoin j1 = ac.innerJoin(&quot;order&quot;).where(f2);

List&lt;ACObject&gt; results = ac.store(ctx, &quot;user&quot;, &quot;order&quot;).multiScan()
        .select(&quot;user.user_name&quot;, &quot;user.user_address&quot;, &quot;order.order_id&quot;, &quot;order.commodity_id&quot;, &quot;order.price&quot;)
        .from(&quot;user&quot;)
        .join(j1)
        .where(f1)
        .limit(100)
        .execute();

// 输出结果
for (ACObject result:results) {
    String userName = result.getString(&quot;user.user_name&quot;);
    String userAddress = result.getString(&quot;user.user_address&quot;);
    long userOrderId = result.getLong(&quot;order.order_id&quot;);
    long commodityId = result.getLong(&quot;order.commodity_id&quot;);
    long price = result.getLong(&quot;order.price&quot;);

    System.out.println(userName + &quot;, &quot; + userAddress + &quot;, &quot; + userOrderId + &quot;, &quot; + commodityId + &quot;, &quot; + price);
}
</code></pre><br />
类比SQL<br />
<pre><code>SELECT `user`.`user_name`, `user`.`user_address`, `order`.`order_id`, `order`.`commodity_id`, `order`.`price` 
    FROM `user`
    INNER JOIN `order` ON (`user`.`user_id` = `order`.`user_id`)
    WHERE (`user`.`user_name` = 'jack')
    LIMIT 1000;
</code></pre><br />
9 常见问题</li>
</ul>
<p>9.1 无法存储emojis表情</p>
<p>因为数据集用的是UTF-8字符集，所以无法存储emojis表情，但可以将emoji转化为Base64写入数据集，然后读取时，再转化回emojis</p>
<p>使用实例:<br />
<pre><code>// emoji转Base64
String srcStr = &quot;Here is a boy: \uD83D\uDC66\uD83C\uDFFF&quot;; // emojis字符串
String desStr = Base64.encodeToString(srcStr.getBytes(&quot;UTF-8&quot;), Base64.NO_WRAP); // emojis转Base64

// base64转emoji
String srcStr = &quot;SGVyZSBpcyBhIGJveTog8J+RpvCfj78=&quot;; // base64字符串
Byte[] desData = Base64.decode(srcStr, Base64.NO_WRAP); // Base64转emojis
String desStr = new String(desData, &quot;UTF-8&quot;);
</code></pre><br />
10 通用错误码</p>
<p>10.1 SDK错误</p>
<table>
<thead>
<tr>
<th>Exception</th>
<th>errorDesc</th>
<th>日志</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>IllegalArgumentException</td>
<td>param keys is invalid</td>
<td>param key must not be null</td>
<td>key名字不能为NULL</td>
</tr>
<tr>
<td>IllegalArgumentException</td>
<td>param keys is invalid</td>
<td>param key must be string, key[xxx] keyType[xxx]</td>
<td>key名字必须是字符串</td>
</tr>
<tr>
<td>IllegalArgumentException</td>
<td>param keys is invalid</td>
<td>param value must not be null, key[xxx]</td>
<td>value不能为NULL</td>
</tr>
<tr>
<td>IllegalArgumentException</td>
<td>param keys is invalid</td>
<td>param value type is not supported, key[xxx] value[xxx] valueType[xxx]</td>
<td>value的数据类型不支持</td>
</tr>
<tr>
<td>IllegalArgumentException</td>
<td>param keys is invalid</td>
<td>count of param keys must not be 0</td>
<td>(key-value)数量不能为0</td>
</tr>
<tr>
<td>IllegalArgumentException</td>
<td>param keys is invalid</td>
<td>count of param keys must be even, count[xxx]</td>
<td>(key-value)必须是一一对应，所以数量必须是偶数</td>
</tr>
<tr>
<td>IllegalArgumentException</td>
<td>invalid put param</td>
<td>param key must not be null</td>
<td>put的key是null</td>
</tr>
<tr>
<td>IllegalArgumentException</td>
<td>invalid put param</td>
<td>param value must not be null</td>
<td>put的value是null</td>
</tr>
<tr>
<td>IllegalArgumentException</td>
<td>invalid put param</td>
<td>param value type is not supported, key[xxx], value[xxx] valueType[xxx]</td>
<td>put的value的数据类型不支持</td>
</tr>
<tr>
<td>IllegalArgumentException</td>
<td>invalid filter param</td>
<td>param key must not be null</td>
<td>filter的key是null</td>
</tr>
<tr>
<td>IllegalArgumentException</td>
<td>invalid filter param</td>
<td>param value must not be null</td>
<td>filter的value是null</td>
</tr>
<tr>
<td>IllegalArgumentException</td>
<td>invalid filter param</td>
<td>param value type is not supported, key[xxx], value[xxx] valueType[xxx]</td>
<td>filter的value的数据类型不支持</td>
</tr>
<tr>
<td>IllegalArgumentException</td>
<td>invalid expr param</td>
<td>param key must not be null</td>
<td>expr的key是null</td>
</tr>
<tr>
<td>IllegalArgumentException</td>
<td>invalid expr param</td>
<td>param value must not be null</td>
<td>expr的value是null</td>
</tr>
<tr>
<td>IllegalArgumentException</td>
<td>invalid expr param</td>
<td>param value type is not supported, key[xxx], value[xxx] valueType[xxx]</td>
<td>expr的value的数据类型不支持</td>
</tr>
<tr>
<td>IllegalArgumentException</td>
<td>param filter must not be empty</td>
<td>param filter must not be empty</td>
<td>filter不能为空</td>
</tr>
<tr>
<td>IllegalArgumentException</td>
<td>param key of select must not be empty</td>
<td>param key of select must not be empty</td>
<td>select key不能为空</td>
</tr>
<tr>
<td>IllegalArgumentException</td>
<td>param startKeys is invalid</td>
<td>param primaryKey must not be null</td>
<td>startKey名字不能为NULL</td>
</tr>
<tr>
<td>IllegalArgumentException</td>
<td>param startKeys is invalid</td>
<td>param primaryKey must be string, key[xxx] keyType[xxx]</td>
<td>startKey名字必须是字符串</td>
</tr>
<tr>
<td>IllegalArgumentException</td>
<td>param startKeys is invalid</td>
<td>param primaryValue must not be null, key[xxx]</td>
<td>startValue不能为NULL</td>
</tr>
<tr>
<td>IllegalArgumentException</td>
<td>param startKeys is invalid</td>
<td>param primaryValue type is not supported, key[xxx] value[xxx] valueType[xxx]</td>
<td>startValue的数据类型不支持</td>
</tr>
<tr>
<td>IllegalArgumentException</td>
<td>param endKeys is invalid</td>
<td>param primaryKey must not be null</td>
<td>endKey名字不能为NULL</td>
</tr>
<tr>
<td>IllegalArgumentException</td>
<td>param endKeys is invalid</td>
<td>param primaryKey must be string, key[xxx] keyType[xxx]</td>
<td>endKey名字必须是字符串</td>
</tr>
<tr>
<td>IllegalArgumentException</td>
<td>param endKeys is invalid</td>
<td>param primaryValue must not be null, key[xxx]</td>
<td>endValue不能为NULL</td>
</tr>
<tr>
<td>IllegalArgumentException</td>
<td>param endKeys is invalid</td>
<td>param primaryValue type is not supported, key[xxx] value[xxx] valueType[xxx]</td>
<td>endValue的数据类型不支持</td>
</tr>
<tr>
<td>IllegalArgumentException</td>
<td>param offset must be &gt;=0, offset[xxx]</td>
<td>param offset must be &gt;=0, offset[xxx]</td>
<td>offset必须大于等于0</td>
</tr>
<tr>
<td>IllegalArgumentException</td>
<td>param limit must be &gt;=0 and &lt;=1000, limit[xxx]</td>
<td>param limit must be &gt;=0 and &lt;=1000, limit[xxx]</td>
<td>limit必须&gt;=0 and &lt;=1000</td>
</tr>
<tr>
<td>IllegalArgumentException</td>
<td>param key of orderBy is conflict, key[xxx]</td>
<td>param key of orderBy is conflict, key[xxx]</td>
<td>orderBy的列设置的排序方式不一致</td>
</tr>
<tr>
<td>IllegalArgumentException</td>
<td>param key of aggregate must not be empty</td>
<td>param key of aggregate must not be empty</td>
<td>aggregate指定的key不能为空</td>
</tr>
<tr>
<td>IllegalArgumentException</td>
<td>param key of select must not be empty</td>
<td>param key of select must not be empty</td>
<td>select key 不能为null</td>
</tr>
<tr>
<td>10.2 云端错误</td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<table>
<thead>
<tr>
<th>Exception</th>
<th>errorCode</th>
<th>errorMsg</th>
<th>errorDesc/日志</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>ACServiceException</td>
<td>3002</td>
<td>invalid param</td>
<td>context is not set</td>
<td>没有设置context</td>
</tr>
<tr>
<td>ACServiceException</td>
<td>3002</td>
<td>invalid param</td>
<td>majorDomain is not set</td>
<td>没有设置majorDomain</td>
</tr>
<tr>
<td>ACServiceException</td>
<td>3002</td>
<td>invalid param</td>
<td>common user is not allowed to use store</td>
<td>普通终端用法无法直接使用store</td>
</tr>
<tr>
<td>ACServiceException</td>
<td>3002</td>
<td>invalid param</td>
<td>class is not set</td>
<td>没有设置数据集</td>
</tr>
<tr>
<td>ACServiceException</td>
<td>3002</td>
<td>invalid param</td>
<td>param offset must be &gt;=0</td>
<td>参数offset必须&gt;=0</td>
</tr>
<tr>
<td>ACServiceException</td>
<td>3002</td>
<td>invalid param</td>
<td>param limit must be &gt;=0 and &lt;=1000</td>
<td>参数limit必须&gt;=0并且&lt;=1000</td>
</tr>
<tr>
<td>ACServiceException</td>
<td>3004</td>
<td>not allowed</td>
<td>common user is not allowed to use store</td>
<td>普通用户不允许直接访问store</td>
</tr>
<tr>
<td>ACServiceException</td>
<td>3920</td>
<td>class not exist</td>
<td>class[xxx] is not exist</td>
<td>数据集不存在</td>
</tr>
<tr>
<td>ACServiceException</td>
<td>3925</td>
<td>invalid value param</td>
<td>value of key[xxx] must not be null</td>
<td>value的值不能为null</td>
</tr>
<tr>
<td>ACServiceException</td>
<td>3925</td>
<td>invalid value param</td>
<td>valueType of key[xxx] is not inconsistent with schema</td>
<td>value的数据类型与schema中不一致</td>
</tr>
<tr>
<td>ACServiceException</td>
<td>3927</td>
<td>invalid filter param</td>
<td>key[xxx] of filter is not exist in schema</td>
<td>filter的key在schema中不存在</td>
</tr>
<tr>
<td>ACServiceException</td>
<td>3927</td>
<td>invalid filter param</td>
<td>filter value of key[xxx] must not be null</td>
<td>filter的value不能为null</td>
</tr>
<tr>
<td>ACServiceException</td>
<td>3927</td>
<td>invalid filter param</td>
<td>filter valueType is not inconsistent with schema</td>
<td>filter的value的数据类型与schema不一致</td>
</tr>
<tr>
<td>ACServiceException</td>
<td>3927</td>
<td>invalid filter param</td>
<td>not supported filter connector[xxx]</td>
<td>不支持的filter connector</td>
</tr>
<tr>
<td>ACServiceException</td>
<td>3927</td>
<td>invalid filter param</td>
<td>filter is not set</td>
<td>filter没有设置</td>
</tr>
<tr>
<td>ACServiceException</td>
<td>3928</td>
<td>invalid expr param</td>
<td>param expr(set, inc, dec) is empty</td>
<td>表达式参数不存在</td>
</tr>
<tr>
<td>ACServiceException</td>
<td>3928</td>
<td>invalid expr param</td>
<td>expr key[xxx] must not be null</td>
<td>表达式key是null</td>
</tr>
<tr>
<td>ACServiceException</td>
<td>3928</td>
<td>invalid expr param</td>
<td>expr key[xxx] is not exist</td>
<td>表达式key在schema不存在</td>
</tr>
<tr>
<td>ACServiceException</td>
<td>3928</td>
<td>invalid expr param</td>
<td>expr operator[xxx] is not supported</td>
<td>不支持的表达式运算符</td>
</tr>
<tr>
<td>ACServiceException</td>
<td>3928</td>
<td>invalid expr param</td>
<td>expr value of key[xxx] must not be null</td>
<td>表达式的value是null</td>
</tr>
<tr>
<td>ACServiceException</td>
<td>3929</td>
<td>column not exist</td>
<td>column[xxx] is not exist in schema</td>
<td>column在schema中不存在</td>
</tr>
<tr>
<td>ACServiceException</td>
<td>3930</td>
<td>invalid partition key</td>
<td>partitionKeys is not set</td>
<td>没有设置分区键</td>
</tr>
<tr>
<td>ACServiceException</td>
<td>3930</td>
<td>invalid partition key</td>
<td>partitionKey[xxx] is not set</td>
<td>分区键的某一个key没有设置</td>
</tr>
<tr>
<td>ACServiceException</td>
<td>3932</td>
<td>invalid primary key</td>
<td>primaryKey[xxx] is not set</td>
<td>主键列不存在</td>
</tr>
<tr>
<td>ACServiceException</td>
<td>3934</td>
<td>invalid aggregate param</td>
<td>keys of aggr[xxx] must not be empty</td>
<td>聚集函数指定的key不能为空</td>
</tr>
<tr>
<td>ACServiceException</td>
<td>3934</td>
<td>invalid aggregate param</td>
<td>key[xxx] of aggr[xxx] is not exist in schema</td>
<td>聚焦函数指定的key在schema中不存在</td>
</tr>
<tr>
<td>ACServiceException</td>
<td>3934</td>
<td>invalid aggregate param</td>
<td>not supported aggregate[xxx]</td>
<td>不支持的聚集函数</td>
</tr>
<tr>
<td>ACServiceException</td>
<td>3935</td>
<td>invalid groupBy param</td>
<td>key[xxx] of groupBy is not exist in schema</td>
<td>groupBy指定的key在schema中不存在</td>
</tr>
<tr>
<td>ACServiceException</td>
<td>3936</td>
<td>invalid orderBy param</td>
<td>key[xxx] of orderBy is not exist in schema</td>
<td>orderBy指定的key在schema中不存在</td>
</tr>
<tr>
<td>ACServiceException</td>
<td>3937</td>
<td>invalid select param</td>
<td>key[xxx] of select is not exist in schema</td>
<td>select的key在schema中不存在</td>
</tr>
</tbody>
</table>
<h5 id='4.2.3.4'>测试简介</h5>

<p>上一章节，我们一步步开发了一个完整的服务程序DemoService。代码是写完了，如何验证我们写的代码是否正常工作呢？DemoService能否正确处理APP的请求，能否正确控制智能灯，能否正确接收智能灯的汇报消息，能否将汇报数据写入云端存储等，都少不了测试。测试根据阶段分为多种，比如单元测试、模块测试、集成测试等。考虑到后端服务的复杂性，MAX提供了多种测试方案，下面会一一介绍。</p>
<p>1 单元测试</p>
<p>准备工作做好后，就可以开始我们的测试了，我们的单元测试采用org.apache.maven.surefire插件结合junit来完成。</p>
<blockquote>
<p>注：测试用例的执行，也是通过mvn package来驱动并查看测试结果。在MAX提供的示例pom.xml中，配置了该命令除了将开发的服务打包成jar文件外，也会执行单元测试代码——如果开发者编写了单元测试代码。</p>
</blockquote>
<p>1.1 测试DemoService</p>
<p>具体的服务代码测试相对复杂，一方面其依赖的云端服务比较多；另一方面作为服务框架，在没有client，没有设备的情况下驱动测试，需要一些技巧。为此，MAX为开发者提供了一系列便于测试用的功能，详细介绍如下。</p>
<p>测试demo</p>
<p>通过前面的介绍，UDS的大部分功能是由handleMsg或handleDeviceMsg的各个handler提供的，因此测试工作也集中于对各个handler的测试。在单元测试过程中，无须通过任何client工具驱动，即可完成自动化的单元测试。</p>
<p>这里通过一个完整的测试代码演示如何对DemoService进行测试。测试代码中有详细的注释。<br />
<pre><code>@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class DemoServiceTest {
    // 记录起始开始测试的时间
    private static long startTime;
    // 我们会在多个测试case中用到以下的成员，并且只需要初始化一次，
    // 因此我们定义为static的
    private static ACConfiguration config;  // 测试过程的配置信息，在cloudservice-conf.xml中配置
    private static AC ac;                   // 测试用的AC框架，正式环境由框架初始化，开发者不用关注
    private static DemoService demoService; // 我们开发的服务
    private static ACAccount account;       // 用于保存测试的帐号信息
    private static ACUserDevice light;      // 用于保存测试的设备信息

    // 在所有的test case执行前初始化一次
    @BeforeClass
    public static void setUp() throws Exception {
        try {
            // 这里初始化config对象
            config = new ACConfiguration(&quot;./package/config/cloudservice-conf.xml&quot;);
            ac = AC.getTestAc(config);          // 通过AC的接口获取用于测试的ac框架

            demoService = new DemoService();
            demoService.setEnv(ac, config);     // 需要调用该接口，将框架ac赋予demoService
            demoService.init();                 // 初始化demoService

            // 使用开发者权限创建一个测试账号
            try {
                account = ac.accountMgrForTest(ac.newContext()).register(&quot;test@MAX.cn&quot;, &quot;13100000000&quot;, &quot;pswd&quot;);
            } catch (ACServiceException e) {
                if (e.getErrorCode() == 3502) {
                    // 帐号已注册
                    account = ac.accountMgrForTest(ac.newContext()).login(&quot;test@MAX.cn&quot;, &quot;pswd&quot;);
                } else {
                    throw e;
                }
            }

            // 使用注册的测试账号绑定一个虚拟的测试设备
            light = ac.bindMgrForTest(ac.newContext()).bindDevice(config.getSubDomain(), &quot;12345678&quot;, &quot;light1&quot;, account.getUid());
            // 记录起始开始测试的时间
            startTime = System.currentTimeMillis();
        } catch (Exception e) {
            e.printStackTrace();
            fail(&quot;set up fail&quot;);
        }
    }


    @AfterClass
    public static void tearDown() throws Exception {
        // 执行完test后，需要解绑setUp绑定的测试设备，确保下次单测能顺利通过
        if (light != null &amp;&amp; account != null) {
            ac.bindMgrForTest(ac.newContext()).unbindDevice(config.getSubDomain(), light.getId(), account.getUid());
        }
    }

    @Test
    public void test1ControlLight() throws Exception {
        if (account == null || light == null)
            return;

        try {
            // 创建一个用户的context
            ACContext context = ac.newContext(account.getUid());
            // 添加一个灯的桩
            ac.addDeviceStub(config.getSubDomain(), new LightStub());

            // 下面构造client发送的请求参数
            ACMsg req = new ACMsg();
            req.setContext(context);            // 将上面用户的context传入
            req.setName(&quot;controlLight&quot;);        // 设置请求消息的名字
            req.put(&quot;deviceId&quot;, light.getId()); // 设置要控制灯的逻辑id
            req.put(&quot;action&quot;, &quot;on&quot;);            // &quot;on&quot;表示开灯

            // 构造响应消息，用于接收服务端返回的消息
            ACMsg resp = new ACMsg();
            // 这里直接调用服务的处理handler，驱动测试
            demoService.handleMsg(req, resp);
            // 服务发送消息给设备后，设备会将处理结果代码返回
            // 在我们实现的LightStub中，比较结果是否正确
            assertEquals(&quot;success&quot;, resp.get(&quot;result&quot;));
            // 成功打开灯之后，模拟设备进行数据上报
            try {
                ACDeviceMsg deviceMsg = new ACDeviceMsg(LightMsg.REPORT_CODE, new byte[]{LightMsg.ON, LightMsg.FROM_APP});
                // 这里直接调用服务的设备消息处理handler，驱动测试
                ACDeviceReportInfo reportInfo = new ACDeviceReportInfo();
                reportInfo.setContext(ac.newContext());
                reportInfo.setDeviceId(light.getId());
                reportInfo.setPhysicalDeviceId(light.getPhysicalId());
                demoService.handleDeviceMsg(reportInfo, deviceMsg);
            } catch (Exception e) {
                e.printStackTrace();
                fail(&quot;test light report fail&quot;);
            }
        } catch (ACServiceException e) {
            e.printStackTrace();
            fail(&quot;test control light fail&quot;);
        }
    }

    @Test
    public void test2LightReportAndQuery() throws Exception {
        if (account == null || light == null)
            return;

        // 先测试智能灯上报消息，将上报数据写入设备属性中
        try {
            ACDeviceMsg acDeviceMsg = new ACDeviceMsg(LightMsg.REPORT_CODE, new byte[]{LightMsg.ON, LightMsg.FROM_SWITCH});
            // 这里直接调用服务的设备消息处理handler，驱动测试
            ACDeviceReportInfo reportInfo = new ACDeviceReportInfo();
            reportInfo.setContext(ac.newContext());
            reportInfo.setDeviceId(light.getId());
            reportInfo.setPhysicalDeviceId(light.getPhysicalId());
            demoService.handleDeviceMsg(reportInfo, acDeviceMsg);
        } catch (ACServiceException e) {
            e.printStackTrace();
            fail(&quot;test light report fail&quot;);
        }

        // 这里用上面写入设备属性存储的数据来驱动测试app发来的数据查询请求处理handler
        try {
            List&lt;ACObject&gt; historyDatas = ac.dstore(ac.newContext())
                    .scanHistory(light.getId())
                    .startTime(true, startTime) //true为代表闭区间包含的意思
                    .endTime(true, System.currentTimeMillis())
                    .execute();
            if (historyDatas != null) {
                assertEquals(2, historyDatas.size());
                for (ACObject zo : historyDatas) {
                    System.out.println(zo.toString());
                    //获取设备的逻辑ID
                    long deviceId = zo.getLong(ACDStore.DEVICE_ID);
                    //获取设备属性历史记录的时间戳
                    long timestamp = zo.getLong(ACDStore.TIMESTAMP);
                    assertEquals(deviceId, light.getId());
                    assertTrue(timestamp &gt;= startTime &amp;&amp; timestamp &lt; System.currentTimeMillis());
                }
            }
        } catch (ACServiceException e) {
            e.printStackTrace();
            fail(&quot;test query history device data fail&quot;);
        }
    }
}
</code></pre></p>
<blockquote>
<p>注意：可以看到，所有的单元测试用例均是直接调用handleMsg或handleDeviceMsg驱动测试，无需编写或使用client工具。</p>
<p>此外，非常重要的一点，我们需要使用4.11及以上的junit，并且使用标签@FixMethodOrder(MethodSorters.NAME_ASCENDING)固定测试用例的执行顺序，因为我们的用例可能前后依赖。比如在test1ControlLight中写入数据，在后面的test case中会读取。因此，在为测试函数命名的时候，如果有前后依赖关系，需要考虑按ASCII字典序的命名规则。</p>
</blockquote>
<p>测试桩</p>
<p>从前面的场景分析我们知道，开发的DemoService会和灯交互，但是我们在开发服务的过程，很可能智能灯也在研发之中，还没有发布硬件产品。我们后端服务开发者不需要也不应该等待硬件设备开发完毕才做相应的功能测试。为此，MAX在服务开发框架中定义了设备桩ACDeviceStub的接口，开发者只需要依照此接口实现具体的设备桩即可。 示例的桩处理很简单，实际上你可以任意扩展，比如在桩中模拟灯的各种状态。示例代码如下：<br />
<pre><code>public class LightStub extends ACDeviceStub {
    private static final Logger logger = LoggerFactory.getLogger(LightStub.class);

    public void handleControlMsg(String majorDomain, String subDomain,
                                 ACDeviceMsg req, ACDeviceMsg resp) throws Exception {
        int code = req.getCode();
        if (code != LightMsg.CODE) {
            logger.warn(&quot;got an incorrect opcode[&quot; + code + &quot;]&quot;);
            return;
        }
        resp.setCode(LightMsg.RESP_CODE);
        resp.setContent(new byte[]{1, 0, 0, 0});
    }
}
</code></pre><br />
2 本地测试<br />
单元测试通过后，我们还需要进行集成测试，因为单元测试的过程，我们并没有真正启动开发的服务，某些场景或代码路径不一定覆盖全，比如网络通信部分、服务框架部分等。 由于大部分逻辑在单元测试阶段均做了，因此集成测试相对简单，大致步骤如下：</p>
<p>2.1 在本地机器或任意开发机上启动服务</p>
<p>按照本机启动DemoService小结的说明，通过运行start.cmd或start.sh启动服务。</p>
<p>注意</p>
<p>1、运行start.cmd或start.sh的条件。执行启动命令的目录的子目录的结构要求如下所示：<br />
<pre><code>/config
    /cloudservice-conf.xml
/lib
    /MAX-framework-1.5.6.jar
    /ac-java-api-1.6.3.jar
    /commons-collections-3.2.1.jar
    /commons-configuration-1.10.jar
    /commons-lang-2.6.jar
    /slf4j-api-1.7.7.jar
    /...
start.sh
start.cmd
</code></pre><br />
2、服务启动成功后，会在根目录下生成log的文件夹，进入该文件夹查看service.log文件。若能看到如下日志，说明服务已经启动成功，可以进入下一个步骤了。<br />
<pre><code>2015-09-08 17:37:47,047 INFO main:1 [ACServer.java:41:main] - Starting service...
2015-09-08 17:37:47,047 INFO main:1 [ACConfiguration.java:331:dumpConfig] - get config item[mode] value[test]
...
2015-09-08 17:37:47,047 INFO main:1 [Log.java:178:initialized] - Logging initialized @147ms
2015-09-08 17:37:47,047 INFO main:1 [Server.java:301:doStart] - jetty-9.1.5.v20140505
2015-09-08 17:37:47,047 INFO main:1 [AbstractConnector.java:266:doStart] - Started ServerConnector@4b27ad{HTTP/1.1}{0.0.0.0:8080}
2015-09-08 17:37:47,047 INFO main:1 [Server.java:350:doStart] - Started @206ms
2015-09-08 17:37:47,047 INFO main:1 [ACServer.java:80:main] - Start service DemoService ok.
</code></pre></p>
<blockquote>
<p>服务启动成功后，即可使用任意客户端进行访问，访问过程中会实时在service.log中生成日志。<br />
2.2 通过APP访问本机UDS</p>
</blockquote>
<p>查看UDS所在的主机局域网ip地址，将ip地址设置于APP以下接口中即可实现访问本机UDS服务。</p>
<p>以下为Android端的代码，需要配置的代码如下：<br />
<pre><code>//设置为访问本机UDS进行本地调试，参数为http://ip+&quot;:&quot;+port，在初始化后调用即可。
AC.setSendToLocalUDS(&quot;http://192.168.1.1:8080&quot;);
</code></pre></p>
<blockquote>
<p>注意：APP需要与UDS所在的主机处于同一局域网下<br />
2.3 通过curl请求访问本机UDS</p>
</blockquote>
<p>使用任意客户端发送http请求测试自己的接口正确性，例如用curl或自己开发的客户端都可以。以下详细介绍如何使用curl命令进行进一步测试。<br />
<pre><code>注：1、MAX提供的多种服务，其client和service之间的通信，底层采用http协议，方法为POST，因此任何能发送http请求的工具均可以用作服务测试的客户端。

2、 Linux 系统上如果没有 curl 则使用诸如 apt-get install curl（Ubuntu、Debian）或者 yum install curl（RedHat、Fedora）的方式来安装。 Windows 系统上安装 curl 的方法见这里。
</code></pre><br />
测试用的 curl 指令如下：</p>
<p>linux下使用curl命令<br />
<pre><code>curl -v -X POST -H &quot;Content-Type:application/x-zc-object&quot; -H &quot;X-Zc-Major-Domain:MAX&quot; -H &quot;X-Zc-Sub-Domain:test&quot; -H &quot;X-Zc-User-Id:1&quot; -d '{&quot;action&quot;:&quot;I am test&quot;}' 'http://localHost:8080/test'
</code></pre><br />
windows下使用curl命令请求<br />
<pre><code>curl -v -X POST -H &quot;Content-Type:application/x-zc-object&quot; -H &quot;X-Zc-Major-Domain:MAX&quot; -H &quot;X-Zc-Sub-Domain:test&quot; -H &quot;X-Zc-User-Id:1&quot; --data-ascii &quot;{\&quot;action\&quot;:\&quot;I am test\&quot;}&quot; &quot;http://localHost:8080/test&quot;
</code></pre><br />
简单解释一下上面的 curl 指令（更多 curl 用法请参考 curl 手册）：</p>
<ul>
<li>-v 表示 verbose 即显示 HTTP 通信交互详情。</li>
<li>-x POST 表示使用 HTTP POST 方法。</li>
<li>-H 表示 HTTP 请求头。</li>
<li>&ndash;data-ascii 表示本请求的 HTTP body 格式是 ASCII。 其余经常用到的格式还有 &ndash;data-binary，即按照字节流（octet stream）来发送请求；具体使用请参考 curl 手册，此处不赘述。</li>
<li>&ldquo;<a href="http://localHost:8080/test">http://localHost:8080/test</a>&rdquo; 表示给本地 8080 端口运行的UDS服务的 test 方法发送请求。 8080 是UDS Demo本地默认的端口号，见 /config 文件夹下的 cloudservice-conf.xml 文件，<service> <port> 配置。 test 方法是专供测试使用的一个方法，什么动作都不会触发，只回复一个空HTTP响应（没有任何 payload 的 HTTP 响应）表示请求被正常处理。</li>
</ul>
<p>发送了上述 curl 指令后，开发者应该可以在控制台上看到类似下面的响应。<br />
<pre><code>&lt; HTTP/1.1 200 OK
&lt; Content-Type: application/x-zc-object
&lt; X-Zc-Msg-Name: X-Zc-Ack
&lt; Content-Length: 0
</code></pre><br />
其中：</p>
<ul>
<li>200 是 HTTP 返回码（表示 HTTP 请求正常返回）；</li>
<li>X-Zc-Msg-Name 是 MAX 服务框架自定义的 HTTP 请求头，当此值等于 X-Zc-Ack 时表示请求被正常处理（反之，如果是 X-Zc-Err 则表示出现了错误，并会附带错误码和错误详情）；<br />
至此，我们已完成了本地运行 UDS demo 和发送 curl 指令进行测试。</li>
</ul>
<p>3 单步调试</p>
<p>集成测试过程中，你可能还需要对UDS服务进行单步调试以解决定位到更具体的问题，此处截图以Intellij idea为例。</p>
<blockquote>
<p>注意：使用单步调试需要更新java sdk到1.4.0以上<br />
1.点击上方的三角形按钮后，点击Edit Configurations&hellip;<br />
<img alt="" src="///E://work/frontwork/ngx-os/images/1.png" /></p>
</blockquote>
<p>出现如下小窗口后，点击左上角＋号，选择Application<br />
<img alt="" src="///E://work/frontwork/ngx-os/images/2.png" /></p>
<p>可以看到如下页面，Name默认为Unnamed，修改为工程名字，如DemoService，同时编辑Main Class，输入com.MAX.cloudservice.ACServer，最后确认Use classpath of module项为你的工程的module，点击OK按钮<br />
<img alt="" src="///E://work/frontwork/ngx-os/images/3.png" /></p>
<p>下面可以开始debug你的工程了，首先在您的工程代码处设置断点<br />
<img alt="" src="///E://work/frontwork/ngx-os/images/4.png" /></p>
<p>设置完断点后，点击上方小甲虫按钮，可以看到IntelliJ下方出现的Debug工具栏，并有&rdquo;Connected to the target VM,address&hellip;&rdquo;字样，说明该工程已经进入debug模式<br />
<img alt="" src="///E://work/frontwork/ngx-os/images/5.png" /></p>
<p>进入debug模式后，您需要通过终端发送指令驱动您的工程，进入接口测试<br />
<img alt="" src="///E://work/frontwork/ngx-os/images/6.png" /></p>
<p>发送控制指令成功后，可以看到Debug工具栏会自动进入到断点处，可以看到终端发送请求的参数等，如下图所示，点击Debug栏的向下执行按钮（或快捷键F8）继续往下执行<br />
<img alt="" src="///E://work/frontwork/ngx-os/images/7.png" /></p>
<p>Debug过程中，可以看到终端阻塞着等待程序的处理结果，如下图<br />
<img alt="" src="///E://work/frontwork/ngx-os/images/8.png" /></p>
<p>切换到IntelliJ，继续点击向下执行，进入ACServletHandler.class的this.writeResp(reqMsg,resp)后，可以看到终端会自动出现程序处理后的返回结果，调试结束<br />
<img alt="" src="///E://work/frontwork/ngx-os/images/9.png" /></p>
<h5 id='4.2.3.5'>UDS访问外网示例</h5>

<p>UDS运行于MAX云端的内部环境中，可以使用MAX提供的正向代理服务（由类ACHttpClient提供访问接口）访问外部网络。</p>
<p>1 GET<br />
<pre><code>@Test
public void testGet() {
    ACHttpClient client = null;
    try {
        //获取访问外网的ACHttpClient客户端
        client = ac.getHttpClient(&quot;http://apis.baidu.com/apistore/aqiservice/aqi?city=%E5%8C%97%E4%BA%AC&quot;);
        //默认为GET方法
        client.setRequestMethod(&quot;GET&quot;);
        //默认超时时间为5000
        client.setConnectTime(5000);
        //设置访问外网头域
        client.setHeader(&quot;apikey&quot;, &quot;caf46348383a17f6070e0bda0e361a28&quot;);
        //连接url
        client.connect();
        //MAX签名认证失败
        if (client.getResponseCode() == HttpURLConnection.HTTP_OK) {
            assertEquals(client.getResponseMessage(), &quot;OK&quot;);
            //通过getData()或getInputStream()获取response,不能同时一起调用
        }
        client.disconnect();
    } catch (IOException e) {
        if (client != null)
            client.disconnect();
        fail(e.toString());
    }
}
</code></pre><br />
2 POST<br />
<pre><code>@Test
public void testPost() {
    ACHttpClient client = null;
    try {
        String body = &quot;fromdevice=pc&amp;clientip=10.10.10.0&amp;detecttype=LocateRecognize&amp;languagetype=CHN_ENG&amp;imagetype=1&amp;image=/9j/4AAQSkZJRgABAQEAYABgAAD/2wBDABMNDxEPDBMREBEWFRMXHTAfHRsbHTsqLSMwRj5KSUU+RENNV29eTVJpU0NEYYRiaXN3fX59S12Jkoh5kW96fXj/2wBDARUWFh0ZHTkfHzl4UERQeHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHj/wAARCAAfACEDAREAAhEBAxEB/8QAGAABAQEBAQAAAAAAAAAAAAAAAAQDBQb/xAAjEAACAgICAgEFAAAAAAAAAAABAgADBBESIRMxBSIyQXGB/8QAFAEBAAAAAAAAAAAAAAAAAAAAAP/EABQRAQAAAAAAAAAAAAAAAAAAAAD/2gAMAwEAAhEDEQA/APawEBAQEBAgy8i8ZTVV3UY6V1eU2XoWDDZB19S646Gz39w9fkKsW1r8Wm2yo1PYis1be0JG9H9QNYCAgc35Cl3yuVuJZl0cB41rZQa32dt2y6OuOiOxo61vsLcVblxaVyXD3hFFjL6La7I/sDWAgICAgICB/9k=&quot;;
        //获取访问外网的ACHttpClient客户端
        client = ac.getHttpClient(&quot;http://apis.baidu.com/apistore/idlocr/ocr&quot;);
        //默认为GET方法
        client.setRequestMethod(&quot;POST&quot;);
        //默认超时时间为5000
        client.setConnectTime(5000);
        //设置访问外网头域
        client.setHeader(&quot;Content-Type&quot;, &quot;application/x-www-form-urlencoded&quot;);
        client.setHeader(&quot;apikey&quot;, &quot;caf46348383a17f6070e0bda0e361a28&quot;);
        //连接url
        client.connect();
        //设置访问外网消息体
        client.setEntity(body.getBytes(&quot;UTF-8&quot;));
        //获取服务器返回的数据
        if (client.getResponseCode() == HttpURLConnection.HTTP_OK) {
            assertEquals(client.getResponseMessage(), &quot;OK&quot;);
            //通过getData()或getInputStream()获取response,不能同时一起调用
        }
        client.disconnect();
    } catch (IOException e) {
        if (client != null)
            client.disconnect();
        e.printStackTrace();
    }
}
</code></pre><br />
<h5 id='4.2.3.6'>定时任务Demo</h5><br />
本小结介绍一个MAX云端定时任务示例。</p>
<p>一个完整的云端定时任务由两部分组成：</p>
<p>1.定时规则：定义任务的执行时间。</p>
<p>MAX支持Crontab格式的时间定义（详见：Crontab定时规则）。</p>
<p>2.定时任务可执行程序</p>
<p>其中，定时规则是由开发者在MAX控制台中创建定时任务时设置。本小结介绍的示例是开发定时任务的可执行程序。</p>
<p>1 场景介绍<br />
本示例的可执行程序完成的任务仅是打印一条日志：任务执行的实际时间。</p>
<p>在MAX控制台中创建该定时任务时，设置的定时规则是“<em>/2 * </em> * *”，表示每隔2分钟执行一次本任务。</p>
<p>2 实现思路<br />
按要求从ACCronJob派生子类型，在派生类中实现父类定义的抽象方法ACCronJob::run；<br />
通过MAX控制台创建定时任务，设置任务的定时规则；<br />
通过MAX控制台上传任务的可执行程序，创建定时任务的版本，然后“上线”该版本以启动该定时任务。<br />
3 可执行程序的具体实现<br />
下文示例中，DemoCronJob是ACCronJob的派生类型，并且实现了父类定义的抽象方法ACCronJob::run。<br />
<pre><code>package  com.MAX.demo;

import com.MAX.service.ACCronJob;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class DemoCronJob extends ACCronJob {
    // 日志工具
    private static final Logger logger = LoggerFactory.getLogger(DemoCronJob.class);

    @Override
    public int run() throws Exception {
        // 在日志中记录任务的执行时间
        logger.info(&quot;任务执行时间：&quot; + new java.util.Date().toString() + &quot;。&quot;);
        return 0;   // 返回状态码0,表示任务执行成功。
    }
}
</code></pre><br />
<h5 id='4.2.3.7'>用户定时任务示例</h5><br />
定时任务支持定时调用UDS的接口</p>
<p>1 示例场景<br />
每天19:00查询当地空气质量，如果空气质量差，则打开空气净化器</p>
<p>2 UDS程序示例<br />
<pre><code>package com.MAX.demo;

import com.MAX.common.*;
import com.MAX.service.AC;
import com.MAX.service.ACService;
import com.MAX.service.ACWeatherMgr;

import java.util.List;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * Created by chenpeng on 15-1-17.
 */
public class DemoService extends ACService {
    private static final Logger logger = LoggerFactory.getLogger(DemoService.class);

    /**
     * 处理来自APP或其它service发来消息的入口函数
     *
     * @param req  请求消息
     * @param resp 响应消息
     * @throws Exception
     */
    public void handleMsg(ACMsg req, ACMsg resp) throws Exception {
        ACContext ctx = req.getContext();
        String name = req.getName();
        try {
            switch (name) {
                case &quot;openAir&quot;:
                    handleOpenAirMsg(req, resp);
                    logger.info(String.format(&quot;[%s][%d][%s] success&quot;, ctx.getTraceId(), ctx.getUserId(), name));
                    resp.setAck();
                    break;
                default:
                    logger.warn(&quot;got an invalid request, method[&quot; + name + &quot;] is not implemented.&quot;);
                    resp.setErr(Errors.ERR_MSG_NOT_SUPPORTED.code, Errors.ERR_MSG_NOT_SUPPORTED.error);
                    break;
            }
        } catch(ACServiceException e) {
            logger.info(String.format(&quot;[%s][%d][%s] error: %d, %s&quot;, ctx.getTraceId(), ctx.getUserId(), name, e.getErrorCode(), e.getErrorMsg()));
            resp.setErr(e.getErrorCode(), e.getErrorMsg());
        }
    }

    private void handleOpenAirMsg(ACMsg req, ACMsg resp) throws Exception {
        ACContext ctx = req.getContext();
        ACObject params = req.get(&quot;params&quot;); //获取用户自定义参数
        String area = params.get(&quot;area&quot;); //获取区域
        long deviceId = params.get(&quot;deviceId&quot;); //获取设备Id
        logger.info(String.format(&quot;handle open air msg: area[%s], deviceId[%d]&quot;, area, deviceId));
        ...
    }

    private void openAirDevice(long deviceId, int pm25) throws Exception {
        logger.info(String.format(&quot;open air device: deviceId[%d], pm25[%d]&quot;, deviceId, pm25));
    }

    public void handleDeviceMsg(ACDeviceReportInfo reportInfo, ACDeviceMsg req) throws Exception {
    }
}
</code></pre><br />
3 APP端SDK接口调用示例<br />
<pre><code>ACUserTask task = new ACUserTask();
//设置任务时间周期
task.setTimeCycle(&quot;day&quot;);
//设置任务执行的时间点，由于时间周期为天，所以只有19点精确到小时以后为有效参数，日期设置无效，即在每天19点执行任务
task.setTimePoint(&quot;2000-01-01 19:00:00&quot;);
//设置任务名称
task.setName(&quot;open-air-device&quot;);
//设置任务描述，选填
task.setDescription(&quot;open air device&quot;);

//具体发送到uds的消息指令,与sendToService参数类似,接口名及参数由UDS实际提供为主
ACMsg req = new ACMsg();
req.setName(&quot;openAir&quot;);
req.put(&quot;area&quot;, &quot;北京&quot;);
req.put(&quot;deviceId&quot;, 1L);
//ACUserCommand参数分别为子域名，服务名，请求参数，默认发送到UDS最新版本号
ACUserCommand command = new ACUserCommand(subDomain, serviceName, req);
task.setUserCommand(command);
timerMgr.addTask(task, new PayloadCallback&lt;ACUserTask&gt;() {
     @Override
     public void success(ACUserTask task) {
         //成功添加定时任务，创建后默认为开启状态
     }

     @Override
     public void error(ACException e) {
         //网络错误或其他，根据e.getErrorCode()做不同的提示或处理，此处一般为参数类型错误，请仔细阅读注意事项
     }
});
</code></pre><br />
<h3 id='4.3'>云对接开发</h3><br />
<h4 id='4.3.1'>云对接Java SDK简介</h4><br />
1 功能与目的<br />
MAX提供了Java语言版本的云对接SDK，包括访问MAX云端服务的API，适合于开发与第三方云或开发者已有业务系统对接的服务或模块。</p>
<p>2 主要功能</p>
<table>
<thead>
<tr>
<th>序号</th>
<th>功能名称</th>
<th>详细内容</th>
</tr>
</thead>
<tbody>
<tr>
<td>1.</td>
<td>定时任务</td>
<td>可定时触发的自定义定时任务</td>
</tr>
<tr>
<td>2.</td>
<td>消息交互</td>
<td>与设备端、APP端进行消息交互通信</td>
</tr>
<tr>
<td>3.</td>
<td>账号管理</td>
<td>支持管理用户基本信息并及时做出操作</td>
</tr>
<tr>
<td>4.</td>
<td>设备管理</td>
<td>支持管理设备的基本信息并及时做出操作</td>
</tr>
<tr>
<td>5.</td>
<td>设备属性</td>
<td>MAX提供的用于处理及存储设备上报数据的服务</td>
</tr>
<tr>
<td>6.</td>
<td>存储服务</td>
<td>MAX提供的类似数据库的通用数据存储服务</td>
</tr>
<tr>
<td>7.</td>
<td>文件存储</td>
<td>对常见的文件/图片类等大文件进行上传下载</td>
</tr>
<tr>
<td>8.</td>
<td>排行榜</td>
<td>支持按照不同周期、数据获取数据排行</td>
</tr>
<tr>
<td>9.</td>
<td>推送服务</td>
<td>对APP进行消息推送</td>
</tr>
<tr>
<td>10.</td>
<td>用户意见反馈</td>
<td>支持快速开发用户意见反馈页</td>
</tr>
<tr>
<td>11.</td>
<td>短信服务</td>
<td>向当前注册用户发送自定义短信消息</td>
</tr>
<tr>
<td>12.</td>
<td>天气服务</td>
<td>支持快速获取PM2.5、天气/空气质量等常用天气信息</td>
</tr>
</tbody>
</table>
<h4 id='4.3.2'>开发准备</h4>

<p>要求使用JDK v1.7及以上的版本。</p>
<p>1 MAX环境配置<br />
建议ACConfig及AC在实例化时做全局单例处理。</p>
<p>1.1 ACConfig</p>
<p>ACConfig是抽象类，要求开发者在实际应用中提供关于ACConfig的具体实现。 本SDK定义的配置信息如下：<br />
<pre><code>/**
 * MAX Java API配置信息。
 * &lt;p/&gt;
 * ACConfig是一个抽象类。开发者应依据具体应用场景的需求，提供本抽象类的实现。
 */
public abstract class ACConfig {
    public static final String TEST_MODE       = &quot;test&quot;;        /// 运行模式：测试模式。
    public static final String PRODUCTION_MODE = &quot;production&quot;;  /// 运行模式：生产模式。

    // 需要重载的抽象方法。

    /**
     * 取开发者在MAX平台上的帐号的ID（可登录MAX管理控制台查看）。
     *
     * @return 返回开发者帐号的ID。
     */
    public abstract long getDeveloperId();

    /**
     * 取开发者在MAX平台上对应的主域的名字（可登录MAX管理控制台查看）。
     *
     * @return 开发者的主域的名字。
     */
    public abstract String getMajorDomain();

    /**
     * 取运行模式：ACConfig.TEST_MODE 或 ACConfig.PRODUCTION_MODE。
     *
     * @return 返回运行模式：ACConfig.TEST_MODE 或 ACConfig.PRODUCTION_MODE。
     */
    public abstract String getMode();

    // 下列方法均有默认的实现，开发者可选择性地重载。

    /**
     * 取服务所关联的子域的名字。
     *
     * @return 缺省情况下返回空字符串。
     */
    public String getSubDomain() {
        return &quot;&quot;;
    }

    /**
     * 设置开发者密钥对。
     *
     * @param ak Access Key。
     * @param sk Secret Key。
     */
    public void setAuthKeyPair(String ak, String sk) {
        synchronized (lockOfAuthKeyPair) {
            authAccessKey = ak;
            authSecretKey = sk;
        }
    }

    /**
     * 取开发者密钥对中的Access Key（可登录MAX管理控制台查看）。
     *
     * @return 开发者密钥对中的Access Key。
     */
    public String getAuthAccessKey() {
        synchronized (lockOfAuthKeyPair) {
            return authAccessKey;
        }
    }

    /**
     * 取开发者密钥对中的Secret Key（可登录MAX管理控制台查看）。
     *
     * @return 开发者密钥对总的Secret Key。
     */
    public String getAuthSecretKey() {
        synchronized (lockOfAuthKeyPair) {
            return authSecretKey;
        }
    }

    /**
     * 设置MAX云端服务的入口地址。
     *
     * @param addrs 可以用英语逗号（,）分隔多个地址。如：&quot;192.168.0.1:5000&quot;，或者&quot;192.168.0.1:5000,192.168.0.2:5000&quot;，
     *              或者&quot;http://192.168.0.1:5000&quot;，或者&quot;http://192.168.0.1:5000,https://192.168.0.2:5000&quot;，或者&quot;192.168.0.1:5000,https://192.168.0.2:5000&quot;。
     *              如果地址中没有指定协议（http或者https），则使用http协议。
     */
    public void setRouterAddr(String addrs) {
        synchronized (lockOfRouterAddress) {
            routerAddresses = addrs;
        }
    }

    /**
     * 取MAX云端服务的入口地址。
     *
     * @return 返回的地址的格式是：http://host:port 或 https://host:port。
     */
    public String getRouterAddr() {
        synchronized (lockOfRouterAddress) {
            if (routerAddresses == null || routerAddresses.isEmpty())
                return &quot;&quot;;

            // 随机取一个地址
            String[] routerList = routerAddresses.split(&quot;,&quot;);
            int routerIdx = random.nextInt(routerList.length);
            String addr = routerList[routerIdx].trim();
            if (!addr.startsWith(&quot;http://&quot;) &amp;&amp; !addr.startsWith(&quot;https://&quot;))
                addr = &quot;http://&quot; + addr;
            return addr;
        }
    }

    /**
     * 设置代理服务的入口地址。
     *
     * @param addrs 可以用英语逗号（,）分隔多个地址。如：&quot;192.168.0.1:5000&quot;，或者&quot;192.168.0.1:5000,192.168.0.2:5000&quot;，
     *              或者&quot;http://192.168.0.1:5000&quot;，或者&quot;http://192.168.0.1:5000,https://192.168.0.2:5000&quot;，或者&quot;192.168.0.1:5000,https://192.168.0.2:5000&quot;。
     *              如果地址中没有指定协议（http或者https），则使用http协议。
     */
    public void setProxyAddr(String addrs) {
        synchronized (lockOfProxyAddress) {
            proxyAddresses = addrs;
        }
    }

    /**
     * 取代理服务的入口地址。
     *
     * @return 返回的地址的格式是：http://host:port 或 https://host:port。
     */
    public String getProxyAddr() {
        synchronized (lockOfProxyAddress) {
            if (proxyAddresses == null || proxyAddresses.isEmpty())
                return &quot;&quot;;

            // 随机取一个地址
            String[] proxyList = proxyAddresses.split(&quot;,&quot;);
            int routerIdx = random.nextInt(proxyList.length);
            String addr = proxyList[routerIdx].trim();
            if (!addr.startsWith(&quot;http://&quot;) &amp;&amp; !addr.startsWith(&quot;https://&quot;))
                addr = &quot;http://&quot; + addr;
            return addr;
        }
    }

    public int getAuthTimeout() {
        return 5000;
    }

    public int getClientTimeout() {
        return 5000;
    }

    public int getRetryCount() {
        return 1;
    }
}
</code></pre><br />
<em> 开发UDS时，SDK内部提供了ACConfig的实现，所以开发者只需要配置cloudservice-conf.xml中的参数即可，无需再实现ACConfig。<br />
</em> 非UDS在实现ACConfig抽象类之后，即可以通过AC ac = new ACCloud(config)获取AC实例，从而通过AC调用各个通用模块接口。AC的具体接口如下所示。</p>
<p>1.2 AC</p>
<p>AC实际上是MAX对抽象服务框架的具体实现，其实现过程对开发者透明。通过AC，开发者可以根据需要获取一系列内嵌服务的功能接口。AC的定义如下：<br />
<pre><code>public abstract class AC {
    protected ACConfiguration config;

    /**
     * 构建一个开发者上下文
     * @return
     */
    public ACContext newContext() {}

    /**
     * 构建一个用户上下文，由于是框架创建的，因此也会带着开发者信息，一般用于单测
     * @param userId
     * @return
     */
    public ACContext newContext(long userId) {}

    /**
     * 构建一个用于数据查询的过滤器
     *
     * @return
     */
    public ACFilter filter(){}

    /**
     * 用于对数据分类进行具体的操作，如create/find/delete/update/scan等
     *
     * @param className     要操作的分类名
     * @param context       要进行操作的开发者context
     * @return
     */
    public abstract ACStore store(String className, ACContext context);

    /**
     * 则用于创建数据分类/清空数据等操作。
     * 用于测试之用。
     *
     * @return
     */
    public abstract ACStoreForTest storeForTest(ACContext context);

    /**
     * 往某一服务发送命令/消息
     *
     * @param subDomain 该服务所在产品名
     * @param name      服务名
     * @param version   服务版本
     * @param req       具体的消息内容，此处req无需构造ACContext
     * @return 服务端相应的消息
     * @throws Exception
     */
    public abstract ACMsg sendToService(String subDomain, String name, int version, ACMsg req) throws Exception;

    /**
     * 往JD service发送命令/消息,上报设备上的所有Stream点到JINGDONG Service
     *
     * @param context          设备的上下文，其中uid字段为系统填充
     * @param physicalDeviceId 设备的物理id
     * @param req              请求消息体(Stream数组)
     * @return 服务端相应的消息
     * @throws Exception
     */
    public abstract ACMsg sendToJDService(ACContext context, String physicalDeviceId, List&lt;ACJDMsg&gt; req) throws Exception;

    /**
     * 由于uds本身无法访问正常的外网服务，所以MAX内部实现了正向代理，并提供ACHttpClient访问外网服务
     *
     * @param url 访问外网的url
     * @return ACHttpClient
     * @throws IOException
     */
    public abstract ACHttpClient getHttpClient(String url) throws IOException;

    /**
     * 获取帐号管理器。开发者组实现自定义服务时，
     * 可以调用ACAccountMgr提供的各个通用接口
     *
     * @param context   开发者的context
     * @return
     */
    public abstract ACAccountMgr accountMgr(ACContext context);

    /**
     * 获取用于单元测试的帐号管理器，可以注册用户等
     *
     * @param context   开发者的context
     * @return
     */
    public abstract ACAccountMgrForTest accountMgrForTest(ACContext context);

    /**
     * 获取设备绑定管理器。开发者在实现自定义服务时，
     * 可以调用ACBindMgr提供的各个通用接口
     *
     * @param context 用户的context
     * @return
     */
    public abstract ACBindMgr bindMgr(ACContext context);

    /**
     * 获取用于单元测试的设备绑定管理器，可以绑定/解绑设备等
     *
     * @param context 用户的context
     * @return
     */
    public abstract ACBindMgrForTest bindMgrForTest(ACContext context);

    /**
     * 获取推送通知管理器，可以给用户发送通知消息
     *
     * @param context   开发者的context
     * @return
     */
    public abstract ACNotificationMgr notificationMgr(ACContext context);

    /**
     * 获取用于单元测试的推送通知管理器
     *
     * @param context 开发者的context
     * @return
     */
    public abstract ACNotificationMgrForTest notificationMgrForTest(ACContext context);

    /**
     * 获取定时管理器，可以定时给设备发送消息
     *
     * @param context 开发者的context
     * @return
     */
    public abstract ACTimerTaskMgr timerTaskMgr(ACContext context);

    /**
     * 获取用于单元测试的定时管理器
     *
     * @param context 开发者的context
     * @return
     */
    public abstract ACTimerTaskMgrForTest timerTaskMgrForTest(ACContext context);

    /**
     * 获取数据分析管理器
     *
     * @param context 开发者的context
     * @return
     */
    public abstract ACInspireMgr inspireMgr(ACContext context);

    /**
     * 获取文件管理器，可以上传下载文件。
     * 注意：当前版本的ACFileMgr适用于直接连接互联网的服务器环境，而不适于在UDS中使用。
     *
     * @param context 开发者的context
     * @return
     */
    public abstract ACFileMgr fileMgr(ACContext context);

    /**
     * 获取天气管理器，可以获取pm25,空气质量等相关天气信息
     *
     * @param context 开发者的context
     * @return
     */
    public abstract ACWeatherMgr weatherMgr(ACContext context);

    /**
     * 取设备管理器。
     *
     * @param context  开发者的context
     * @return ACWarehouseMgr对象的实例。
     */
    public abstract ACWarehouseMgr warehouseMgr(ACContext context);

    /**
     * 取产品管理器。
     *
     * @param context 开发者的context
     * @return ACProductMgr实例。
     */
    public abstract ACProductMgr productMgr(ACContext context);

    /**
     * 取用户反馈意见管理器。
     *
     * @param context 开发者的context
     * @return ACFeedbackMgr实例。
     */
    public abstract ACFeedbackMgr feedbackMgr(ACContext context);

    /**
     * 为便于测试，开发者可实现一个服务的桩
     * 在框架中添加一个服务桩，即mock
     *
     * @param name  服务名
     * @param stub  服务桩的实现，实际上也是一个ACService
     */
    public abstract void addServiceStub(String name, ACService stub);

    /**
     * 为便于测试，开发者可实现一个设备的桩
     *
     * @param subDomain     设备所属子域
     * @param stub          设备桩
     */
    public abstract void addDeviceStub(String subDomain, ACDeviceStub stub);

    /**
     * 获取用于单元测试的服务框架ac
     * @param config    单元测试环境构造的config
     * @return
     * @throws Exception
     */
    public static final AC getTestAc(ACConfiguration config) throws Exception {}
}
</code></pre></p>
<blockquote>
<p>注意：由于开发者具有超级权限，所以MAX除了提供正常的服务管理器接口外，还提供一些用于单元测试的管理器接口，如ac.accountMgrForTest(ac.newContext())</p>
</blockquote>
<h4 id='4.3.3'>开发指南</h4>

<h5 id='4.3.3.1'>帐号管理</h5>

<p>开发者可直接使用MAX平台帐号服务管理用户，也可以将已有帐号系统或其它平台（如QQ、微博等）用户对接至MAX平台。MAX平台将开发者自有帐号系统或来自其它平台的用户统一视为来自第三方平台的用户。</p>
<p>1 用户注册<br />
1.1 直接注册用户</p>
<p>可以使用电子邮箱或手机号直接注册用户。<br />
<pre><code>// 实例化ACAccountMgr对象
ACAccountMgr accountMgr = ac.accountMgr(ac.newContext());
// 给用户发送注册验证码
// 参数account为字符串，是用户的电子邮箱或手机号，也是用户注册后的登录帐号。
// 参数template是拟采用的消息模板的编号。
// 参数timeout是验证码的有效时长。单位为秒。
accountMgr.sendVerifyCode(account, template, timeout);
// 注册帐号
// 参数name是用户的昵称；
// 参数email和phone分别指用户的电子邮件及手机号。这两个参数至少需指定一个，以作为用户的登录名。两者俱备时任意一个都可用作登录名；
// 参数password是登录密码；
// 参数verifyCode是验证码。
ACAccount user = accountMgr.register(name, email, phone, password, verifyCode);
</code></pre></p>
<blockquote>
<p>注：向用户发送手机或邮箱验证码时，要求开发者在MAX平台已经配置了对应的消息模板等参数。此外，对于向同一用户发送手机短信息有频次限制。</p>
</blockquote>
<p>1.2 第三方平台用户注册</p>
<p>来自第三方平台的用户使用其OpenID及平台标识符注册帐号。如微信平台的标识符可为&rdquo;weixin&rdquo;。如果是开发者自有的帐号系统，则推荐使用开发者在MAX平台上的主域名作为平台的标识符，用户的OpenID可以使用其在原系统中的ID等能唯一标识其身份的值。<br />
<pre><code>// 实例化ACAccountMgr对象
ACAccountMgr accountMgr = ac.accountMgr(ac.newContext());
// 注册帐号
// 第一个参数指定第三方平台；
// 参数openId是用户在第三方平台的标识附；
// 参数unionId是可选参数。针对微信用户，该参数可以用来识别因关注不同公众号而具有不同OpenID的同一用户。
ACAccount user = accountMgr.registerWithOpenId(ACThirdPlatform.WEIXIN, openId, unionId);
</code></pre><br />
2 用户登录<br />
直接注册的用户使用帐号密码登录，第三方平台用户则使用OpenID登录。</p>
<p>2.1 帐号密码登录<br />
<pre><code>// 实例化ACAccountMgr对象
ACAccountMgr accountMgr = ac.accountMgr(ac.newContext());
// 使用帐号密码登录
ACAccount user = accountMgr.login(account, password);
</code></pre><br />
2.2 第三方平台用户登录<br />
<pre><code>// 实例化ACAccountMgr对象
ACAccountMgr accountMgr = ac.accountMgr(ac.newContext());
// 使用OpenID登录
// 第一个参数指定第三方平台；
// 参数openId是用户在第三方平台的标识附。
ACAccount user = $accountMgr-&gt;loginWithOpenId(ACThirdPlatform.WEIXIN, openId);
</code></pre><br />
3 绑定手机号<br />
针对第三方平台用户，MAX只能自动获取其OpenID信息，用户的其它信息需要开发者或用户额外提供。如为安全起见，可以验证并绑定用户的手机。</p>
<p>向用户的手机发送验证码<br />
<pre><code>// 获取账号管理对象
ACAccountMgr accountMgr = ac.accountMgr(ac.newContext());
// 发送验证码
// 参数phone为字符串，是用户的手机号。
// 参数template是拟采用的短信模板的编号。
// 参数timeout是验证码的有效时长。单位为秒。
String verifyCode = accountMgr.sendVerifyCode(phone, template, timeout);
</code></pre></p>
<blockquote>
<p>注：向用户发送手机验证码时，要求开发者在MAX平台已经配置了手机短信息模板等参数，并且对于向同一用户发送手机短信息有频次限制。</p>
</blockquote>
<p>根据验证码绑定用户的手机<br />
<pre><code>ACAccountMgr accountMgr = ac.accountMgr(ac.newContext());
// 获取用户对象
// 修改用户手机号
// 来自第三方平台的用户在MAX帐号服务中没有密码，参数password可以使用空字符串。
accountMgr.changePhone(userId, phone, verifyCode, password);
</code></pre><br />
4 用户帐号的附加属性<br />
设置用户帐号的附加属性</p>
<p>设置帐号的附加属性之前，应通过开发者管理控制台定义帐号的附加属性列。<br />
<pre><code>// 实例化ACAccountMgr对象
ACAccountMgr accountMgr = ac.accountMgr(ac.newContext());
// 设置帐号的附加属性。附加属性以键值对组成的ACObject对象保存，记为profile。
accountMgr.setUserProfile(userId, profile);
</code></pre><br />
获取用户帐号的附加属性<br />
<pre><code>// 实例化ACAccountMgr对象
ACAccountMgr accountMgr = ac.accountMgr(ac.newContext());
// 获取用户的附加属性
ACObject profile  = accountMgr.getUserProfileById(userId);
</code></pre><br />
5 获取用户的OpenID<br />
已知用户在MAX平台上的ID的条件下，可以获取用户来自第三方平台的OpenID。<br />
<pre><code>// 实例化ACAccountMgr对象
ACAccountMgr accountMgr = ac.accountMgr(ac.newContext());
// 获取用户的OpenID。
// 第一个参数指定第三方平台；
// 参数userId是用户在MAX平台上的ID；
String openId = accountMgr.getUserOpenId(ACThirdPlatform.WEIXIN, userId);
</code></pre><br />
<h5 id='4.3.3.1'>设备管理</h5><br />
1 设备管理模型简介<br />
MAX平台区分设备的管理员用户与非管理员用户。第一个绑定设备的用户就是设备的管理员用户。其他用户要绑定设备需要得到管理员用户的授权，比如通过管理员发放的分享码来绑定设备。 普通用户可以也仅可以主动解除自己与设备的绑定关系。管理员用户可以解除任意用户（包括自己）与设备的绑定关系。而且，如果管理员用户解除了自己与设备的绑定关系，那么同时也会解除设备与其他所有用户的绑定关系。</p>
<p>1.1 设备绑定</p>
<p>直接绑定<br />
<pre><code>// 实例化ACBindMgr对象
ACBindMgr bindMgr = ac.bindMgr(ac.newContext());
// 根据设备物理ID绑定设备
// 参数subDomain是设备所属的子域的名字；
// 参数physicalId是设备的物理ID；
// 参数name是设备绑定后的显示名称；
// 参数userId是要绑定设备的用户的ID。
ACUserDevice device = bindMgr.bindDevice(subDomain, physicalId, name, userId);
</code></pre><br />
通过分享码绑定<br />
<pre><code>// 实例化ACBindMgr对象
ACBindMgr bindMgr = ac.bindMgr(ac.newContext());
// 通过分享码绑定设备。参数shareCode即是设备分享码。
ACUserDevice device = bindMgr.bindDeviceWithShareCode(shareCode, userId);
</code></pre><br />
1.2 设备分享</p>
<p>设备分享是指以设备的管理员用户的身份调用MAX平台的接口生成设备的分享码，其它用户凭借该分享码绑定设备。<br />
<pre><code>// 实例化ACBindMgr对象
ACBindMgr bindMgr = ac.bindMgr(ac.newContext());
// 获取分享码
// 参数deviceId是要被分享的设备的逻辑ID；
// 参数adminUserId是设备的管理员用户的ID；
// 参数timeout是设备的分享码的有效时长，单位是秒。
String shareCode = bindMgr.getShareCode(deviceId, adminUserId, timeout);
</code></pre><br />
1.3 设备解绑</p>
<p>MAX平台区分设备的管理员用户及非管理员用户。如果管理员用户解除了与设备的绑定关系，那么MAX将自动解除其他用户与设备的绑定关系。<br />
<pre><code>// 实例化ACBindMgr
ACBindMgr bindMgr = ac.bindMgr(ac.newContext());
// 解绑设备
// subDomain是设备所属子域的名字；
// deviceId是被解邦设备的逻辑ID；
// userId是要解邦设备的用户的ID。
bindMgr.unbindDevice(subDomain, deviceId, userId);
</code></pre><br />
<h5 id='4.3.3.1'>设备属性</h5><br />
设备属性数据存储指的是设备上报数据的存储，Matrix云平台会为每一个产品创建一个设备属性存储数据集，开发者可以使用UDS JAVA API写入和读取设备属性数据。</p>
<p>基础概念</p>
<p>术语</p>
<table>
<thead>
<tr>
<th>名字</th>
<th>中文描述</th>
<th>语义</th>
</tr>
</thead>
<tbody>
<tr>
<td>property</td>
<td>设备属性</td>
<td>设备上报数据</td>
</tr>
<tr>
<td>deviceId</td>
<td>设备逻辑ID</td>
<td>设备在平台的唯一标识</td>
</tr>
<tr>
<td>timestamp</td>
<td>时间戳</td>
<td>设备上报数据的时间戳，是相对于1970年的毫秒数</td>
</tr>
<tr>
<td>全量上报</td>
<td>全量上报</td>
<td>每次上报的属性数据都包含所有预定义属性</td>
</tr>
<tr>
<td>差量上报</td>
<td>差量上报</td>
<td>每次上报的属性数据不一定包含所有预定义属性</td>
</tr>
<tr>
<td>status data</td>
<td>当前状态数据</td>
<td>设备各个属性的最新数据</td>
</tr>
<tr>
<td>row</td>
<td>数据行</td>
<td>代表一次上报数据</td>
</tr>
<tr>
<td>column</td>
<td>数据列</td>
<td>代表一个属性</td>
</tr>
<tr>
<td>filter</td>
<td>过滤条件</td>
<td>根据过滤条件查询数据</td>
</tr>
<tr>
<td>select</td>
<td>选择属性</td>
<td>选择要查询的属性</td>
</tr>
<tr>
<td>publish</td>
<td>发布/推送属性数据</td>
<td>如果APP订阅了设备属性，则会收到这条数据</td>
</tr>
<tr>
<td>null</td>
<td>空</td>
<td>表示这个属性在这次上报中没有数据</td>
</tr>
<tr>
<td>ACContext</td>
<td>上下文标识</td>
<td></td>
</tr>
</tbody>
</table>
<p>数据模型</p>
<table>
<thead>
<tr>
<th>deviceId</th>
<th>timestamp</th>
<th>key_1</th>
<th>key_2</th>
<th>key_3</th>
</tr>
</thead>
<tbody>
<tr>
<td>device_1</td>
<td>t1</td>
<td>value_1 value_2 value_3</td>
<td></td>
<td></td>
</tr>
<tr>
<td>device_1</td>
<td>t2</td>
<td>value_1 value_2 value_3</td>
<td></td>
<td></td>
</tr>
<tr>
<td>device_1</td>
<td>t3</td>
<td>value_1 value_2 value_3</td>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<p>属性类型</p>
<p>类型| 描述<br />
整型| byte,short,int,long<br />
浮点型|    float,double<br />
字符串|    String<br />
布尔型|    Boolean</p>
<p>接口</p>
<p>名字| 描述<br />
create| 写入设备属性数据<br />
find|   查找单行设备属性数据<br />
scan|   查找多行设备属性数据<br />
statistics| 简单的分区间数据统计，可以用于历史数据做图<br />
export| 数据导出<br />
publish|    发布设备属性数据<br />
基础数据结构</p>
<p>ACContext</p>
<p>ACContext 包含了用户的MajorDomain, SubDomain, DeveloperId, TraceId, 时间戳, 签名等信息，每个请求都必须带有ACContext才能与云端交互。单个ACContext可以认为是逻辑上一系列请求的唯一标识。</p>
<p>ACFilter</p>
<p>ACFilter用于过滤结果集中的数据，当前支持：</p>
<p>查询历史数据仅支持: EQUAL, GREATER, GREATER_OR_EQUAL, LESS, LESS_OR_EQUAL, AND。 查询状态数据支持所有类型的ACFilter。</p>
<table>
<thead>
<tr>
<th>名字</th>
<th>数学表示</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>EQUAL</td>
<td>==</td>
<td>等于</td>
</tr>
<tr>
<td>NOT_EQUAL</td>
<td>!=</td>
<td>不等于</td>
</tr>
<tr>
<td>GREATER</td>
<td>&gt;</td>
<td>大于</td>
</tr>
<tr>
<td>GREATER_OR_EQUAL</td>
<td>&gt;=</td>
<td>大于或等于</td>
</tr>
<tr>
<td>LESS</td>
<td>&lt;</td>
<td>小于</td>
</tr>
<tr>
<td>LESS_OR_EQUAL</td>
<td>&lt;=</td>
<td>小于或等于</td>
</tr>
<tr>
<td>LIKE</td>
<td>like</td>
<td>字符串模糊匹配</td>
</tr>
<tr>
<td>NOT_LIKE</td>
<td>not like</td>
<td>字符串模糊匹配</td>
</tr>
<tr>
<td>BINARY_LIKE</td>
<td>binary like</td>
<td>区分大小写的字符串模糊匹配</td>
</tr>
<tr>
<td>BINARY_NOT_LIKE</td>
<td>binary not like</td>
<td>不区分大小写的字符串模糊匹配</td>
</tr>
<tr>
<td>IN</td>
<td>in</td>
<td>基于列表进行查找</td>
</tr>
<tr>
<td>NOT_IN</td>
<td>not int</td>
<td>基于列表进行查找</td>
</tr>
<tr>
<td>AND</td>
<td>and</td>
<td>与(与的优化级高于或)</td>
</tr>
<tr>
<td>OR</td>
<td>or</td>
<td>或</td>
</tr>
</tbody>
</table>
<p>使用实例<br />
<pre><code>// 实例1: 创建一个filter(key1&gt;0 and key1&lt;10)
ACFilter f1 = ac.filter().whereGreaterThan(&quot;key1&quot;, 0).andLessThan(&quot;key1&quot;, 10);

// 实例2: 创建一个filter(key1&lt;=0 or key1&gt;=10)
ACFilter f1 = ac.filter().whereLessThanOrEqualTo(&quot;key1&quot;, 0).orGreaterThanOrEqualTo(&quot;key1&quot;, 10);

// 实例3: 创建一个filter(key1以 &quot;abcd&quot; 为前缀, 不区分大小写)
ACFilter f1 = ac.filter().whereLike(&quot;key1&quot;, &quot;abcd%&quot;);

// 实例4: 创建一个filter(key1以 &quot;abcd&quot; 为前缀, 不区分大小写)
ACFilter f1 = ac.filter().whereLike(&quot;key1&quot;, &quot;abcd%&quot;);

// 实例5: 创建一个filter(key1以 &quot;abcd&quot; 为后缀, 不区分大小写)
ACFilter f1 = ac.filter().whereLike(&quot;key1&quot;, &quot;%abcd&quot;);

// 实例6: 创建一个filter(key1包含子串 &quot;abcd&quot;, 不区分大小写)
ACFilter f1 = ac.filter().whereLike(&quot;key1&quot;, &quot;%abcd%&quot;);

// 实例7: 创建一个filter(key1 为 &quot;v1&quot; 或 &quot;v2&quot; 或 &quot;v3&quot;中的一个)
ACFilter f1 = ac.filter().whereIn(&quot;key1&quot;, String[]{&quot;v1&quot;, &quot;v2&quot;, &quot;v3&quot;});}
</code></pre><br />
使用实例</p>
<p>以空气净化器为例来说明。</p>
<table>
<thead>
<tr>
<th>属性名</th>
<th>类型</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>pm25</td>
<td>整数</td>
<td>pm2.5值</td>
</tr>
<tr>
<td>speed</td>
<td>整数</td>
<td>当前风机转速</td>
</tr>
<tr>
<td>mode</td>
<td>字符串</td>
<td>当前净化器状态(auto(自动), high(高速), medium(中速), low(低速))</td>
</tr>
</tbody>
</table>
<p>数据写入</p>
<p>Create</p>
<p>标准用法<br />
<pre><code>ac.dstore(ctx).create(设备ID，时间戳)
              .put(key_1, value_1)
              .put(key_2, value_2)
              .put(key_3, value_3)
              .execute();
</code></pre><br />
使用实例</p>
<ul>
<li>实例1: 写入一条数据 (设备ID: 1, 时间戳: 1469098960000, pm25值: 250, 风机转速: 40, 模式: &ldquo;low&rdquo;)。<br />
<pre><code>// 使用方式一

ac.dstore(ctx).create(1, 1469098960000L)
              .put(&quot;pm25&quot;, 250)
              .put(&quot;speed&quot;, 40)
              .put(&quot;mode&quot;, &quot;low&quot;)
              .execute();

// 使用方式二

ac.dstore(ctx).create(1, 1469098960000L, &quot;pm25&quot;, 250, &quot;speed&quot;, 40, &quot;mode&quot;, &quot;low&quot;).execute();

// 使用方式三

ACObject obj = new ACObject();
obj.put(&quot;pm25&quot;, 250);
obj.put(&quot;speed&quot;, 40);
obj.put(&quot;mode&quot;, &quot;low&quot;);

ac.dstore(ctx).create(1, 1469098960000L, obj).execute();
</code></pre><br />
类比SQL<br />
<pre><code>INSERT INTO `设备属性数据集` SET `设备ID`=1, `时间戳`=1469098960000, `pm25`=250, `speed`=40, `mode`='low';
</code></pre></li>
<li>实例2: 写入一条数据 (设备ID: 1, 时间戳: 1469098960000, pm25值: 250, 风机转速: 40，模式: &ldquo;low&rdquo;)，并发布/推送。<br />
<pre><code>ac.dstore(ctx).create(1, 1469098960000L)
              .put(&quot;pm25&quot;, 250)
              .put(&quot;speed&quot;, 40)
              .put(&quot;mode&quot;, &quot;low&quot;)
              .execute(true);
</code></pre></li>
<li>实例3: 发布/推送一条数据（设备ID: 1, 时间戳: 1469098960000, pm25值: 250, 风机转速: 40, 模式: &ldquo;low&rdquo;), 不存储。<br />
<pre><code>ac.dstore(ctx).create(1, 1469098960000L)
              .put(&quot;pm25&quot;, 250)
              .put(&quot;speed&quot;, 40)
              .put(&quot;mode&quot;, &quot;low&quot;)
              .publish();
</code></pre></li>
<li>实例4: 写入一条数据 (设备ID: 1, 时间戳: 取服务器当前时间, pm25值: 250, 风机转速: 40, 模式: &ldquo;low&rdquo;)。<br />
<pre><code>ac.dstore(ctx).create(1, 0)
              .put(&quot;pm25&quot;, 250)
              .put(&quot;speed&quot;, 40)
              .put(&quot;mode&quot;, &quot;low&quot;)
              .execute();
</code></pre><br />
数据查询</li>
</ul>
<p>Scan</p>
<p>范围查找数据，可能返回0~n条，当前最多支持返回1000条数据。</p>
<p>标准用法<br />
<pre><code>// 查询历史数据(不支持offset, 不支持or)
// 如果没有符合条件的数据，则返回一个空的数组
List&lt;ACObject&gt; results = ac.dstore(ctx).scanHistory(设备ID)
                        .select(key_1, key_2, ..., key_n)
                        .startTime(开闭区间, 开始时间)
                        .endTime(开闭区间，结束时间)
                        .where(filter)
                        .and(filter)
                        .count(key_1, ...)
                        .sum(key_1, ...)
                        .avg(key_1, ...)
                        .max(key_1, ...)
                        .min(key_1, ...)
                        .orderByTimeAsc()
                        .orderByTimeDesc()
                        .limit(limit)
                        .execute();


// 查询状态数据
// 如果没有符合条件的数据，则返回一个空的数组
List&lt;ACObject&gt; results = ac.dstore(ctx).scanStatus()
                        .select(key_1, key_2, ..., key_n)
                        .start(开闭区间, key_1, value_1, key_n, value_n)
                        .end(开闭区间，key_1, value_1, key_n, value_n)
                        .where(filter)
                        .and(filter)
                        .or(filter)
                        .count(key_1, ...)
                        .sum(key_1, ...)
                        .avg(key_1, ...)
                        .max(key_1, ...)
                        .min(key_1, ...)
                        .orderByAsc(key_1, ...)
                        .orderByDesc(key_1, ...)
                        .groupBy(key_1, ...)
                        .offset(offset)
                        .limit(limit)
                        .execute();
</code></pre><br />
使用实例</p>
<ul>
<li>实例1: 查询 (设备ID为1，时间范围在[1469098960000, 1469102560000]间的历史数据（包含pm25值和对应的时间戳)，按时间倒序输出)。<br />
<pre><code>List&lt;ACObject&gt; results = ac.dstore(ctx).scanHistory(1)
                        .select(&quot;pm25&quot;, ACDStore.TIMESTAMP)
                        .startTime(true, 1469098960000L)
                        .endTime(true, 1469102560000L)
                        .orderByTimeDesc()
                        .execute();
// 如果没有符合条件的数据，则返回一个空的数组

// 输出方式一(如果是NULL，整数转化为0, 字符串转化为空串，浮点型转化为0f)
for (ACObject result:results) {
  long timestamp = result.getLong(ACDStore.TIMESTAMP);
  long pm25 = result.getLong(&quot;pm25&quot;);
  System.out.Println(timestamp + &quot;, &quot; + pm25);
}

// 输出方式二(支持NULL)
for (ACObject result:results) {
  Long timestamp = result.getNullLong(ACDStore.TIMESTAMP);
  Long pm25 = result.getNullLong(&quot;pm25&quot;);
  System.out.Println(timestamp + &quot;,&quot; + pm25);
}
</code></pre><br />
类比SQL<br />
<pre><code>SELECT `时间戳`, `pm25` FROM `设备数据集` WHERE `设备ID`=1 AND (`时间戳`&gt;=1469098960000 AND `时间戳`&lt;=1469102560000) ORDER BY `
时间戳` DESC;
</code></pre></li>
<li>实例2: 查询 (设备ID为1的最近20条历史数据（pm25和时间戳)，并按时间正序输出)。<br />
<pre><code>List&lt;ACObject&gt; results = ac.dstore(ctx).scanHistory(1)
                        .select(&quot;pm25&quot;, ACDStore.TIMESTAMP)
                        .endTime(true, 1469102560000L)
                        .orderByTimeAsc()
                        .limit(20)
                        .execute();
// 如果没有符合条件的数据，则返回一个空的数组

// 输出
for (ACObject result:results) {
  long timestamp = result.getLong(ACDStore.TIMESTAMP);
  long pm25 = result.getLong(&quot;pm25&quot;);
  System.out.Println(timestamp + &quot;, &quot; + pm25);
}
</code></pre><br />
类比SQL<br />
<pre><code>SELECT `时间戳`, `pm25` FROM `设备数据集` WHERE `设备ID`=1 AND `时间戳`&lt;=1469102560000L ORDERY BY `时间戳` DESC LIMIT 20;
</code></pre></li>
<li>实例3: 查询 (设备ID为1, 时间范围在[1469098960000, 1469102560000]间，并且pm25&gt;200的数据行数)。<br />
<pre><code>ACFilter filter = ac.filter().WhereGreaterThan(&quot;pm25&quot;, 200);

List&lt;ACObject&gt; results = ac.dstore(ctx).scanHistory(1)
                        .startTime(1469098960000L)
                        .endTime(1469102560000L)
                        .where(filter)
                        .count()
                        .execute();

// 输出
long count = result.get(0).getLong(&quot;_count&quot;);
System.out.Println(count);
</code></pre><br />
类比SQL<br />
<pre><code>SELECT count(*) as `_count` FROM `设备数据集` WHERE `设备ID`=1 AND (`时间戳`&gt;=1469098960000 AND `时间戳`&lt;=1469102560000) AND `pm25`&gt;200;
</code></pre></li>
<li>实例4: 查询 (设备ID为1，时间范围在[1469098960000, 1469102560000]间，pm25的平均值)。<br />
<pre><code>List&lt;ACObject&gt; results = ac.dstore(ctx).scanHistory(1)
                        .startTime(1469098960000L)
                        .endTime(1469102560000L)
                        .avg(&quot;pm25&quot;)
                        .execute();

// 输出
long avg = result.get(0).getLong(&quot;_avg_pm25&quot;);
System.out.Println(avg);
</code></pre><br />
类比SQL<br />
<pre><code>SELECT AVG(`pm25`) as `_avg_pm25` FROM `设备数据集` WHERE `设备ID`=1 AND (`时间戳`&gt;=1469098960000 AND `时间戳`&lt;=1469102560000);
</code></pre></li>
<li>实例5: 查询最近1分钟有过上报，并且当前设备模式为&rdquo;high&rdquo;的所有设备和数据。<br />
<pre><code>ACFilter filter = ac.filter().WhereEqualTo(&quot;mode&quot;, &quot;high&quot;);
Long curTime = System.currentTimeMillis();

List&lt;ACObject&gt; results = ac.dstore(ctx).scanStatus()
                        .select(ACDStore.DEVICE_ID, ACDStore.TIMESTAMP, &quot;pm25&quot;, &quot;mode&quot;, &quot;speed&quot;)
                        .startTime(curTime-60*1000)
                        .where(filter)
                        .execute();
// 如果没有符合条件的数据，则返回一个空的数组

// 输出
for (ACObject result:results) {
  long deviceId = result.getLong(ACDStore.DEVICE_ID);
  long timestamp = result.getLong(ACDStore.TIMESTAMP);
  long pm25 = result.getLong(&quot;pm25&quot;);
  String mode = result.getString(&quot;mode&quot;);
  long speed = result.getLong(&quot;speed&quot;);
  System.out.Println(deviceId + &quot;, &quot; + timestamp + &quot;, &quot; + pm25 + &quot;, &quot; + mode + &quot;, &quot; + speed);
}
</code></pre><br />
类比SQL<br />
<pre><code>SELECT `设备ID`, `时间戳`, `pm25`, `mode`, `speed` FROM `设备数据集` WHERE `时间戳`&gt;=当前时间-1分钟 AND `mode`='high';
</code></pre><br />
Find</li>
</ul>
<p>查找单条数据，历史数据必须指定设备ID和时间戳，状态数据只须指定设备ID。</p>
<p>标准用法<br />
<pre><code>// 查询历史数据
// 如果数据不存在，则返回null
ACObject result = ac.dstore(ctx).find(设备ID，时间戳)
                 .select(key_1, key_2, ...)
                 .execute();

// 查询状态数据
ACObject result = ac.dstore(ctx).find(设备ID)
                 .select(key_, key_2, ...)
                 .execute();
</code></pre><br />
使用实例</p>
<ul>
<li>实例1: 查询设备ID为1, 时间戳为1469098960000的上报数据(pm25, mode)。<br />
<pre><code>ACObject result = ac.dstore(ctx).findHistroy(1, 1469098960000L)
                 .select(&quot;pm25&quot;, &quot;mode&quot;)
                 .execute();
// 如果数据不存在，则result==null

// 输出
if (result != null) {
  long pm25 = result.getLong(&quot;pm25&quot;);
  String mode = result.getString(&quot;mode&quot;);
  System.out.Println(pm25 + &quot;, &quot; + mode);
}
</code></pre><br />
类比SQL<br />
<pre><code>SELECT `pm25`, `mode` FROM `设备数据集` WHERE `设备ID`=1 AND `时间戳`=1469098960000;
</code></pre></li>
<li>实例2: 查询设备ID为1的设备的当前状态。<br />
<pre><code>ACObject result = ac.dstore(ctx).findStatus(1)
                 .select(&quot;pm25&quot;, &quot;mode&quot;, &quot;speed&quot;)
                 .execute();
// 如果数据不存在，则result==null

// 输出
if (result != null) {
  long pm25 = result.getLong(&quot;pm25&quot;);
  String mode = result.getString(&quot;mode&quot;);
  long speed = result.getLong(&quot;speed&quot;);
  System.out.Println(pm25 + &quot;, &quot; + mode + &quot;, &quot; + speed);
}
</code></pre><br />
类比SQL<br />
<pre><code>SELECT `pm25`, `mode`, `speed` FROM `设备数据集` WHERE `设备ID`=1;
</code></pre><br />
数据统计</li>
</ul>
<p>statistics</p>
<p>数据统计主要用于对一定时间范围内的数据进行数据统计，可以用于数据报表和基于历史数据做图。</p>
<p>标准用法<br />
<pre><code>// 对历史数据做简单统计
List&lt;ACObject&gt; results = ac.dstore(ctx).statisticsHistory(设备ID)
                .startAbsoluteTime(起始绝对时间)
                .endAbsoluteTime(结束绝对时间)
                .startRelativeTime(相对时间值, 相对时间单位)
                .endRelativeTime(相对时间值, 相对时间单位)
                .interval(时间间隔值, 时间间隔单位)
                .timeZone(时区)
                .addStatistic(属性1, 聚集函数1, 聚焦函数2, ...)
                .addStatistic(属性2, 聚焦函数1)
                .execute();
* 当某个时间区间没有数据时，默认填充0
* 相对时间单位支持: INTERVAL_SECONDS, INTERVAL_MINUTES, INTERVAL_HOURS, INTERVAL_DAYS, INTERVAL_WEEKS, INTERVAL_MONTHS
聚集函数支持: AGGR_AVG, AGGR_SUM, AGGR_COUNT, AGGR_MAX, AGGR_MIN, AGGR_FIRST, AGGR_LAST
使用实例

* 实例1: 查询 (设备ID为1, 时间范围在[1487300704000, 1487387104000](24小时）间的历史数据, 每1个小时对pm25算一个平均值，一个最大值，一个最小值
````
List&lt;ACObject&gt; results = ac.dstore(ctx).statisticsHistory(1)
                .startAbsoluteTime(1487300704000L)
                .endAbsoluteTime(1487387104000L)
                .interval(1, ACDStore.INTERVAL_HOURS)
                .addStatistic(&quot;pm25&quot;, ACDStore.AGGR_AVG, ACDStore.AGGR_MAX, ACDStore.AGGR_MIN)
        .execute();

// 如果没有符合条件的数据，则返回一个空的数组

// 输出
for (ACObject result:results) {
  long timestamp = result.getLong(ACDStore.TIMESTAMP);
  long pm25_avg = result.getLong(&quot;_avg_pm25&quot;);
  long pm25_max = result.getLong(&quot;_max_pm25&quot;);
  long pm25_min = result.getLong(&quot;_min_pm25&quot;);
  System.out.Println(timestamp + &quot;, &quot; + pm25_avg + &quot;, &quot; + pm25_max + &quot;, &quot; + pm25_min);
}
</code></pre><br />
<em> 实例2: 查询 (设备ID为1, 开始时间为1487300704000后的24小时内的历史数据，每1个小时对pm25求一个平均值，一个最大值，一个最小值<br />
<pre><code>List&lt;ACObject&gt; results = ac.dstore(ctx).statisticsHistroy(1)
        .startAbsoluteTime(1487300704000L)
        .endRelative(1, ACDStore.INTERVAL_DAYS)
                .interval(1, ACDStore.INTERVAL_HOURS)
                .addStatistic(&quot;pm25&quot;, ACDStore.AGGR_AVG, ACDStore.AGGR_MAX, ACDStore.AGGR_MIN)
        .execute();

// 如果没有符合条件的数据，则返回一个空的数组

// 输出
for (ACObject result:results) {
  long timestamp = result.getLong(ACDStore.TIMESTAMP);
  long pm25_avg = result.getLong(&quot;_avg_pm25&quot;);
  long pm25_max = result.getLong(&quot;_max_pm25&quot;);
  long pm25_min = result.getLong(&quot;_min_pm25&quot;);
  System.out.Println(timestamp + &quot;, &quot; + pm25_avg + &quot;, &quot; + pm25_max + &quot;, &quot; + pm25_min);
}
</code></pre></em> 实例3: 查询 (设备ID为1, 结束时间为1487387104000前24小时的历史数据, 每一个小时对pm25求一个平均值，一个最大值，一个最小值)<br />
<pre><code>List&lt;ACObject&gt; results = ac.dstore(ctx).statisticsHistory(1)
        .startRelative(1, ACDStore.INTERVAL_DAYS)
        .endAbsoluteTime(1487387104000L)
                .interval(1, ACDStore.INTERVAL_HOURS)
                .addStatistic(&quot;pm25&quot;, ACDStore.AGGR_AVG, ACDStore.AGGR_MAX, ACDStore.AGGR_MIN)
        .execute();

// 如果没有符合条件的数据，则返回一个空的数组

// 输出
for (ACObject result:results) {
  long timestamp = result.getLong(ACDStore.TIMESTAMP);
  long pm25_avg = result.getLong(&quot;_avg_pm25&quot;);
  long pm25_max = result.getLong(&quot;_max_pm25&quot;);
  long pm25_min = result.getLong(&quot;_min_pm25&quot;);
  System.out.Println(timestamp + &quot;, &quot; + pm25_avg + &quot;, &quot; + pm25_max + &quot;, &quot; + pm25_min);
}
</code></pre><br />
数据导出</p>
<p>export</p>
<p>导出单个设备指定时间范围的历史数据或是导出所有设备的状态数据</p>
<p>标准用法<br />
<pre><code>// 导出单个设备的历史数据
ACDStoreIter iter = ac.dstore(ctx).exportHistory(设备ID)
        .startTime(开始时间)
        .endTime(结束时间)
        .execute();

// 导出所有设备的状态数据
ACDStoreIter iter = ac.dsotre(ctx).exportStatus()
        .execute();
</code></pre><br />
使用实例</p>
<p>导出ID为1的的设备，在[1487300704000, 1487387104000]范围内的历史数据.<br />
<pre><code>ACDStoreIter iter = ac.dstore(ctx)
                .exportHistory(1)
                .startTime(1487300704000L)
                .endTime(1487387104000L)
                .execute();

while(true) {
    ACObject item = iter.next();
    if (item == null) {
        break;
    } else {
        long timestamp = item.getLong(ACDStore.TIMESTAMP);
        long pm25 = item.getLong(&quot;pm25&quot;);
        long speed = item.getLong(&quot;speed&quot;);
        String mode = item.getString(&quot;mode&quot;);
        System.out.println(timestamp + &quot;, &quot; + pm25 + &quot;, &quot; + speed + &quot;, &quot; + mode);
    }
}
</code></pre><br />
导出所有设备的状态数据<br />
<pre><code>ACDStoreIter iter = ac.dstore(ctx)
                .exportStatus()
                .execute();

while(true) {
    ACObject item = item.next();
    if (item == null) {
        break;
    } else {
        long deviceId = item.getLong(ACDStore.DEVICE_ID);
        long pm25 = item.getLong(&quot;pm25&quot;);
        long speed = item.getLong(&quot;speed&quot;);
        String mode = item.getString(&quot;mode&quot;);
        System.out.println(deviceId + &quot;, &quot; + pm25 + &quot;, &quot; + speed + &quot;, &quot; + mode);
    }
}
</code></pre><br />
<h5 id='4.3.3.1'>设备通信</h5><br />
SDK中的类ACBindMgr定义了方法sendToDevice用于向设备发送指令。该方法的使用示例如下：<br />
<pre><code>// 实例化ACBindMgr对象
ACBindMgr bindMgr = ac.bindMgr(ac.newContext());
// 向设备发送消息

// 第一个参数68表示发送给设备的消息的msgCode。
// 第二个参数参数是拟发送给设备的二进制数据。
ACDeviceMsg reqMsg = new ACDeviceMsg(68, new byte[]{1,0,0,0});
// 参数subDomain是目标设备在MAX平台上所属子域的名字。
// 参数deviceId是目标设备的逻辑ID
// 参数ACDeviceMsg为发送给目标设备的具体消息内容
// 参数userId为发送该消息的用户ID
ACDeviceMsg respMsg = bindMgr.sendToDevice(subDomain, deviceId, reqMsg, userId);
// 其它处理逻辑
</code></pre><br />
<h5 id='4.3.3.1'>UDS通信</h5><br />
SDK中的类AC定义了方法sendToService，用于访问运行在MAX云端的开发者的UDS服务。<br />
<pre><code>ACMsg req = new ACMsg();
// 参数methodName为访问UDS的方法名
req.setName(&quot;queryData&quot;);
req.put(&quot;deviceId&quot;, deviceId);
req.put(&quot;startTime&quot;, 0);
req.put(&quot;endTime&quot;, System.currentTimeMillis());
// 参数subDomain是要访问的服务在MAX平台上所对应的子域的名字。访问主域UDS时使用空字符串。
// 参数serviceName是要访问的UDS服务的名字
// 参数serviceVersion用于指定服务的主版本号
ACMsg resp = AC.sendToService(subDomain, serviceName, serviceVersion, req);
</code></pre><br />
<h5 id='4.3.3.1'>定时任务</h5></p>
<blockquote>
<p>注意：</p>
<p>1、timeZone支持标准时区列表，标准时区列表请参考<a href="https://en.wikipedia.org/wiki/List_of_tz_database_time_zones">wiki</a>。</p>
</blockquote>
<p>1 定时任务管理器<br />
<pre><code>ACTimerTaskMgr mgr = ac.timerTaskMgr(ac.newContext());
</code></pre><br />
2 addTask<br />
<pre><code>//添加定时任务
ACTimerTask task = new ACTimerTask();
task.setName(&quot;test-timer-task&quot;);
task.setDescription(&quot;test-timer-task&quot;);
Calendar c = Calendar.getInstance();
c.setTimeZone(TimeZone.getDefault()); //设置时区
c.add(Calendar.DAY_OF_MONTH, 1);
task.setTimePoint(c);
task.setTimeCycle(&quot;month&quot;);
task.setUser(userId);
task.setDevice(deviceId);
String bytes = &quot;aaaaa&quot;;
ACDeviceMsg msg = new ACDeviceMsg(71, bytes.getBytes());
task.setDeviceMessage(msg);
task = mgr.addTask(task);
</code></pre><br />
3 deleteTask<br />
<pre><code>//删除定时任务
mgr.deleteTask(task.getDevice(), task.getTaskId());
</code></pre><br />
4 modifyTask<br />
<pre><code>//修改定时任务
task.setName(&quot;new-test-timer-task&quot;);
mgr.modifyTask(task.getTaskId(), task);
</code></pre><br />
5 startTask<br />
<pre><code>//启动定时任务
mgr.startTask(task.getDevice(), task.getTaskId());
</code></pre><br />
6 stopTask<br />
<pre><code>//停止定时任务
mgr.stopTask(task.getDevice(), task.getTaskId());
</code></pre><br />
7 listTasks<br />
<pre><code>//列出定时任务
ArrayList&lt;ACTimerTask&gt; list = mgr.listTasks(deviceId);
</code></pre><br />
8 时区问题说明<br />
java所支持的时区列表是标准时区列表的一个超集，所以使用java的接口设置时区时需要注意时区ID是否是标准时区ID</p>
<p>正面示例<br />
<pre><code>Calendar c = Calendar.getInstance();
c.setTimeZone(TimeZone.getTimeZone(&quot;Etc/GMT-8&quot;)); //东八区，标准时区ID，支持
</code></pre><br />
反面示例<br />
<pre><code>Calendar c = Calendar.getInstance();
c.setTimeZone(TimeZone.getTimeZone(&quot;GMT+8&quot;)); //东八区，非标准时区ID，不支持
</code></pre><br />
<h5 id='4.3.3.1'>消息推送</h5><br />
<code>ACNotificationMgr</code>集成了友盟推送，并提供了访问MAX消息推送相关的接口。</p>
<p>1 指定设备发送通知<br />
<pre><code>// 实例化ACNotificationMgr
ACNotificationMgr notificationMgr = ac.notificationMgr(ac.newContext());
ACNotification notification = new ACNotification(&quot;testing&quot;, &quot;I'm testing notification&quot;);
// 向绑定该设备的所有用户推送消息
// 参数deviceId为设备逻辑ID
ac.notificationMgr(ac.newContext()).sendNotification(deviceId, ACNotificationMgr.NOTIFY_ALL_USER, notification);
</code></pre><br />
2 指定用户发送通知<br />
<pre><code>// 实例化ACNotificationMgr
ACNotificationMgr notificationMgr = ac.notificationMgr(ac.newContext());
ACNotification notification = new ACNotification(&quot;testing&quot;, &quot;I'm testing notification&quot;);
// 指定用户ID为1和2
List&lt;Long&gt; userList = new ArrayList&lt;Long&gt;();
userList.add(1L);
userList.add(2L);
// 指定用户推送消息
ac.notificationMgr(ac.newContext()).sendNotification(userList, notification);
</code></pre><br />
2.1 附录<br />
<pre><code>public class ACNotification {
    public static final long GO_APP = 0;
    public static final long GO_URL = 1;
    public static final long GO_ACTIVITY = 2;

    public static final long NOTIFICATION = 0;
    public static final long MESSAGE = 1;

    // 通知显示类型
    // NOTIFICATION 通知，MESSAGE 消息
    private long displayType;

    // 通知标题
    private String title;

    // 通知内容
    private String content;

    // 是否振动
    private boolean vibrate;

    // 是否呼吸灯
    private boolean lights;

    // 是否响铃
    private boolean sound;

    // 点击通知时的动作类型
    // GO_APP:跳转到APP, GO_URL:跳转到指定url, GO_ACTIVITY:跳转到指定activity
    private long openType;

    // 当openType为GO_URL时指定url地址
    private String url;

    // 当openType为GO_ACTIVITY时指定activity
    private String activity;

    // 用户自定义数据
    private Map&lt;String, String&gt; userData;

    // 本地化自定义格式
    private String locKey;

    // 本地化自定义参数
    private List&lt;String&gt; locArgs;

    public ACNotification() {
        this.title = &quot;&quot;;
        this.content = &quot;&quot;;
        this.vibrate = true;
        this.lights = true;
        this.sound = true;
        this.openType = GO_APP;
        this.url = &quot;&quot;;
        this.activity = &quot;&quot;;
        this.userData = new HashMap();
        this.locKey = &quot;&quot;;
        this.locArgs = new ArrayList();
    }

    public ACNotification(String title, String content) {
        this.displayType = NOTIFICATION;
        this.title = title;
        this.content = content;
        this.vibrate = true;
        this.lights = true;
        this.sound = true;
        this.openType = GO_APP;
        this.url = &quot;&quot;;
        this.activity = &quot;&quot;;
        this.userData = new HashMap();
        this.locKey = &quot;&quot;;
        this.locArgs = new ArrayList();
    }

    //getter
}
</code></pre><br />
<h5 id='4.3.3.1'>文件存储</h5><br />
ACFileMgr提供了访问MAX文件存储服务的接口：上传文件，获取文件的下载链接。如下是上传文件并获取其下载地址的示例。<br />
<pre><code>// 实例化ACFileMgr
ACFileMgr fileMgr = ac.fileMgr(ac.newContext());
// 文件的访问权限，设置为所有人可读可写
ACACL acl = new ACACL();
acl.setPublicReadAccess(true);
acl.setPublicWriteAccess(true);
// 要被上传的文件的本地路径。
String filePath = &quot;/tmp/test.txt&quot;;
// 文件上传后在云端所属的类别的名字。
String bucket = &quot;test&quot;;
// 文件上传后在云端所使用的文件名。
String fileName = &quot;a.txt&quot;;
// 指定文件存储方式为public还是private。public文件的下载链接是永久有效的；private文件的下载链接是有实效性的。
boolean isPublic = true;
// 上传文件
fileMgr.uploadFile(filePath, bucket, fileName, acl, isPublic);
// ......
// 获取文件的下载链接。
// 第三个参数用于设置isPublic为false的文件的下载链接的有效期时长。缺省为0，表示不设置有效期。
String url = fileMgr.getDownloadUrl(bucket, fileName, 3600);
</code></pre><br />
<h3 id='4.4'>APP开发</h3><br />
<h4 id='4.4.1'>iOS</h4><br />
<h4 id='4.4.2'>Android</h4><br />
<h5 id='4.4.2.1'>APP端Android SDK简介</h5><br />
1 功能与目的<br />
MAX Android APP是MAX推出的Android平台上用于快速进行物联网APP开发的软件开发工具包。该SDK封装了APP与硬件端及云端的通讯过程，还包括账号管理、设备配网等其他功能。使用该SDK，用户无需关心复杂的通信协议及底层实现，只需要将精力集中在APP的交互及业务层面。</p>
<p>2 主要功能</p>
<table>
<thead>
<tr>
<th>序号</th>
<th>功能名称</th>
<th>详细内容</th>
</tr>
</thead>
<tbody>
<tr>
<td>1.</td>
<td>账号管理</td>
<td>支持普通账号及第三方账号的注册、登录等</td>
</tr>
<tr>
<td>2.</td>
<td>设备配网</td>
<td>给WiFi类设备配置WiFi连接所需的SSID及密码</td>
</tr>
<tr>
<td>3.</td>
<td>设备管理</td>
<td>对设备进行绑定、分享、解绑等操作</td>
</tr>
<tr>
<td>4.</td>
<td>设备数据</td>
<td>订阅获取设备的属性变化、上下线等设备状态</td>
</tr>
<tr>
<td>5.</td>
<td>设备通信</td>
<td>以二进制、json等通信格式、云端转发或局域网的通信方式与设备进行通信</td>
</tr>
<tr>
<td>6.</td>
<td>UDS通信</td>
<td>以普通或者匿名的方式访问UDS服务</td>
</tr>
<tr>
<td>7.</td>
<td>实时消息</td>
<td>订阅接收云端实时推送的设备端上报数据</td>
</tr>
<tr>
<td>8.</td>
<td>定时任务</td>
<td>定时触发自定义任务响应</td>
</tr>
<tr>
<td>9.</td>
<td>OTA升级</td>
<td>对设备进行OTA升级</td>
</tr>
<tr>
<td>10.</td>
<td>推送</td>
<td>对APP进行消息推送</td>
</tr>
<tr>
<td>11.</td>
<td>文件存储</td>
<td>对常见的文件/图片类文件进行上传下载</td>
</tr>
<tr>
<td>12.</td>
<td>用户意见反馈</td>
<td>支持快速开发用户意见反馈页</td>
</tr>
<tr>
<td>13.</td>
<td>获取天气</td>
<td>支持快速获取PM2.5、天气/空气质量等常用天气信息</td>
</tr>
<tr>
<td>14.</td>
<td>排行榜</td>
<td>支持按照不同周期、数据获取数据排行</td>
</tr>
</tbody>
</table>
<h5 id='4.4.2.2'>开发准备</h5>

<p>1 SDK发布库<br />
ablcloud发布的android端SDK为ac-service-android-*.jar</p>
<blockquote>
<p>注意:</p>
<p>ac-service-android-release文件夹下有8个子目录，分别为不同模块功能的sdk（非必需项），开发者可根据需求导入对应的sdk，其中包括推送模块sdk、文件管理模块sdk、音视频模块sdk、MTK配网sdk、MX庆科配网sdk、Realtek配网sdk、古北配网sdk、COOEE配网sdk</p>
</blockquote>
<p>2 开发环境设置<br />
以下为 MAX Android SDK 需要的所有的权限，请在你的AndroidManifest.xml文件里的<manifest>标签里添加</p>
<pre><code>&lt;uses-permission android:name=&quot;android.permission.INTERNET&quot;/&gt;
&lt;uses-permission android:name=&quot;android.permission.ACCESS_WIFI_STATE&quot;/&gt;
&lt;uses-permission android:name=&quot;android.permission.ACCESS_NETWORK_STATE&quot; /&gt;
&lt;uses-permission android:name=&quot;android.permission.CHANGE_WIFI_STATE&quot; /&gt;
&lt;uses-permission android:name=&quot;android.permission.CHANGE_NETWORK_STATE&quot;/&gt;
</code></pre>

<p>3 应用程序初始化<br />
在你的应用使用MAX服务之前，你需要在代码中对MAX SDK进行初始化。 继承Application类，并且在onCreate()方法中调用此方法来进行初始化</p>
<p>开发阶段，请初始化测试环境</p>
<pre><code>AC.init(this, MajorDomain, MajorDomainId, AC.TEST_MODE);
</code></pre>

<p>在完成测试阶段之后，需要迁移到正式环境下</p>
<pre><code>AC.init(this, MajorDomain, MajorDomainId);
</code></pre>

<p>另外，若需要设置特殊的地域环境，则在初始化后调用以下代码</p>
<pre><code>/**
 * 设置地域环境
 *
 * @param regional 地域 默认为北京地区AC.REGIONAL_CHINA；华东地区为AC.REGIONAL_EAST_CHINA；东南亚地区为AC.REGIONAL_SOUTHEAST_ASIA;中欧地区为AC.REGIONAL_CENTRAL_EUROPE;北美地区为AC.REGIONAL_NORTH_AMERICA
 */
AC.setRegional(AC.REGIONAL_EAST_CHINA);
</code></pre>

<blockquote>
<p>主域及主域ID可以通过登录MAX控制台获取</p>
</blockquote>
<h5 id='4.4.2.3'>开发指南</h5>

<h6 id='4.4.2.3.1'>帐号管理</h6>

<p>1 普通帐号注册<br />
<img alt="" src="///E://work/frontwork/ngx-os/images/account_register.png" /></p>
<p>1、获取账号管理器</p>
<pre><code>//账号管理器SDK内部的实现为单例模式
ACAccountMgr accountMgr = AC.accountMgr();
</code></pre>

<p>2、检查手机号是否已注册</p>
<pre><code>accountMgr.checkExist(phone, new PayloadCallback&lt;Boolean&gt;() {
    @Override
    public void success(Boolean isExist) {
        if (!isExist) {
            //发送验证码
        } else {
            //提示手机号已被注册 
        }
    }
    @Override
    public void error(ACException e) {
        //网络错误或其他，根据e.getErrorCode()做不同的提示或处理
    }
});
</code></pre>

<p>3、发送验证码</p>
<pre><code>//1代表MAX短信内容模板，具体开发需要先把短信模板提交到MAX管理控制台再获取对应的参数
accountMgr.sendVerifyCode(phone, 1, new VoidCallback() {
    @Override
    public void success() {
        //检测验证码
    }
    @Override
    public void error(ACException e) {
        //网络错误或其他，根据e.getErrorCode()做不同的提示或处理
    }
});
</code></pre>

<blockquote>
<p>注意：<br />
1.由于第三方短信服务限制，每个手机账号每天最多只能发送10条短信验证码，请不要做重复发送验证码测试。 &gt;2.当发送手机号为国际号码时候，请将手机号前的“+”转换为“00”。<br />
4、检测验证码正确性</p>
</blockquote>
<pre><code>accountMgr.checkVerifyCode(phone，verifyCode, new PayloadCallback&lt;Boolean&gt;() {
    @Override
    public void success(Boolean result) {
        if (result) {
            //注册
        } else {
            //提示验证码错误 
        }
    }
    @Override
    public void error(ACException e) {
        //网络错误或其他，根据e.getErrorCode()做不同的提示或处理
    }
});
</code></pre>

<p>5、注册</p>
<pre><code>//emai和phone可以任选其一;nickName为可选项，没有时传空字符串
accountMgr.register(email, phone, password, nickName, verifyCode, new PayloadCallback&lt;ACUserInfo&gt;() {
    @Override
    public void success(ACUserInfo userInfo) {
        //获得用户userId和nickName，由此进入主页或设备管理
    }   
    @Override
    public void error(ACException e) {
        //网络错误或其他，根据e.getErrorCode()做不同的提示或处理
    }
});
</code></pre>

<p>2 普通账号登录<br />
用户调用登录接口成功之后，会在app本地存储一个token，下次启动app时即默认app已经登录，无需再进行登录，从v1.09版本之后，这个token具有有效期，在长期未使用app的情况下会过期，这个时候需要进行重新登录处理，所以建议在App启动时通过账号管理的isLogin()接口判断是否已登录。</p>
<pre><code>ACAccountMgr accountMgr = AC.accountMgr();
if(accountMgr.isLogin()){
    //由此进入主页
    return;
} else{
    //提示让用户输入用户名及密码
}
</code></pre>

<p>点击登录按钮后，调用登录接口</p>
<pre><code>//account为手机号/邮箱
accountMgr.login(account, password, new PayloadCallback&lt;ACUserInfo&gt;() {
    @Override
    public void success(ACUserInfo userInfo) {
        //获得用户userId和nickName，由此进入主页             
    }

    @Override
    public void error(ACException e) {
        //网络错误或其他，根据e.getErrorCode()做不同的提示或处理
    }
});
</code></pre>

<p>3 验证码登录</p>
<pre><code>//account为手机号/邮箱
AC.accountMgr().loginWithVerifyCode(account, verifyCode, new PayloadCallback&lt;ACUserInfo&gt; callback) {
    @Override
    public void success(ACUserInfo userInfo) {
        //获得用户userId和nickName，由此进入主页             
    }

    @Override
    public void error(ACException e) {
        //网络错误或其他，根据e.getErrorCode()做不同的提示或处理
    }
});
</code></pre>

<p>相关注意事项如下:</p>
<blockquote>
<p>开发者应在调用该接口前检查用户输入的用户名是否合法. 简单的检查如: 检查手机号长度是否是11位等. 标准的检查方法: 使用正则表达式去检查用户输入的手机号/邮箱是否合法.<br />
若登陆的账户尚未注册，此接口会自动注册此账户并返回账户信息。<br />
如果该接口返回错误, 请根据错误信息自行检查,包括网络是否通畅, 参数是否正确等.</p>
</blockquote>
<p>4 单点登录<br />
若有单点登录相关的业务需求可以通过调用一下接口强制将除本机以外所有客户端上的登录状态过期：</p>
<pre><code>AC.accountManager.forceUpdateRefreshToken(new PayloadCallback&lt;ACUserInfo&gt;() {
    @Override
    public void success(ACUserInfo userInfo) {
        //获得用户userId和nickName     
    }

    @Override
    public void error(ACException e) {
        //网络错误或其他，根据e.getErrorCode()做不同的提示或处理
    }
})
</code></pre>

<p>相关注意事项如下:</p>
<blockquote>
<p>此接口调用后无需再次进行登陆操作，内部自动更新重新生成的用户令牌及用户相关信息。</p>
</blockquote>
<p>在其他被强制过期RefreshToken的客户端上可以使用如下回调方法做相应登出操作：</p>
<pre><code>AC.accountMgr().setRefreshTokenInvalidCallback(new BaseCallback() {
    @Override
    public void error(ACException e) {
        //RefreshToken过期失效
    }
}
</code></pre>

<p>5 设置帐号附加属性<br />
使用账号附加属性需要先到MAX管理控制平台上的用户管理添加附加属性</p>
<p>步骤：登录MAX平台–&gt;用户管理–&gt;附加属性–&gt;新建</p>
<p>1、设置/更新用户附加属性</p>
<p>设置用户头像(设置头像不需要在MAX控制台上新建附加属性字段)</p>
<pre><code>//picture为图片的二进制流，请自行为其初始化
byte[] picture;
AC.accountMgr().setAvatar(picture, new PayloadCallback&lt;String&gt;() {
    @Override
    public void success(String url) {
        //头像设置成功，返回url，同时也可通过调用getUserProfile接口获取头像url
    }

    @Override
    public void error(ACException e) {
        //上传失败，检查网络问题
    }
});
</code></pre>

<p>设置除用户头像外的其他属性</p>
<pre><code>ACObject userProfile = new ACObject();
//注意此处put进去的key与value类型对应新建附加属性时填写的属性标识与属性类型
userProfile.put(&quot;city&quot;， &quot;北京&quot;)
userProfile.put(&quot;birthday&quot;, &quot;1989-10-13&quot;)
AC.accountMgr().setUserProfile(userProfile, new VoidCallback() {
    @Override
    public void success() {
        //附加属性设置成功
    }

    @Override
    public void error(ACException e) {
        //网络错误或其他，根据e.getErrorCode()做不同的提示或处理
    }
});
</code></pre>

<p>2、获取用户自定义附加属性</p>
<pre><code>AC.accountMgr().getUserProfile(new PayloadCallback&lt;ACObject&gt;() {
     @Override
     public void success(ACObject object) {
         //可通过object.toString()查看附加属性信息
         String city = object.get(&quot;city&quot;);
         String birthday= object.get(&quot;birthday&quot;);
     }

     @Override
     public void error(ACException e) {
         //网络错误或其他，根据e.getErrorCode()做不同的提示或处理
     }
});
</code></pre>

<p>6 第三方登录<br />
<img alt="" src="///E://work/frontwork/ngx-os/images/account_Oauth.png" /></p>
<p>1、直接使用第三方登录</p>
<pre><code>//APP端在完成OAuth认证登录之后可以获取到openId和accessToken
AC.accountMgr().loginWithOpenId(ACThirdPlatform.QQ, openId, accessToken, new PayloadCallback&lt;ACUserInfo&gt;() {
    @Override
    public void success(ACUserInfo userInfo) {
        //获得用户userId和nickName，进入主页或设备管理
    }   
    @Override
    public void error(ACException e) {
        //网络错误或其他，根据e.getErrorCode()做不同的提示或处理
    }
});
//绑定一个未被注册的普通帐号；emai和phone可以任选其一;nickName为可选项，没有时传空字符串
AC.accountMgr().bindWithAccount(email, phone, password, nickName, verifyCode, new VoidCallback() {
    @Override
    public void success() {
        //绑定账号成功
    }
    @Override
    public void error(ACException e) {
        //网络错误或其他，根据e.getErrorCode()做不同的提示或处理
    }
});
</code></pre>

<p>2、在已有普通账号登录时绑定第三方账号</p>
<pre><code>AC.accountMgr().bindWithOpenId(ACThirdPlatform.QQ, openId, accessToken, new VoidCallback() {
    @Override
    public void success() {
        //成功绑定第三方账号
    }
    @Override
    public void error(ACException e) {
        //网络错误或其他，根据e.getErrorCode()做不同的提示或处理
    }
});
</code></pre>

<blockquote>
<p>注：该接口需要在使用普通账户登录之后才可以调用</p>
</blockquote>
<h6 id='4.4.2.3.2'>产品管理</h6>

<p>开发者可以获取所有子域产品信息的列表，同时也可以根据子域获取指定的产品信息，需要使用ACProductManager类。 产品信息包含 主域ID及名称、子域ID及名称、产品名称、产品型号、产品展示图片、产品描述。需要使用ACProduct类。 所以需要在项目相关的类的头部添加如下代码:</p>
<pre><code>import com.accloud.cloudservice.ACProductManager
import com.accloud.service.ACProduct
</code></pre>

<p>获取所有产品信息列表</p>
<pre><code>AC.productMgr().fetchAllProducts(new PayloadCallback&lt;List&lt;ACProduct&gt;&gt;() {
    @Override
    public void success(List&lt;ACProduct&gt; products) {
        //请求成功处理
    }

    @Override
    public void error(ACException e) {
        //请求失败处理
    }
});
</code></pre>

<p>相关注意事项如下:</p>
<blockquote>
<p>此接口必须在用户登陆成功后调用.<br />
返回数据中字段如果没有在控制台中设置，则返回@&rdquo;&ldquo;.</p>
</blockquote>
<p>获取子域对应产品的信息</p>
<pre><code> AC.productMgr().fetchProduct(subDomain, new PayloadCallback&lt;ACProduct&gt;() {
    @Override
    public void success(ACProduct product) {
       //请求成功处理
    }

    @Override
    public void error(ACException e) {
       //请求失败处理
    }
 });
</code></pre>

<p>相关注意事项如下:</p>
<blockquote>
<p>此接口必须在用户登陆成功后调用.<br />
调用时请请检查子域是否存在.<br />
返回数据中字段如果没有在控制台中设置，则返回@&rdquo;&ldquo;.</p>
</blockquote>
<h6 id='4.4.2.3.3'>设备配网</h6>

<p>用户登录/注册后，需要绑定设备才能够使用。对于普通的WIFI连接类型设备，绑定设备之前，首先需在APP上给出配置设备进入SmartConfig状态的提示；然后填写当前手机连接的WiFi和密码，调用startAbleLink将SSID与密码广播给设备，设备拿到WiFi密码后连接到云端然后开始局域网广播自己的物理Id和subdomainId，APP拿到回调后即可以调用bindDevice接口绑定设备。</p>
<p>1 普通SmartLink配网<br />
<img alt="" src="///E://work/frontwork/ngx-os/images/DM_wifi.png" /></p>
<p>1.获取设备激活器</p>
<p>MAX提供了ACDeviceActivator激活器供你使用，具体使用步骤如下：</p>
<p><code>`
//以汉枫模块为例
ACDeviceActivator deviceActivator = AC.deviceActivator(AC.DEVICE_HF);</code></p>
<blockquote>
<p>注：AC.DEVICE_HF表示汉枫的wifi模块，如果用的是其它的wifi模块，则需要改成相对应的值。 目前支持的wifi模块有：AC.DEVICE_MTK(MTK模块)、AC.DEVICE_MX（庆科模块）、AC.DEVICE_MARVELL（MARVELL模块）、AC.DEVICE_MURATA（村田模块）、AC.DEVICE_WM（联盛德模块）、AC.DEVICE_RAK（RAK模块）、AC.DEVICE_TI、AC.DEVICE_ESP8266、AC.DEVICE_REALTEK、AC.DEVICE_AI6060H、AC.DEVICE_MILL、AC.DEVICE_GUBEI(古北模块)。</p>
</blockquote>
<p>2.获取WiFi的SSID</p>
<p><code>deviceActivator. getSSID()</code></p>
<p>3.激活设备</p>
<p>APP通过startAbleLink广播自己的WiFi密码，设备成功连上云之后通过广播通知APP同时获取设备物理Id和subDomainId（用来区分设备类型）。只支持配置手机当前连接的WiFi。</p>
<p>```<br />
//ssid为wifi名，password为wifi密码，AC.DEVICE_ACTIVATOR_DEFAULT_TIMEOUT为AC默认的配网超时时间60s，具体可根据实际情况测试进行修改。<br />
deviceActivator.startAbleLink(ssid, password,  AC.DEVICE_ACTIVATOR_DEFAULT_TIMEOUT, new PayloadCallback<List<ACDeviceBind>&gt;() {<br />
    @Override<br />
    public void success(List<ACDeviceBind> deviceBinds) {<br />
        //成功后得到已激活设备的列表，从列表中得到物理id后可调用AC.bindMgr()的bindDevice接口进行绑定<br />
    }</p>
<pre><code>@Override
public void error(ACException e) {
    //根据e.getErrorCode()做不同的提示或处理
}
</code></pre>
<p>});<br />
```</p>
<p>以下为该接口详细的错误信息描述</p>
<table>
<thead>
<tr>
<th>错误码</th>
<th>错误描述</th>
<th>可能原因</th>
</tr>
</thead>
<tbody>
<tr>
<td>1960</td>
<td>局域网内没有发现设备</td>
<td>设备配网失败、发送广播失败</td>
</tr>
<tr>
<td>1961</td>
<td>MCU注册失败</td>
<td>MCU与WiFi通信错误</td>
</tr>
<tr>
<td>1962</td>
<td>建立长连接失败</td>
<td>弱网络环境、路由器未能连接云端</td>
</tr>
<tr>
<td>1963</td>
<td>与云端激活认证失败</td>
<td>弱网络环境、密钥烧录错误</td>
</tr>
<tr>
<td>1999</td>
<td>网络错误或其他</td>
<td>app联网错误</td>
</tr>
</tbody>
</table>
<blockquote>
<p>若希望这个配网日志可以上报到云端，通过MAX控制台设备管理查看该设备配网的详细流程，则还需要集成MAX大数据分析SDK即可。</p>
</blockquote>
<p>4.停止激活设备</p>
<p>建议在退出激活设备的页面时，调用以下接口。</p>
<p><code>@Override
protected void onDestroy() {
    super.onDestroy();
    if (deviceActivator.isAbleLink())
        deviceActivator.stopAbleLink();
}</code></p>
<blockquote>
<p>如激活设备过程中用户手动停止配网，则调用stopAbleLink接口即可。</p>
</blockquote>
<p>2 AP模式配网<br />
配网原理</p>
<p>AP模式配网是指通过APP连接设备发出的AP热点, 然后将设备正常工作时候的WIFI信息发送给设备, 完成设备配网的过程</p>
<p>适用场景</p>
<p>所有支持AP模式的设备, 建议在普通SmartConfig配网模式配网失败的情况下使用。</p>
<p>整体实现流程<br />
<img alt="" src="///E://work/frontwork/ngx-os/images/AP.png" /></p>
<p>代码示例</p>
<p>1、 APP连接设备的AP热点 APP在UI界面上给出提示，让用户点击设备上对应的进入AP模式的按键, 确认设备进入配网模式，同时提示用户连接该AP热点。</p>
<p>2、 APP获取设备可用WIFI列表 手机连接到设备AP热点后, 切换到APP页面, 发送请求给设备, 以获取设备可用的WIFI列表：</p>
<p>```<br />
ACDeviceActivator deviceActivator = AC.deviceActivator(AC.DEVICE_AP);<br />
//第一个参数为超时时间，单位为毫秒，此处建议为10s<br />
deviceActivator.searchAvailableWifi(10000, new PayloadCallback<List<ACWifiInfo>&gt;() {<br />
    @Override<br />
    public void success(List<ACWifiInfo> wifiInfos) {<br />
        for (ACWifiInfo info : wifiInfos) {<br />
            //WiFi的SSID<br />
            String ssid = info.getSsid();<br />
            //WiFi的信号强度<br />
            String power = info.getPower();<br />
        }<br />
    }</p>
<pre><code>@Override
public void error(ACException e) {
    //
}
</code></pre>
<p>});<br />
```</p>
<blockquote>
<p>建议开发者在获取到WIFI列表后,弹窗或者以Spinner控件展示,方便用户点击对应的WIFI直接输入密码.</p>
</blockquote>
<p>3、 APP选择设备要工作的目标WIFI, 发送SSID和密码(以SSID:Hello_world, 密码:123456为例)</p>
<p>```<br />
//AC.DEVICE_ACTIVATOR_DEFAULT_TIMEOUT：使用默认超时时间60s<br />
//第一个回调为配置SSID与Password成功与否的回调，建议传null；只用于调试阶段分析问题。<br />
//第二个回调为设备是否连云成功的回调。配置成功与否以第二个回调为主<br />
deviceActivator.startApLink(&ldquo;Hello_world&rdquo;, &ldquo;123456&rdquo;, AC.DEVICE_ACTIVATOR_DEFAULT_TIMEOUT, null, new PayloadCallback<ACDeviceBind>() {<br />
    @Override<br />
    public void success(ACDeviceBind deviceBind) {<br />
        //设备已成功连接，通过ACDeviceBind获取到物理ID进行绑定设备操作<br />
    }</p>
<pre><code>@Override
public void error(ACException e) {
    //此处一般为1993的超时错误，建议处理逻辑为页面上提示配网失败，提示用户检查自己输入的WIFI信息是否正确等，回到上述第一步骤，重新开始所有配网步骤。
}
</code></pre>
<p>});<br />
```</p>
<p>4、 在APP发送SSID和密码的同时，同步更新UI界面，提示用户切换手机WiFi连接到Hello_world（手机进入设置-&gt;无限局域网, 选择目标WIFI, 连接. 然后切回到APP界面）, 等待设备将物理ID等信息返回. 开发者拿到ACDeviceBind回调后可调用绑定接口进行设备绑定操作等。</p>
<h6 id='4.4.2.3.4'>设备管理</h6>

<p>1 绑定设备<br />
对于WIFI设备，则需要先经过设备配网后，APP拿到配网的回调调用bindDevice接口绑定设备。<br />
对于GPRS设备，则无需以上设备激活的流程，通过扫码或其他方式获取物理Id后调用bindDevice进行绑定即可。建议流程：若设备上有是否连接上MAX云端的指示灯，则可以提示用户在指示灯亮起的时候绑定设备。若无指示灯，则可在用户点击开始绑定之后，建议通过CountDownTimer每隔2s钟绑定一次设备，在连续绑定几次之后再提示用户失败或成功。</p>
<blockquote>
<p>注意：调用bindDevice接口时要求设备已经连上云端且当前在线。</p>
</blockquote>
<p>1.1 普通设备</p>
<p>通过获取到的subdomainID匹配subdomain，然后在成功激活设备后的回调方法中，通过subdomian和物理Id绑定设备。</p>
<p>```<br />
AC.bindMgr().bindDevice(subDomain, physicalDeviceId, deviceName, new PayloadCallback<ACUserDevice>() {<br />
    @Override<br />
    public void success(ACUserDevice userDevice) {<br />
        //绑定成功后返回设备信息<br />
    }</p>
<pre><code>@Override
public void error(ACException e) {
    //网络错误或其他，根据e.getErrorCode()做不同的提示或处理
}
</code></pre>
<p>});<br />
```</p>
<p>设备无法绑定时，请检查以下问题：</p>
<p>1.设备已经被其他人绑定过了。<br />
2.设备的domain和subdomain信息有误。<br />
3.确保设备已经连上云端，如电源供电是否正常等。（可通过MAX管理控制台中的 设备管理 查看设备是否在线判断已经连上云端）<br />
绑定成功后，通过listDevice 接口可以列出已经绑定的设备列表。</p>
<p>2 分享设备<br />
第一种分享方式是管理员输入用户的帐号（手机号）直接把设备分享给用户<br />
第二种方式为管理员分享二维码后，用户再通过扫码的形式绑定设备获得设备的使用权。推荐使用第二种分享机制。<br />
管理员直接分享设备给已注册的普通用户</p>
<p>```<br />
AC.bindMgr().bindDeviceWithUser(subDomain, deviceId, account, new VoidCallback() {<br />
    @Override<br />
    public void success() {<br />
        //成功分享设备给account用户<br />
    }</p>
<pre><code>@Override
public void error(ACException e) {
    //网络错误或其他，根据e.getErrorCode()做不同的提示或处理
}
</code></pre>
<p>});<br />
```</p>
<p>管理员通过分享设备二维码的形式分享设备</p>
<p>```<br />
//管理员获取分享码<br />
AC.bindMgr().fetchShareCode(deviceId, timeout, new PayloadCallback<String>() {<br />
    @Override<br />
    public void success(String shareCode) {<br />
         //成功获取分享码<br />
    }</p>
<pre><code>@Override
public void error(ACException e) {
     //网络错误或其他，根据e.getErrorCode()做不同的提示或处理
}
</code></pre>
<p>});<br />
//普通用户通过扫分享码绑定设备<br />
bindMgr.bindDeviceWithShareCode(shareCode, new PayloadCallback<ACUserDevice>() {<br />
    @Override<br />
    public void success(ACUserDevice userDevice) {<br />
         //成功绑定管理员分享的设备<br />
    }</p>
<pre><code>@Override
public void error(ACException e) {
     //网络错误或其他，根据e.getErrorCode()做不同的提示或处理
}
</code></pre>
<p>});<br />
```<br />
注：管理员分享的二维码有有效期。默认为一个小时。调用fetchShareCode接口时开发者可以自定义有效时间。若已存在未过期二维码则返回原有二维码并更新timeout时间，若原有二维码已过期则返回新的二维码。</p>
<p>同时还提供了重新生成分享码的接口（原分享码会失效）<br />
```<br />
AC.bindMgr().refreshShareCode(deviceId, timeout, new PayloadCallback<String>() {<br />
    @Override<br />
    public void success(String shareCode) {<br />
         //成功刷新分享码<br />
    }</p>
<pre><code>@Override
public void error(ACException e) {
     //网络错误或其他，根据e.getErrorCode()做不同的提示或处理
}
</code></pre>
<p>});<br />
```<br />
相关注意事项如下:</p>
<p>设备的逻辑ID可以通过调用listDevice接口获取.<br />
如果获取失败, 请检查子域和设备逻辑ID是否在正确.<br />
该接口只有设备管理员才可以调用.<br />
建议开发者将分享码做成二维码, 然后让其他用户通过扫码绑定<br />
3 解绑设备<br />
管理员或普通用户解绑设备<br />
```<br />
bindMgr.unbindDevice(subDomain, deviceId, new VoidCallback() {<br />
    @Override<br />
    public void success() {<br />
        //解绑成功<br />
    }</p>
<pre><code>@Override
public void error(ACException e) {
    //网络错误或其他，根据e.getErrorCode()做不同的提示或处理
}
</code></pre>
<p>});<br />
<code>注意：如果是管理员解绑设备，那么其他绑定该设备的普通成员也会失去该设备的使用权。
管理员取消其他普通成员对该设备的控制权</code><br />
bindMgr.unbindDeviceWithUser(subDomain, userId, deviceId, new VoidCallback() {<br />
    @Override<br />
    public void success() {<br />
        //解绑成功<br />
    }</p>
<pre><code>@Override
public void error(ACException e) {
    //网络错误或其他，根据e.getErrorCode()做不同的提示或处理
}
</code></pre>
<p>});<br />
```<br />
<h6 id='4.4.2.3.5'>设备数据</h6><br />
设备数据分为设备属性数据与设备状态数据。</p>
<p>他们都可以进行实时消息订阅，进行订阅操作后，APP和云端建立长连接, 设备属性数据的变化与设备状态的变更会通过云端实时推送给APP。<br />
其中设备属性数据同时提供了获取历史属性数据以及当前设备属性数据的接口。<br />
1 代码示例<br />
1.1 设备属性数据</p>
<p>设备属性可前往【控制台-&gt;产品管理-&gt;属性设置】进行创建。</p>
<p>以空气净化器为例来说明。</p>
<table>
<thead>
<tr>
<th>属性名</th>
<th>类型</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>pm25</td>
<td>整数</td>
<td>pm2.5值</td>
</tr>
<tr>
<td>speed</td>
<td>整数</td>
<td>当前风机转速</td>
</tr>
<tr>
<td>mode</td>
<td>字符串</td>
<td>当前净化器状态(auto(自动), high(高速), medium(中速), low(低速))</td>
</tr>
</tbody>
</table>
<p><img alt="" src="///E://work/frontwork/ngx-os/images/%E8%AE%BE%E5%A4%87%E5%B1%9E%E6%80%A7%E9%85%8D%E7%BD%AE.png" /></p>
<p>（1）获取设备属性</p>
<p>设备属性的当前数据和历史数据可前往【控制台-&gt;设备管理-&gt;对应设备详情-&gt;属性数据】进行查看。</p>
<p><img alt="" src="///E://work/frontwork/ngx-os/images/%E8%AE%BE%E5%A4%87%E5%B1%9E%E6%80%A7%E6%95%B0%E6%8D%AE.png" /></p>
<p>获取设备历史属性数据<br />
```<br />
//设置过滤条件 pm25 = 10 &amp;&amp; speed &lt; 20<br />
Criteria criteria = Criteria.create()<br />
                            .andWhere(Expression.eq(&ldquo;pm25&rdquo;, 10))<br />
                            .andWhere(Expression.lt(&ldquo;speed&rdquo;, 20));</p>
<p>long now = System.currentTimeMillis();<br />
//新建历史数据搜索条件实例<br />
QueryOption option = new QueryOption(criteria)<br />
                    //默认返回<strong>所有</strong>属性字段，如下设置后结果只返回 @&rdquo;pm25&rdquo;和@&rdquo;speed&rdquo; 字段<br />
                    //.projection(new String[]{&ldquo;pm25&rdquo;, &ldquo;speed&rdquo;})<br />
                    .startTime(now - TimeUnit.DAYS.toMillis(1))<br />
                    .endTime(now)<br />
                    .limit(20);</p>
<p>//发起查询请求<br />
AC.deviceDataMgr().fetchHistoryProperty(&ldquo;subDomain&rdquo;, 45, option,<br />
    new PayloadCallback<List<String>&gt;() {<br />
        @Override<br />
        public void success(List<String> strings) {<br />
            //拉取数据成功后的操作<br />
            ArrayList<AirPropertyRecord> list = new ArrayList&lt;&gt;();<br />
            if (strings != null) {<br />
                Gson gson = new Gson();<br />
                for (String string : strings) {<br />
                    list.add(gson.fromJson(string, AirPropertyRecord.class));<br />
                }<br />
            }<br />
        }</p>
<pre><code>    @Override
    public void error(ACException e) {
        //拉取数据错误提示
    }
}
</code></pre>
<p>);<br />
<code>其中AirPropertyRecord是业务相关的JavaBean类</code><br />
public class AirPropertyRecord extends PropertyRecord {<br />
    public int pm25;<br />
    public int speed;<br />
}<br />
<code>默认情况下（即QueryOtion.projection == null时），属性数据包含设备ID和该条数据的时间戳，可将PropertyRecord作为基类</code><br />
public class PropertyRecord {<br />
    public long id;<br />
    public long timestamp;<br />
}<br />
```<br />
相关注意事项如下:<br />
option搜索实例，若不设置则默认limit为20条，上限为1000条。<br />
option搜索实例，若不设置搜索起始时间startTime，则默认从最早的数据开始搜索。<br />
option搜索实例，若不设置搜索结束时间endTime，则默认查询到最新一条数据。<br />
option搜索实例，若不设置检索返回属性字段数组projection，则默认返回所有属性字段。也可自定义搜索返回字段如：option.projection(new String[]{&ldquo;pm25&rdquo;, &ldquo;speed&rdquo;});<br />
option搜索实例可以对属性字段设置多种过滤条件，通过Expression类:相等（eq）,小于（lt）,大于（gt）,小于等于（lte）,大于等于（gte)。<br />
返回结果均带有timestamp属性。</p>
<p>获取设备当前属性数据<br />
<code>AC.deviceDataMgr().fetchCurrentProperty("subDomain", 45,
     new PayloadCallback&lt;String&gt;() {
         @Override
         public void success(String string) {
             //拉取数据成功后的操作
             if (string != null) {
                 new Gson().fromJson(string, AirPropertyRecord.class);
             }
         }
     }
);</code><br />
(2)订阅设备属性实时变化<br />
当设备上报属性数据至UDS后，UDS可调用属性数据存储并推送接口，对对应设备进行属性数据实时推送，此时APP只需要订阅该设备的属性数据推送并设置了回调处理函数，则可以实现实时数据的获取与处理。<br />
订阅设备属性数据实时推送消息:<br />
```<br />
AC.deviceDataMgr().subscribeProperty(&ldquo;subDomain&rdquo;, 45,<br />
    new VoidCallback() {<br />
        @Override<br />
        public void success() {<br />
            //订阅成功提示<br />
        }</p>
<pre><code>    @Override
    public void error(ACException e) {
        //订阅失败提示
    }
}
</code></pre>
<p>);<br />
```<br />
相关注意事项如下:<br />
SubDomain为设备所属的子域<br />
deviceId为设备的激活id<br />
如果回调结果无错误则表明订阅操作成功</p>
<p>取消订阅设备属性数据实时推送消息:</p>
<p><code>AC.deviceDataMgr().unSubscribeProperty("subDomain", 45,
    new VoidCallback() {
        @Override
        public void success() {
            //取消订阅提示
        }
        @Override
        public void error(ACException e) {
            //取消订阅提示
        }
    }
);</code></p>
<p>相关注意事项如下:</p>
<p>SubDomain为设备所属的子域<br />
deviceId为设备的激活id<br />
如果回调结果无错误则表明取消订阅操作成功<br />
下面同时提供了取消订阅所有设备实时属性数据推送的接口。</p>
<p>取消订阅所有设备属性数据实时推送消息:<br />
<code>AC.deviceDataMgr().unSubscribeAllProperty();</code><br />
设置设备属性数据实时消息回调:<br />
```<br />
// 注册回调<br />
AC.deviceDataMgr().registerPropertyReceiver(/<em>ACDeviceDataMgr.PropertyReceiver</em>/ receiver);</p>
<p>// 解注册回调<br />
AC.deviceDataMgr().unregisterPropertyReceiver(/<em>ACDeviceDataMgr.PropertyReceiver</em>/ receiver);<br />
<code>PropertyReceiver是回调接口</code><br />
interface PropertyReceiver {<br />
    void onPropertyReceive(String subDomain, long deviceId, String value);<br />
}<br />
```<br />
相关注意事项如下:</p>
<p>SubDomain为设备所属的子域<br />
deviceId为设备的激活id<br />
value为设备新增的所有属性键值<br />
此回调方法可以在您代码的任意位置进行设置。</p>
<p>可以用JavaBean类来表示value的值，比如空气净化器的属性<br />
```<br />
AirProperty status = new Gson().fromJson(value, AirProperty.class);</p>
<p>public class AirProperty {<br />
    public int pm25;<br />
    public int speed;<br />
}</p>
<p>```<br />
1.2 设备状态数据</p>
<p>订阅设备状态实时消息<br />
```<br />
AC.deviceDataMgr().subscribeOnlineStatus(&ldquo;subDomain&rdquo;, 45,<br />
    new VoidCallback() {<br />
        @Override<br />
        public void success() {<br />
            //订阅成功提示<br />
        }</p>
<pre><code>    @Override
    public void error(ACException e) {
        //订阅失败提示
    }
}
</code></pre>
<p>);<br />
```<br />
相关注意事项如下:</p>
<p>SubDomain为设备所属的子域<br />
deviceId为设备的激活id<br />
如果回调结果无错误则表明订阅操作成功<br />
下面同时提供了取消订阅所有设备状态推送的接口。</p>
<p>取消订阅设备状态实时消息<br />
```<br />
AC.deviceDataMgr().unSubscribeOnlineStatus(&ldquo;subDomain&rdquo;, 45,<br />
    new VoidCallback() {<br />
        @Override<br />
        public void success() {<br />
            //取消订阅提示<br />
        }</p>
<pre><code>    @Override
    public void error(ACException e) {
        //取消订阅提示
    }
}
</code></pre>
<p>);<br />
```</p>
<p>相关注意事项如下:</p>
<p>SubDomain为设备所属的子域<br />
deviceId为设备的激活id<br />
如果回调结果无错误则表明取消订阅操作成功</p>
<p>取消订阅所有设备状态推送消息:<br />
<code>AC.deviceDataMgr().unSubscribeAllOnlineStatus();</code><br />
设置设备实时状态回调:<br />
```<br />
// 注册回调<br />
AC.deviceDataMgr().registerOnlineStatusListener(/<em>ACDeviceDataMgr.OnlineStatusListener</em>/ listener);</p>
<p>// 解注册回调<br />
AC.deviceDataMgr().unregisterOnlineStatusListener(/<em>ACDeviceDataMgr.OnlineStatusListener</em>/ listener);<br />
<code>OnlineStatusListener是回调接口</code><br />
interface OnlineStatusListener {<br />
    void onStatusChanged(String subDomain, long deviceId, boolean online);<br />
}<br />
```<br />
相关注意事项如下:</p>
<p>SubDomain为设备所属的子域<br />
deviceId为设备的激活id<br />
online为设备状态，true为在线，false为离线<br />
此回调方法可以在您代码的任意位置进行设置。<br />
1.3 设备故障数据</p>
<p>获取设备当前故障属性属性值<br />
其中AirWarningRecord是业务相关的JavaBean类<br />
```<br />
AC.deviceDataMgr().subscribeWarning(&ldquo;subDomain&rdquo;, 45,<br />
    new VoidCallback() {<br />
        @Override<br />
        public void success() {<br />
            //订阅成功提示<br />
        }</p>
<pre><code>    @Override
    public void error(ACException e) {
        //订阅失败提示
    }
}
</code></pre>
<p>);<br />
```</p>
<p>相关注意事项如下:<br />
SubDomain为设备所属的子域<br />
deviceId为设备的激活id<br />
如果回调结果无错误则表明订阅操作成功<br />
下面同时提供了取消订阅所有设备故障属性数据推送的接口。</p>
<p>取消订阅所有故障属性数据推送消息:<br />
<code>AC.deviceDataMgr().unSubscribeAllWarning();</code></p>
<p>取消订阅设备故障属性数据实时消息<br />
```<br />
AC.deviceDataMgr().unSubscribeWarning(&ldquo;subDomain&rdquo;, 45,<br />
    new VoidCallback() {<br />
        @Override<br />
        public void success() {<br />
            //取消订阅提示<br />
        }</p>
<pre><code>    @Override
    public void error(ACException e) {
        //取消订阅提示
    }
}
</code></pre>
<p>);<br />
```</p>
<p>相关注意事项如下:</p>
<p>SubDomain为设备所属的子域<br />
deviceId为设备的激活id<br />
如果回调结果无错误则表明取消订阅操作成功</p>
<p>设置设备实时故障属性数据回调:<br />
```<br />
// 注册回调<br />
AC.deviceDataMgr().registerWarningReceiver(/<em>ACDeviceDataMgr.WarningReceiver</em>/ receiver);</p>
<p>// 解注册回调<br />
AC.deviceDataMgr().unregisterWarningReceiver(/<em>ACDeviceDataMgr.WarningReceiver</em>/ receiver);<br />
```</p>
<p>WarningReceiver是回调接口<br />
<code>interface WarningReceiver {
    void onWarningReceive(String subDomain, long deviceId, String value);
}</code></p>
<p>相关注意事项如下:</p>
<p>SubDomain为设备所属的子域<br />
deviceId为设备的激活id<br />
value为设备故障属性数据，其中键值对与管理平台中产品故障属性定义相对应。 其中键&rdquo;_overall&rdquo;的数据代表 0：整机无故障，1：整机有故障。<br />
此回调方法可以在您代码的任意位置进行设置。</p>
<h6 id='4.4.2.3.6'>设备通信</h6>

<p>说明：在设备尚未开发完成时，在管理后台可以启动虚拟设备用于APP的调试。虚拟设备和真实设备使用方法相同，需要先绑定再使用。虚拟设备能够显示APP发到设备的指令，上报数据到云端、填入数据供APP查询。</p>
<p>1 发送消息到设备<br />
1.1 使用二进制通信格式</p>
<p>例如：以开关设备为例,协议如下:<br />
<code>//请求数据包
{ 68 ：
    //开关灯(二进制流，由厂商自己解析)，其中0代表关灯，1代表开灯
    [ 0/1 , 0 , 0 , 0 ]
}
//响应数据包  
{ 102 ：
    //结果(二进制流，由厂商自己解析)，其中0代表失败，1代表成功
    [ 0/1 , 0 , 0 , 0 ]
}</code><br />
截取开灯代码，如下:<br />
```<br />
public class LightMsg {<br />
    public static final int REQ_CODE = 68;<br />
    public static final int RESP_CODE = 102;</p>
<pre><code>//0代表关，1代表开
public static final byte ON = 1;
public static final byte OFF = 0;

private byte ledOnOff;

public LightMsg(byte ledOnOff) {
    this.ledOnOff = ledOnOff;
}

public byte[] getLedOnOff() {
    return new byte[]{ledOnOff, 0, 0, 0};
}

public String getDescription(){
    if(ledOnOff == OFF)
        return "close light";
    else 
        return "open light";
}
</code></pre>
<p>}<br />
```</p>
<p>```<br />
LightMsg lightMsg = new LightMsg(LightMsg.ON);<br />
//初始化ACDeviceMsg对象消息体，设置发送的msgCode及消息内容<br />
ACDeviceMsg deviceMsg = new ACDeviceMsg(LightMsg.REQ_CODE, lightMsg.getLedOnOff(), lightMsg.getDescription());</p>
<p>//设置局域网通讯加密方式，不设置则默认为动态加密<br />
//deviceMsg.setSecurityMode(ACDeviceSecurityMode.DYNAMIC_ENCRYPTED);</p>
<p>//AC.LOCAL_FIRST代表优先走局域网，局域网不通的情况下再走云端<br />
bindMgr.sendToDeviceWithOption(subDomain, physicalDeviceId, deviceMsg, AC.LOCAL_FIRST, new PayloadCallback<ACDeviceMsg>() {<br />
    @Override<br />
    public void success(ACDeviceMsg deviceMsg) {<br />
        byte[] resp = deviceMsg.getContent();<br />
        if(resp[0] == 1){<br />
            //开灯成功<br />
        } else {<br />
            //开灯失败<br />
        }<br />
    }</p>
<pre><code>@Override
public void error(ACException e) {
    //网络错误或其他，根据e.getErrorCode()做不同的提示或处理
}
</code></pre>
<p>});<br />
```</p>
<p>发送到设备sendToDeviceWithOption的参数枚举如下：</p>
<p>AC.LOCAL_FIRST代表优先走局域网，局域网不通的情况下走云端通讯<br />
AC.CLOUD_FIRST代表优先走云端，云端不通的情况下走局域网通讯<br />
AC.ONLY_LOCAL代表仅通过局域网通讯<br />
AC.ONLY_CLOUD代表仅通过云端通讯</p>
<p>1.2 使用json通信格式</p>
<p>例如：以开关设备为例,协议如下:1.2 使用json通信格式</p>
<p>例如：以开关设备为例,协议如下:<br />
<code>//请求数据包
{ 70 ：
    {
        //开关灯，其中0代表关灯，1代表开灯
        "switch" : 0/1
    }
}
//响应数据包  
{
     //结果，其中false代表失败，1代表成功
     "result" : false/true
}</code></p>
<p>```<br />
JSONObject req = new JSONObject();<br />
try {<br />
    req.put(&ldquo;switch&rdquo;, 1);<br />
} catch (JSONException e) {<br />
}<br />
//初始化ACDeviceMsg对象消息体，设置发送的msgCode及消息内容<br />
ACDeviceMsg deviceMsg = new ACDeviceMsg(70, req.toString().getBytes(), &ldquo;open light&rdquo;);</p>
<p>//设置局域网通讯加密方式，不设置则默认为动态加密<br />
//deviceMsg.setSecurityMode(ACDeviceSecurityMode.DYNAMIC_ENCRYPTED);</p>
<p>//AC.LOCAL_FIRST代表优先走局域网，局域网不通的情况下再走云端<br />
bindMgr.sendToDeviceWithOption(subDomain, physicalDeviceId, deviceMsg, AC.LOCAL_FIRST, new PayloadCallback<ACDeviceMsg>() {<br />
    @Override<br />
    public void success(ACDeviceMsg deviceMsg) {<br />
        try {<br />
            JSONObject resp = new JSONObject(new String(deviceMsg.getContent()));<br />
        } catch (JSONException e) {<br />
        }<br />
        boolean result = resp.optBoolean(&ldquo;result&rdquo;);<br />
        if (result) {<br />
            //开灯成功<br />
        } else {<br />
            //开灯失败<br />
        }<br />
    }</p>
<pre><code>@Override
public void error(ACException e) {
    //网络错误或其他，根据e.getErrorCode()做不同的提示或处理
}
</code></pre>
<p>});<br />
```</p>
<p>发送到设备sendToDeviceWithOption的参数枚举如下：</p>
<p>AC.LOCAL_FIRST代表优先走局域网，局域网不通的情况下走云端通讯<br />
AC.CLOUD_FIRST代表优先走云端，云端不通的情况下走局域网通讯<br />
AC.ONLY_LOCAL代表仅通过局域网通讯<br />
AC.ONLY_CLOUD代表仅通过云端通讯</p>
<p>2 局域网通信<br />
以下按照两种不同的适用场景进行讲解。</p>
<p>2.1 纯局域网下控制设备</p>
<p>适用场景:在已知完全没有外网的情况下控制设备，建议使用不加密/静态加密的方式控制设备。如选择不加密／静态加密方式，设备端亦需要配合修改初始化参数。</p>
<p>获取局域网内的设备列表<br />
```<br />
//AC.FIND_DEVICE_DEFAULT_TIMEOUT为获取局域网内设备的超时时间，默认3s，<br />
AC.findLocalDevice(AC.FIND_DEVICE_DEFAULT_TIMEOUT, new PayloadCallback<List<ACDeviceFind>&gt;() {<br />
    @Override<br />
    public void success(List<ACDeviceFind> deviceFinds) {<br />
        //没有发现局域网内设备的情况下则返回deviceFinds为空的ArrayList<br />
        //ACDeviceFind对象中包含设备的物理ID及IP，可用于更新界面或者判断当前设备是否在线。<br />
    }</p>
<pre><code>@Override
public void error(ACException e) {
    //此处一般是在手机主动关闭了WiFi连接时才会返回
    if(e.getErrorCode == ACException.NO_WIFI_CONNECTED)
            Toast.makeText(this, "请您打开WiFi便于控制设备", Toast.LENGTH_LONG).show();
}
</code></pre>
<p>});<br />
```</p>
<p>只有实时发现的设备列表可以实现局域网的控制。<br />
发送消息到设备</p>
<p>以msgCode为64，payload为[1，0，0，0]为设备开灯协议举例<br />
```<br />
ACDeviceMsg deviceMsg = new ACDeviceMsg(64, new byte[]{1,0,0,0}, &ldquo;open light&rdquo;);</p>
<p>//设置局域网通讯加密方式，此处设置静态加密，不设置则默认为动态加密<br />
deviceMsg.setSecurityMode(ACDeviceSecurityMode.STATIC_ENCRYPTED);</p>
<p>//AC.ONLY_LOCAL代表仅通过局域网直连控制<br />
bindMgr.sendToDeviceWithOption(subDomain, physicalDeviceId, deviceMsg, AC.ONLY_LOCAL, new PayloadCallback<ACDeviceMsg>() {<br />
    @Override<br />
    public void success(ACDeviceMsg deviceMsg) {<br />
        //成功发送设备指令并收到设备响应<br />
    }</p>
<pre><code>@Override
public void error(ACException e) {
    //网络错误或其他，根据e.getErrorCode()做不同的提示或处理
}
</code></pre>
<p>});<br />
```</p>
<p>2.2 局域网/云端优先控制设备</p>
<p>适用场景：若通过局域网控制设备失败后，仍需要通过云端发送消息到设备；反之亦相同。</p>
<p>从云端获取已绑定设备的列表</p>
<p>获取设备列表（在网络环境差或者没有外网的情况下如果获取不到设备列表会从本地缓存里取设备列表）。</p>
<p>```<br />
//获取设备列表<br />
public void getDeviceList() {<br />
    bindMgr.listDevicesWithStatus(new PayloadCallback<List<ACUserDevice>&gt;() {<br />
        @Override<br />
        public void success(List<ACUserDevice> deviceList) {<br />
            for(ACUserDevice device:deviceList){<br />
                /*<em><br />
                 * 设备在线状态(listDeviceWithStatus时返回，listDevice不返回该值)<br />
                 * 0不在线 1云端在线 2局域网在线 3云端和局域网同时在线<br />
                 * 若只选择直连的通讯方式，则只有在2和3的状态下才能往设备发送成功<br />
</em>/<br />
                device.getStatus();<br />
            }<br />
        }</p>
<pre><code>    @Override
    public void error(ACException e) {
        //建议不做处理
    }
});
</code></pre>
<p>}<br />
```</p>
<p>注意：app启动初始化MAX时会自动获取局域网设备，由于获取局域网设备是一个异步过程（默认时间为2s，可以根据实际情况设置AC.INIT_APP_DEFAULT_TIMEOUT的值，建议为闪屏页的时间），所以建议在启动app到打开设备列表页面之间增加一个闪屏页面。<br />
定时刷新界面上的局域网状态</p>
<p>注意：若不需要在APP界面上实时显示局域网的状态，则不需要此步骤，直接进入下一步骤发送消息到设备</p>
<p>因为局域网通讯要求设备与APP处于同一个WiFi下，若网络环境变化，如切换手机WiFi，或者设备掉线时，直连的状态需要发生改变，所以建议在设备页通过定时器定时更新局域网状态，具体可参照ac-service-android-demo的实现<br />
```</p>
<p>//定时更新设备当前的局域网状态<br />
public void refreshDeviceStatus() {<br />
    //当设备掉线或网络环境不稳定导致获取局域网显示状态不准确时，需要手动刷新设备列表与局域网状态<br />
    AC.findLocalDevice(AC.FIND_DEVICE_DEFAULT_TIMEOUT, new PayloadCallback<List<ACDeviceFind>&gt;() {<br />
        @Override<br />
        public void success(List<ACDeviceFind> deviceFinds) {<br />
            //成功获取局域网内的设备列表，通过匹配已有的设备列表更新界面上的局域网状态，以下为示例参考代码：<br />
            //局域网状态是否发生改变,是否需要更新界面<br />
            boolean isRefresh = false;<br />
            //遍历当前用户绑定的所有设备列表<br />
            for (ACUserDevice device : adapter.deviceList) {<br />
                //判断当前设备是否局域网本地在线<br />
                boolean isLocalOnline = false;<br />
                //遍历当前发现的局域网在线列表<br />
                for (ACDeviceFind deviceFind : deviceFinds) {<br />
                    //通过设备的物理Id进行匹配,若当前设备在发现的局域网列表中,则置为局域网在线<br />
                    if (device.getPhysicalDeviceId().equals(deviceFind.getPhysicalDeviceId())) {<br />
                        isLocalOnline = true;<br />
                    }<br />
                }<br />
                if (isLocalOnline) {<br />
                    //当前设备由不在线更新为局域网在线<br />
                    if (device.getStatus() == ACUserDevice.OFFLINE) {<br />
                        device.setStatus(ACUserDevice.LOCAL_ONLINE);<br />
                        isRefresh = true;<br />
                    //当前设备由云端在线更新为云端局域网同时在线<br />
                    } else if (device.getStatus() == ACUserDevice.NETWORK_ONLINE) {<br />
                        device.setStatus(ACUserDevice.BOTH_ONLINE);<br />
                        isRefresh = true;<br />
                    }<br />
                } else {<br />
                    //当前设备由局域网在线更新为不在线<br />
                    if (device.getStatus() == ACUserDevice.LOCAL_ONLINE) {<br />
                        device.setStatus(ACUserDevice.OFFLINE);<br />
                        isRefresh = true;<br />
                    //当前设备由云端局域网同时在线更新为云端在线<br />
                    } else if (device.getStatus() == ACUserDevice.BOTH_ONLINE) {<br />
                        device.setStatus(ACUserDevice.NETWORK_ONLINE);<br />
                        isRefresh = true;<br />
                    }<br />
                }<br />
            }<br />
            //局域网状态需要发生改变,更新列表界面<br />
            if (isRefresh)<br />
                adapter.notifyDataSetChanged();<br />
        }</p>
<pre><code>    @Override
    public void error(ACException e) {
        //发生IO错误，将所有设备的局域网状态置为不在线，以下为示例参考代码：
        //局域网状态可能发生改变,判断是否需要更新界面上的列表显示
        boolean isRefresh = false;
        for (ACUserDevice device : adapter.deviceList) {
            //没有设备当前局域网在线,所以把所有当前显示局域网在线的设备状态重置
            if (device.getStatus() == ACUserDevice.LOCAL_ONLINE) {
                device.setStatus(ACUserDevice.OFFLINE);
                isRefresh = true;
            } else if (device.getStatus() == ACUserDevice.BOTH_ONLINE) {
                device.setStatus(ACUserDevice.NETWORK_ONLINE);
                isRefresh = true;
            }
        }
        //局域网状态需要发生改变,更新列表界面
        if (isRefresh)
            adapter.notifyDataSetChanged();
    }
});
</code></pre>
<p>}</p>
<p>```</p>
<p>发送消息到设备</p>
<p>以msgCode为64，payload为[1，0，0，0]为设备开灯协议举例</p>
<p>```<br />
ACDeviceMsg deviceMsg = new ACDeviceMsg(64, new byte[]{1,0,0,0}, &ldquo;open light&rdquo;);</p>
<p>//设置局域网通讯加密方式，此处设置静态加密，不设置则默认为动态加密<br />
deviceMsg.setSecurityMode(ACDeviceSecurityMode.DYNAMIC_ENCRYPTED);</p>
<p>//AC.LOCAL_FIRST代表优先走局域网，局域网不通的情况下再走云端<br />
bindMgr.sendToDeviceWithOption(subDomain, physicalDeviceId, deviceMsg, AC.LOCAL_FIRST, new PayloadCallback<ACDeviceMsg>() {<br />
    @Override<br />
    public void success(ACDeviceMsg deviceMsg) {<br />
        //成功发送设备指令并收到设备响应<br />
    }</p>
<pre><code>@Override
public void error(ACException e) {
    //网络错误或其他，根据e.getErrorCode()做不同的提示或处理
}
</code></pre>
<p>});<br />
```</p>
<h6 id='4.4.2.3.7'>UDS通信</h6>

<p>1 使用示例<br />
1.1 访问普通UDS服务</p>
<p>注意：serviceName对应服务管理里UDS服务里的服务名称，务必保持一致。进入版本管理之后，查看已上线版本。serviceVersion为主版本号，比如1-0-0，则version为1。<br />
```<br />
ACMsg req = new ACMsg();<br />
req.setName(&ldquo;queryData&rdquo;);<br />
req.put(&ldquo;deviceId&rdquo;, deviceId);<br />
req.put(&ldquo;startTime&rdquo;, 0);<br />
req.put(&ldquo;endTime&rdquo;, System.currentTimeMillis());<br />
AC.sendToService(subDomain, serviceName, serviceVersion, req, new PayloadCallback<ACMsg>() {<br />
    @Override<br />
    public void success(ACMsg resp) {<br />
        //发送成功并接收服务的响应消息<br />
    }</p>
<pre><code>@Override
public void error(ACException e) {
    //网络错误或其他，根据e.getErrorCode()做不同的提示或处理，此处一般为传递的参数或UDS云端问题，可到MAX平台查看log日志
}
</code></pre>
<p>});<br />
<code>1.2 匿名访问UDS服务</code><br />
ACMsg req = new ACMsg();<br />
req.setName(&ldquo;queryData&rdquo;);<br />
req.put(&ldquo;deviceId&rdquo;, deviceId);<br />
req.put(&ldquo;startTime&rdquo;, 0);<br />
req.put(&ldquo;endTime&rdquo;, System.currentTimeMillis());<br />
AC.sendToServiceWithoutSign(subDomain, serviceName, serviceVersion, req, new PayloadCallback<ACMsg>() {<br />
    @Override<br />
    public void success(ACMsg resp) {<br />
        //发送成功并接收服务的响应消息<br />
    }</p>
<pre><code>@Override
public void error(ACException e) {
    //网络错误或其他，根据e.getErrorCode()做不同的提示或处理，此处一般为传递的参数或UDS云端问题，可到MAX平台查看log日志
}
</code></pre>
<p>});<br />
<code>2 UDS本机调试
UDS通过start.sh脚本进行本机部署后，查看UDS所在的主机局域网ip地址，将ip地址设置于以下接口中即可访问本机UDS服务。</code><br />
//应用程序初始化<br />
AC.init(this, &ldquo;MAX&rdquo;, 3, AC.TEST_MODE);<br />
//设置为访问本机UDS进行本地调试，参数为ip+port<br />
AC.setSendToLocalUDS(&ldquo;<a href="http://192.168.1.1:8080">http://192.168.1.1:8080</a>&rdquo;);<br />
```<br />
注意：APP需要与UDS所在的主机处于同一局域网下<br />
<h6 id='4.4.2.3.8'>数据集</h6><br />
对于存储在数据集中的数据，APP可以进行实时消息订阅，进行订阅后，APP和云端建立长连接, 数据集中的数据发生改变后，云端会将最新的数据实时推送给APP</p>
<p>1 代码示例<br />
使用之前, 需要先到控制台/存储管理/数据集中设置/查看对应的数据集, 以如下数据集为例(设备逻辑id:12):<br />
<img alt="" src="///E://work/frontwork/ngx-os/images/%E6%95%B0%E6%8D%AE%E9%9B%86.png" /></p>
<p>1.1 订阅数据集实时推送数据<br />
//设置主键值<br />
Map<String, Object> primaryKey = new HashMap&lt;&gt;();<br />
primaryKey.put(&ldquo;deviceId&rdquo;, 12);<br />
//订阅数据集对应主键值的数据推送<br />
AC.classDataMgr().subscribe(&ldquo;light_action_data&rdquo;, primaryKey, ACClassDataMgr.OPTYPE_ALL,<br />
    new VoidCallback() {<br />
        @Override<br />
        public void success() {<br />
            //订阅成功提示<br />
        }</p>
<pre><code>    @Override
    public void error(ACException e) {
        //订阅失败提示
    }
}
</code></pre>
<p>);<br />
相关注意事项如下:</p>
<p>数据集对象中涉及到字符串比较多, 如果遇到订阅失败请检查拼写是否正确<br />
如果一个数据集有两个及以上主键, 则必须按顺序订阅, 即如果要订阅主键二, 则实现方式为订阅主键一和主键二, 不能单独订阅主键二<br />
如果主键是设备Id, 那么该设备必须与当前用户是绑定关系</p>
<p>1.2 取消订阅数据集实时推送数据<br />
```<br />
//设置主键值<br />
Map<String, Object> primaryKey = new HashMap&lt;&gt;();<br />
primaryKey.put(&ldquo;deviceId&rdquo;, 12);<br />
//取消数据集对应主键值的数据推送<br />
AC.classDataMgr().unSubscribe(&ldquo;light_action_data&rdquo;, primaryKey, ACClassDataMgr.OPTYPE_ALL,<br />
    new VoidCallback() {<br />
        @Override<br />
        public void success() {<br />
            //取消订阅提示<br />
        }</p>
<pre><code>    @Override
    public void error(ACException e) {
        //失败提示
    }
}
</code></pre>
<p>);<br />
```<br />
相关注意事项:</p>
<p>我们也提供了一个unSubscribeAll的接口, 如果有需要可以自己选择。<br />
取消订阅所有数据集实时推送数据:<br />
<code>AC.classDataMgr().unSubscribeAll()</code><br />
1.3 设置数据集实时推送回调<br />
```<br />
// 注册回调<br />
AC.classDataMgr().registerDataReceiver(/<em>ACClassDataMgr.ClassDataReceiver</em>/ receiver);</p>
<p>// 解注册回调<br />
AC.classDataMgr().unregisterDataReceiver(/<em>ACClassDataMgr.ClassDataReceiver</em>/ receiver);<br />
<code>ClassDataReceiver是回调接口</code><br />
interface ClassDataReceiver {<br />
    void onReceive(String className, int opType, String value);<br />
}<br />
```<br />
相关注意事项如下:</p>
<p>className为数据集名称<br />
opType为操作类型<br />
value为JSON格式数据<br />
此回调方法可以在您代码的任意位置进行设置。</p>
<h6 id='4.4.2.3.9'>定时任务</h6>

<p>注意：</p>
<p>1、timePoint的格式为&rdquo;yyyy-MM-dd HH:mm:ss&rdquo;，否则会失败。</p>
<p>2、timeCycle需要在timePoint时间点的基础上,选择循环方式。</p>
<p>&ldquo;once&rdquo;:单次循环<br />
&ldquo;hour&rdquo;:在每小时的mm:ss时间点循环执行<br />
&ldquo;day&rdquo;:在每天的HH:mm:ss时间点循环执行<br />
&ldquo;month&rdquo;:在每月的dd HH:mm:ss时间点循环执行<br />
&ldquo;year&rdquo;:在每年的MM-dd HH:mm:ss时间点循环执行<br />
&ldquo;week[0,1,2,3,4,5,6]&rdquo;:在每星期的HH:mm:ss时间点循环执行(如周一，周五重复，则表示为&rdquo;week[1,5]&rdquo;)<br />
3、timeZone支持标准时区列表，标准时区列表请参考wiki。<br />
1 设备定时任务<br />
获取设备定时管理器</p>
<p>使用默认时区<br />
<code>//设备的逻辑ID
long deviceId = 1L; 
ACDeviceTimerMgr timerMgr = AC.deviceTimerMgr(deviceId);</code><br />
使用自定义时区<br />
<code>//设备的逻辑ID
long deviceId = 1L; 
//使用北京时区
ACDeviceTimerMgr timerMgr = AC.deviceTimerMgr(deviceId, TimeZone.getTimeZone("Etc/GTM-8"));</code><br />
自定义时区ID详情参考http://joda-time.sourceforge.net/timezones.html</p>
<p>添加设备定时任务<br />
```<br />
ACDeviceTask task = new ACDeviceTask();<br />
//设置任务时间周期<br />
task.setTimeCycle(&ldquo;day&rdquo;);<br />
//设置任务执行的时间点，由于时间周期为天，所以只有19点精确到小时以后为有效参数，日期设置无效，即在每天19点执行任务<br />
task.setTimePoint(&ldquo;2000-01-01 19:00:00&rdquo;);<br />
//设置任务名称<br />
task.setName(&ldquo;control&rdquo;);<br />
//设置任务描述，选填<br />
task.setDescription(&ldquo;open Air Condition&rdquo;);<br />
//具体下发给设备的消息指令,msgCode与二进制流<br />
ACDeviceMsg msg = new ACDeviceMsg(68, new byte[]{1,0,0,0});<br />
task.setDeviceMsg(msg);<br />
timerMgr.addTask(task, new PayloadCallback<ACDeviceTask>() {<br />
     @Override<br />
     public void success(ACDeviceTask task) {<br />
         //成功添加定时任务，创建后默认为开启状态<br />
     }</p>
<pre><code> @Override
 public void error(ACException e) {
     //网络错误或其他，根据e.getErrorCode()做不同的提示或处理，此处一般为参数类型错误，请仔细阅读注意事项
 }
</code></pre>
<p>});<br />
```<br />
修改设备定时任务</p>
<p>接口为modifyTask，其他参数与定义与创建定时任务相同。</p>
<p>开启设备定时任务<br />
```<br />
//taskId可以通过接口addTask/listTasks返回值获取<br />
timerMgr.openTask(taskId, new VoidCallback() {<br />
     @Override<br />
     public void success() {<br />
         //开启定时任务成功<br />
     }</p>
<pre><code> @Override
 public void error(ACException e) {
     //参数无误下一般为网络错误
 }
</code></pre>
<p>});<br />
<code>关闭设备定时任务</code><br />
timerMgr.closeTask(taskId, new VoidCallback() {<br />
     @Override<br />
     public void success() {<br />
         //关闭定时任务<br />
     }</p>
<pre><code> @Override
 public void error(ACException e) {
     //参数无误下一般为网络错误
 }
</code></pre>
<p>});<br />
<code>删除设备定时任务</code><br />
timerMgr.deleteTask(taskId, new VoidCallback() {<br />
     @Override<br />
     public void success() {<br />
         //删除定时任务<br />
     }</p>
<pre><code> @Override
 public void error(ACException e) {
     //参数无误下一般为网络错误
 }
</code></pre>
<p>});<br />
<code>获取定时任务列表</code><br />
timerMgr.listTasks(new PayloadCallback<List<ACDeviceTask>&gt;(){<br />
     @Override<br />
     public void success(List<ACDeviceTask> tasks) {<br />
         for (ACDeviceTask task : tasks){<br />
             //通过logcat查看获取到的定时任务列表进行显示或下一步操作<br />
             LogUtil.d(&ldquo;TAG&rdquo;, task.toString());<br />
             //如获取taskId<br />
             long taskId = task.getTaskId();<br />
         }<br />
     }</p>
<pre><code> @Override
 public void error(ACException e) {
     //参数无误下一般为网络错误
 }
</code></pre>
<p>});<br />
```<br />
2 设备定时任务组<br />
与普通设备定时任务的区别是，将多个定时任务进行分组管理。 以下场景举例：用户设置每天早上9点上班，下午17点下班。那么我们希望在每天8:30自动关闭空调，下午16:30提前打开空调，实现代码如下：</p>
<p>获取设备定时管理器</p>
<p>使用默认时区<br />
<code>//设备的逻辑ID
long deviceId = 1L; 
ACDeviceTimerMgr timerMgr = AC.deviceTimerMgr(deviceId);</code><br />
使用自定义时区<br />
<code>//设备的逻辑ID
long deviceId = 1L; 
//使用北京时区
ACDeviceTimerMgr timerMgr = AC.deviceTimerMgr(deviceId, TimeZone.getTimeZone("Etc/GTM-8"));</code><br />
自定义时区ID详情参考http://joda-time.sourceforge.net/timezones.html</p>
<p>创建设备任务组<br />
```<br />
List<ACDeviceTask> tasks = new ArrayList&lt;&gt;();</p>
<p>ACDeviceTask closeTask = new ACDeviceTask();<br />
//任务名字<br />
closeTask.setName(&ldquo;Close air condition&rdquo;);<br />
//任务描述，选填<br />
closeTask.setDescription(&ldquo;Go to work&rdquo;);<br />
//设置任务时间周期为每周工作日<br />
closeTask.setTimeCycle(&ldquo;week[1,2,3,4,5]&rdquo;);<br />
//由于时间周期为周，所以只有早上9点精确到小时为有效参数，日期设置无效<br />
closeTask.setTimePoint(&ldquo;2000-01-01 09:00:00&rdquo;);<br />
//关闭空调的具体控制指令<br />
ACDeviceMsg msg = new ACDeviceMsg(68, new byte[]{0, 0, 0, 0});<br />
closeTask.setDeviceMsg(msg);<br />
tasks.add(closeTask);</p>
<p>ACDeviceTask openTask = new ACDeviceTask();<br />
openTask.setName(&ldquo;Open air condition&rdquo;);<br />
openTask.setDescription(&ldquo;Go off work&rdquo;);<br />
openTask.setTimeCycle(&ldquo;week[1,2,3,4,5]&rdquo;);<br />
openTask.setTimePoint(&ldquo;2000-01-01 17:00:00&rdquo;);<br />
ACDeviceMsg msg = new ACDeviceMsg(68, new byte[]{1, 0, 0, 0});<br />
openTask.setDeviceMsg(msg);<br />
tasks.add(openTask);</p>
<p>timerMgr.addTaskGroup(new ACDeviceGroup(&ldquo;working&rdquo;, tasks), new PayloadCallback<ACDeviceGroup>() {<br />
    @Override<br />
    public void success(ACDeviceGroup group) {<br />
        //获取任务组ID等信息<br />
        String groupId = group.getGroupId();<br />
    }</p>
<pre><code>@Override
public void error(ACException e) {
    //参数无误下一般为网络错误
}
</code></pre>
<p>});<br />
<code>修改设备任务组</code><br />
//groupId可通过接口addTaskGroup/listTaskGroups返回<br />
timerMgr.modifyTaskGroup(new ACDeviceGroup(groupId, groupName, tasks), new VoidCallback() {<br />
    @Override<br />
    public void success() {<br />
        //修改设备任务组成功<br />
    }</p>
<pre><code>@Override
public void error(ACException e) {
    //参数无误下一般为网络错误
}
</code></pre>
<p>});<br />
```</p>
<p>关闭设备任务组<br />
```<br />
timerMgr.closeTaskGroup(groupId, new VoidCallback() {<br />
    @Override<br />
    public void success() {<br />
        //成功关闭任务组<br />
    }</p>
<pre><code>@Override
public void error(ACException e) {
    //参数无误下一般为网络错误
}
</code></pre>
<p>});<br />
```<br />
打开设备任务组/删除设备任务组/获取单个任务组详情与该接口类似，分别调用接口openTaskGroup/deleteTaskGroup/getTaskGroup</p>
<p>获取所有设备任务组<br />
```<br />
timerMgr.listTaskGroups(new PayloadCallback<List<ACDeviceGroup>&gt;() {<br />
    @Override<br />
    public void success(List<ACDeviceGroup> groups) {<br />
        for(ACDeviceGroup group : groups){<br />
            //获取任务组ID<br />
            String groupId = group.getGroupId();<br />
            //获取任务组名字<br />
            String groupName = group.getGroupName();<br />
            //获取任务组详情<br />
            List<ACDeviceTask> tasks = group.getTasks();<br />
        }<br />
    }</p>
<pre><code>@Override
public void error(ACException e) {
    //参数无误下一般为网络错误
}
</code></pre>
<p>});<br />
```<br />
3 用户定时任务<br />
获取用户定时管理器</p>
<p>使用默认时区<br />
<code>ACUserTimerMgr timerMgr = AC.userTimerMgr();</code><br />
使用自定义时区<br />
<code>//使用北京时区
ACUserTimerMgr timerMgr = AC.userTimerMgr(TimeZone.getTimeZone("Etc/GTM-8"));
自定义时区ID详情参考http://joda-time.sourceforge.net/timezones.html</code></p>
<p>添加用户定时任务<br />
```<br />
ACUserTask task = new ACUserTask();<br />
//设置任务时间周期<br />
task.setTimeCycle(&ldquo;day&rdquo;);<br />
//设置任务执行的时间点，由于时间周期为天，所以只有19点精确到小时以后为有效参数，日期设置无效，即在每天19点执行任务<br />
task.setTimePoint(&ldquo;2000-01-01 19:00:00&rdquo;);<br />
//设置任务名称<br />
task.setName(&ldquo;control&rdquo;);<br />
//设置任务描述，选填<br />
task.setDescription(&ldquo;open Air Condition&rdquo;);</p>
<p>//具体发送到uds的消息指令,与sendToService参数类似,接口名及参数由UDS实际提供为主<br />
ACMsg req = new ACMsg();<br />
req.setName(&ldquo;openAirCondition&rdquo;);<br />
req.put(&ldquo;deviceId&rdquo;, 1L);<br />
//ACUserCommand参数分别为子域名，服务名，请求参数，默认发送到UDS最新版本号<br />
ACUserCommand command = new ACUserCommand(subDomain, serviceName, req);<br />
task.setUserCommand(command);<br />
timerMgr.addTask(task, new PayloadCallback<ACUserTask>() {<br />
     @Override<br />
     public void success(ACUserTask task) {<br />
         //成功添加定时任务，创建后默认为开启状态<br />
     }</p>
<pre><code> @Override
 public void error(ACException e) {
     //网络错误或其他，根据e.getErrorCode()做不同的提示或处理，此处一般为参数类型错误，请仔细阅读注意事项
 }
</code></pre>
<p>});<br />
```</p>
<p>修改用户定时任务</p>
<p>接口为modifyTask，其他参数与定义与创建定时任务相同。</p>
<p>开启用户定时任务<br />
```<br />
//taskId可以通过接口addTask/listTasks返回值获取<br />
timerMgr.openTask(taskId, new VoidCallback() {<br />
     @Override<br />
     public void success() {<br />
         //开启定时任务成功<br />
     }</p>
<pre><code> @Override
 public void error(ACException e) {
     //参数无误下一般为网络错误
 }
</code></pre>
<p>});<br />
```</p>
<p>关闭用户定时任务<br />
```<br />
timerMgr.closeTask(taskId, new VoidCallback() {<br />
     @Override<br />
     public void success() {<br />
         //关闭定时任务<br />
     }</p>
<pre><code> @Override
 public void error(ACException e) {
     //参数无误下一般为网络错误
 }
</code></pre>
<p>});<br />
```</p>
<p>删除用户定时任务<br />
```<br />
timerMgr.deleteTask(taskId, new VoidCallback() {<br />
     @Override<br />
     public void success() {<br />
         //删除定时任务<br />
     }</p>
<pre><code> @Override
 public void error(ACException e) {
     //参数无误下一般为网络错误
 }
</code></pre>
<p>});<br />
```</p>
<p>获取定时任务列表<br />
```<br />
timerMgr.listTasks(new PayloadCallback<List<ACUserTask>&gt;(){<br />
     @Override<br />
     public void success(List<ACUserTask> tasks) {<br />
         for (ACUserTask task : tasks){<br />
             //通过logcat查看获取到的定时任务列表进行显示或下一步操作<br />
             LogUtil.d(&ldquo;TAG&rdquo;, task.toString());<br />
             //如获取taskId<br />
             long taskId = task.getTaskId();<br />
         }<br />
     }</p>
<pre><code> @Override
 public void error(ACException e) {
     //参数无误下一般为网络错误
 }
</code></pre>
<p>});<br />
```<br />
4 用户定时任务组<br />
与普通定时定时任务的区别是，将多个定时任务进行分组管理。 以下场景举例：用户设置每天早上9点上班，下午17点下班。那么我们希望在每天8:30自动关闭空调，下午16:30提前打开空调，并且在操作完空调后把处理结果推送给用户；这时我们建议将操作空调及推送的功能通过UDS实现，APP通过定时调用UDS提供的接口实现这个需求，APP端实现代码如下：</p>
<p>获取用户定时管理器</p>
<p>使用默认时区<br />
<code>ACUserTimerMgr timerMgr = AC.userTimerMgr();</code></p>
<p>使用自定义时区<br />
<code>//使用北京时区
ACUserTimerMgr timerMgr = AC.userTimerMgr(TimeZone.getTimeZone("Etc/GTM-8"));</code></p>
<p>自定义时区ID详情参考http://joda-time.sourceforge.net/timezones.html<br />
创建用户任务组<br />
```<br />
List<ACUserTask> tasks = new ArrayList&lt;&gt;();</p>
<p>ACUserTask closeTask = new ACUserTask();<br />
//任务名字<br />
closeTask.setName(&ldquo;Close air condition&rdquo;);<br />
//任务描述，选填<br />
closeTask.setDescription(&ldquo;Go to work&rdquo;);<br />
//设置任务时间周期为每周工作日<br />
closeTask.setTimeCycle(&ldquo;week[1,2,3,4,5]&rdquo;);<br />
//由于时间周期为周，所以只有早上9点精确到小时为有效参数，日期设置无效<br />
closeTask.setTimePoint(&ldquo;2000-01-01 09:00:00&rdquo;);<br />
//具体发送到uds的消息指令,与sendToService参数类似,接口名及参数由UDS实际提供为主<br />
ACMsg req = new ACMsg();<br />
req.setName(&ldquo;closeAirCondition&rdquo;);<br />
req.put(&ldquo;deviceId&rdquo;, 1L);<br />
//ACUserCommand参数分别为子域名，服务名，请求参数，默认发送到UDS最新版本号<br />
ACUserCommand command = new ACUserCommand(subDomain, serviceName, req);<br />
closeTask.setUserCommand(command);<br />
tasks.add(closeTask);</p>
<p>ACUserTask openTask = new ACUserTask();<br />
openTask.setName(&ldquo;Open air condition&rdquo;);<br />
openTask.setDescription(&ldquo;Go off work&rdquo;);<br />
openTask.setTimeCycle(&ldquo;week[1,2,3,4,5]&rdquo;);<br />
openTask.setTimePoint(&ldquo;2000-01-01 17:00:00&rdquo;);<br />
ACMsg req = new ACMsg();<br />
req.setName(&ldquo;openAirCondition&rdquo;);<br />
req.put(&ldquo;deviceId&rdquo;, 1L);<br />
ACUserCommand command = new ACUserCommand(subDomain, serviceName, req);<br />
openTask.setUserCommand(command);<br />
tasks.add(openTask);</p>
<p>timerMgr.addTaskGroup(new ACUserGroup(&ldquo;working&rdquo;, tasks), new PayloadCallback<ACUserGroup>() {<br />
    @Override<br />
    public void success(ACUserGroup group) {<br />
        //获取任务组ID等信息<br />
        String groupId = group.getGroupId();<br />
    }</p>
<pre><code>@Override
public void error(ACException e) {
    //参数无误下一般为网络错误
}
</code></pre>
<p>});<br />
```</p>
<p>修改用户任务组<br />
```<br />
//groupId可通过接口addTaskGroup/listTaskGroups返回<br />
timerMgr.modifyTaskGroup(new ACUserGroup(groupId, groupName, tasks), new VoidCallback() {<br />
    @Override<br />
    public void success() {<br />
        //修改设备任务组成功<br />
    }</p>
<pre><code>@Override
public void error(ACException e) {
    //参数无误下一般为网络错误
}
</code></pre>
<p>});<br />
```</p>
<p>关闭用户任务组<br />
```<br />
timerMgr.closeTaskGroup(groupId, new VoidCallback() {<br />
    @Override<br />
    public void success() {<br />
        //成功关闭任务组<br />
    }</p>
<pre><code>@Override
public void error(ACException e) {
    //参数无误下一般为网络错误
}
</code></pre>
<p>});<br />
<code>打开设备任务组/删除设备任务组/获取单个任务组详情与该接口类似，分别调用接口openTaskGroup/deleteTaskGroup/getTaskGroup
获取所有用户任务组</code><br />
timerMgr.listTaskGroups(new PayloadCallback<List<ACUserGroup>&gt;() {<br />
    @Override<br />
    public void success(List<ACUserGroup> groups) {<br />
        for(ACUserGroup group : groups){<br />
            //获取任务组ID<br />
            String groupId = group.getGroupId();<br />
            //获取任务组名字<br />
            String groupName = group.getGroupName();<br />
            //获取任务组详情<br />
            List<ACUserTask> tasks = group.getTasks();<br />
        }<br />
    }</p>
<pre><code>@Override
public void error(ACException e) {
    //参数无误下一般为网络错误
}
</code></pre>
<p>});<br />
```<br />
<h6 id='4.4.2.3.10'>OTA</h6><br />
1 普通WIFI设备OTA<br />
<img alt="" src="///E://work/frontwork/ngx-os/images/OTA.png" /></p>
<p>若使用场景为开启APP之后自动检测升级，建议把检测升级过程放在application里，并维护一个deviceId和ACOTAUpgradeInfo的映射关系，通过static修饰放到内存里，在进入OTA升级页面后可以直接取出来显示。如想实现用户取消升级之后不再提示功能，则可以自己维护一个变量记录。</p>
<p>一、获取OTA管理器对象<br />
<code>ACOTAMgr otaMgr = AC.otaMgr();</code><br />
二、检查升级</p>
<p>检查设备是否有新的OTA版本，同时获取升级日志。</p>
<p><code>long deviceId = 1;   //设备逻辑id
int otaType = 1;      //升级类型，1为系统MCU升级
otaMgr.checkUpdate(subDomain, new ACOTACheckInfo(deviceId, otaType), new PayloadCallback&lt;ACOTAUpgradeInfo&gt;() {
    @Override
    public void success(ACOTAUpgradeInfo info) {
        //通过判断info.isUpdate()判断是否有新版本更新
    }
    @Override
    public void error(ACException e) {
        //网络错误或其他，根据e.getErrorCode()做不同的提示或处理
    }
});</code></p>
<p>三、确认升级<br />
<code>otaMgr.confirmUpdate(subDomain,deviceId, newVersion, otaType, new VoidCallback() {
    @Override
    public void success() {
        //确认升级     
    }
    @Override
    public void error(ACException e) {
        //网络错误或其他，根据e.getErrorCode()做不同的提示或处理
    }
});</code><br />
2 蓝牙设备OTA<br />
一、获取OTA管理器对象<br />
<code>ACOTAMgr otaMgr = AC.otaMgr();</code><br />
二、查询OTA新版本信息<br />
```<br />
// 初始化当前设备的版本号等ACOtaCheckInfo信息,version为蓝牙设备当前版本<br />
otaMgr.checkUpdate(subDomain, new ACOTACheckInfo(physicalDeviceId, version), new PayloadCallback<ACOTAUpgradeInfo>() {<br />
    @Override<br />
    public void success(ACOTAUpgradeInfo upgradeInfo) {<br />
        if(!upgradeInfo.isUpdate()){<br />
            //没有可升级的新版本<br />
            return;<br />
        }<br />
        //获取升级类型<br />
        if (upgradeInfo.getOtaMode() == 0) {<br />
            //静默升级<br />
        } else if(upgradeInfo.getOtaMode() == 1){<br />
            //用户确认升级<br />
        } else {<br />
            //强制升级<br />
        }<br />
    }</p>
<pre><code>@Override
public void error(ACException e) {
    // 查询失败    
}
</code></pre>
<p>});<br />
<code>三、下载OTA文件</code><br />
//upgradeInfo由上面接口获得；一般只有一个升级文件，所以取列表第一个文件<br />
String url = upgradeInfo.getFiles().get(0).getDownloadUrl();<br />
String checksum = upgradeInfo.getFiles().get(0).getCheckSum();<br />
ACUtils.createSDDir(&ldquo;ota_download_path&rdquo;);<br />
File file = null;<br />
try {<br />
    //建议首先执行垃圾文件清理工作，防止磁盘写满升级失败，同时也防止异常情况下下载文件不完整被使用 <br />
    file = ACUtils.createSDFile(&ldquo;ota_download_path/file_name&rdquo;);<br />
} catch (IOException e) {<br />
}<br />
AC.fileMgr().downloadFile(file, url, checksum, new ProgressCallback() {<br />
    @Override<br />
    public void progress(double progress) {<br />
        //下载进度更新<br />
    }, new VoidCallback() {<br />
    @Override<br />
    public void success() {<br />
        //下载成功，建议调用otaMediaDone()接口通知云端下载文件成功，用于日志追踪<br />
        //同时进行设备ota升级，另升级成功后，建议在此清理已完成升级的版本文件<br />
    }</p>
<pre><code>@Override
public void error(ACException e) {
    //下载失败，建议清理掉当前下载的不完整文件
}
</code></pre>
<p>});<br />
```<br />
<h6 id='4.4.2.3.11'>推送</h6><br />
MAX的推送使用友盟推送提供的服务，集成步骤如下：</p>
<p>1 推送集成指南<br />
参照友盟推送官方文档集成推送功能<br />
注意</p>
<p>1、通过友盟后台创建应用时，安卓和iOS版本需要单独创建。<br />
2、推送集成完毕的标准为通过友盟后台可以推送通知到APP，即代表该步骤集成完毕。<br />
3、已经通过MAX提供的AC.notificationMgr()管理器中的接口集成友盟2.7.0版本的开发者，若需要升级到友盟最新版本的，请删除所有推送相关的代码，参照友盟推送官方文档重新集成。该步骤推送集成完毕的标准为通过友盟后台可以推送通知到APP。</p>
<p>2 设置推送用户别名(alias)<br />
完成上述推送集成之后，需要设置推送的用户别名(alias)与MAX后台对接起来。步骤如下所示：<br />
在用户调用MAX登录接口时，调用以下接口添加设置推送别名：<br />
```<br />
//userId为用户ID，通过登录接口返回的ACUserInfo可以获取到userId；第二个参数写死即可。<br />
mPushAgent.addAlias(String.valueof(userId), &ldquo;FnicIoTMax&rdquo;, new UTrack.ICallBack() {<br />
    @Override<br />
    public void onMessage(boolean isSuccess, String message) {</p>
<pre><code>}
</code></pre>
<p>});<br />
<code>用户注销退出登录时，调用以下接口移除别名：</code><br />
//userId为用户ID，通过MAX登录接口返回的ACUserInfo可以获取到userId；第二个参数写死即可。<br />
mPushAgent.removeAlias(String.valueof(userId), &ldquo;FnicIoTMax&rdquo;, new UTrack.ICallBack(){<br />
    @Override<br />
    public void onMessage(boolean isSuccess, String message) {</p>
<pre><code>}
</code></pre>
<p>});<br />
```<br />
3 推送配置<br />
通过以上步骤完成集成之后，创建的应用如下图所示。<br />
<img alt="" src="///E://work/frontwork/ngx-os/images/push1.png" /><br />
记录“应用信息”中的AppKey和App Master Secret，将其填写到MAX控制台中。进入推送管理页面添加应用，并填写对应信息即可使用MAX提供的推送服务。</p>
<p>完成以上配置工作之后，即可以与MAX UDS服务进行对接下一步的开发测试。<br />
<h6 id='4.4.2.3.12'>文件存储</h6><br />
注意：</p>
<p>1、下载文件到sdcard或者从sdcard上传文件到云端需要在 application 标签下增加如下权限</p>
<p><uses-permission android:name="android.permission.WRITE_EXTERNAL_STORAGE"/></p>
<p>2、使用文件存储需导入jar包android-async-http-1.4.9、qiniu-android-sdk-7.0.9、happy-dns-0.2.7和httpclient-4.4.1.1到libs目录下</p>
<p>3、上传下载支持断点续传功能<br />
1 下载文件<br />
1.1 获取文件管理器<br />
<code>ACFileMgr fileMgr = AC.fileMgr();</code><br />
1.2 获取下载url<br />
```<br />
ACFileInfo fileInfo = new ACFileInfo(bucket, name);<br />
//上传文件时若ACFileInfo中isPublic为true，则expireTime参数无效；默认情况为false，如下24<em>60</em>60代表url链接有效时间，即1天<br />
fileMgr.getDownloadUrl(fileInfo, 24 * 60 * 60 ，new PayloadCallback<String>() {<br />
    @Override<br />
    public void success(String url) {<br />
         //成功获取文件url<br />
    }</p>
<pre><code>@Override
public void error(ACException e) {
     //没有权限或其他网络错误
}
</code></pre>
<p>});<br />
```<br />
1.3 根据url下载文件</p>
<p>1、下载文件到sdcard<br />
```<br />
ACUtils.createSDDir(&ldquo;myDir&rdquo;);<br />
File file = null;<br />
try {<br />
     file = ACUtils.createSDFile(&ldquo;myDir/&rdquo; + name);<br />
} catch (IOException e) {<br />
}<br />
//0代表不校验checksum（除OTA升级外一般情况下不需要检查校验和）<br />
fileMgr.downloadFile(file, url, 0, new ProgressCallback() {<br />
    @Overrides<br />
    public void progress(double progress) {<br />
         //用于显示进度条，百分比，如99.99；如果没有显示进度条的需求则传null<br />
    }<br />
}, new VoidCallback() {<br />
    @Override<br />
    public void success() {<br />
        //下载成功<br />
    }</p>
<pre><code>@Override
public void error(ACException e) {
     //支持断点续传，所以此处无网络错误，在恢复网络连接之后会继续下载
}
</code></pre>
<p>});<br />
<code>2、下载文件到内存，比如头像下载</code><br />
//0代表不校验checksum<br />
fileMgr.downloadFile(url, 0, null, new PayloadCallback<byte[]>() {<br />
    @Override<br />
    public void success(byte[] bytes) {<br />
         //下载成功<br />
    }</p>
<pre><code>@Override
public void error(ACException e) {
     //支持断点续传，所以此处无网络错误，在恢复网络连接之后会继续下载
}
</code></pre>
<p>});<br />
```<br />
2 上传文件<br />
2.1 获取文件管理器</p>
<p>ACFileMgr fileMgr = AC.fileMgr();<br />
2.2 设置权限管理</p>
<p>如果对文件的管理有权限管理方面的需求的话，则需要使用到以下接口；如不设置情况下则默认所有用户都有读取权限，只有上传者本人有修改写文件的权限。<br />
<code>//acl为权限管理
ACACL acl = new ACACL();
//设置所有人可读，黑名单除外(或者设置所有人不可读，白名单除外)
acl.setPublicReadAccess(true);
//设置所有人可写，黑名单除外(或者设置所有人不可写，白名单除外)
acl.setPublicWriteAccess(true);
//设置黑名单，userId为1的用户没有读的权限
acl.setUserDeny(ACACL.OpType.READ, 1);
//设置白名单，userId为1的用户有写的权限
acl.setUserAccess(ACACL.OpType.WRITE, 1);</code><br />
规则：优先判断黑名单，黑名单命中后其他设置无效，其次判断白名单，最后判断全局设置属性。例如同时设置userId为1的用户为黑名单和白名单，则设置的白名单无效。</p>
<p>2.3 上传文件</p>
<p>1、上传sdcard文件<br />
```<br />
//bucket可理解为文件存储在云端的目录，name为文件名。（开发者自己维护通过这两个参数保证上传的所有文件在云端不会重名，建议通过UUID的方式命名文件或者以用户／设备唯一标识命名bucket），重目录重名的情况下原文件会被覆盖。另外可通过这两个参数获取到下载的url。<br />
ACFileInfo fileInfo = new ACFileInfo(bucket, name);<br />
//设置acl权限，可选<br />
fileInfo.setACL(acl);<br />
//设置上传文件的sdcard路径<br />
fileInfo.setFile(new File(Environment.getExternalStorageDirectory() + &ldquo;/myDir/&rdquo; + name));<br />
fileMgr.uploadFile(fileInfo, new ProgressCallback() {<br />
    @Override<br />
    public void progress(double progress) {<br />
         //用于显示进度条，百分比，如99.99；如果没有显示进度条的需求则传null<br />
    }<br />
}, new VoidCallback() {<br />
    @Override<br />
    public void success() {<br />
         //上传成功<br />
    }</p>
<pre><code>@Override
public void error(ACException e) {
     //支持断点续传，所以此处无网络错误，在恢复网络连接之后会继续上传
}
</code></pre>
<p>});<br />
<code>2、上传小文件，比如头像</code><br />
//bucket可理解为文件存储在云端的目录，name为文件名。（开发者自己维护通过这两个参数保证上传的所有文件在云端不会重名，建议通过UUID的方式命名文件或者以用户／设备唯一标识命名bucket），重目录重名的情况下原文件会被覆盖。另外可通过这两个参数获取到下载的url。<br />
ACFileInfo fileInfo = new ACFileInfo(bucket, name);<br />
//设置acl权限，可选<br />
fileInfo.setACL(acl);<br />
//比如头像比特流数组<br />
fileInfo.setData(bytes);<br />
fileMgr.uploadFile(fileInfo, null, new VoidCallback() {<br />
    @Override<br />
    public void success() {<br />
        //上传成功<br />
    }</p>
<pre><code>@Override
public void error(ACException e) {
    //支持断点续传，所以此处无网络错误，在恢复网络连接之后会继续上传
}
</code></pre>
<p>});<br />
```<br />
<h6 id='4.4.2.3.13'>辅助功能</h6><br />
SDK提供了一些额外的辅助功能</p>
<p>1 用户意见反馈<br />
注意：如意见反馈中包含图片则需导入jar包android-async-http-1.4.9、qiniu-android-sdk-7.0.9、happy-dns-0.2.7和httpclient-4.4.1.1到libs目录下<br />
提供APP端的用户意见反馈接口。开发者可以开发用户提交意见的页面。用户意见反馈可以反馈的项由开发者自己定义。 使用意见反馈前,需要先在控制台设置反馈项参数<br />
<img alt="" src="image/意见反馈1.png" /></p>
<p>代码示例:<br />
```<br />
//picture1、picture2为图片的二进制流<br />
byte[] picture1;<br />
byte[] picture2;</p>
<p>ACFeedback feedback = new ACFeedback();<br />
feedback.addFeedback(&ldquo;description&rdquo;, &ldquo;App体验良好，继续加油哦&rdquo;);                <br />
feedback.addFeedback(&ldquo;telephoneNumber&rdquo;, &ldquo;13333333333&rdquo;);                           <br />
feedback.addFeedbackPicture(&ldquo;pictures&rdquo;, picture1);  <br />
feedback.addFeedbackPicture(&ldquo;pictures&rdquo;, picture2);        <br />
AC.feedbackMgr().submitFeedback(feedback, new VoidCallback(){<br />
    @Override<br />
    public void success(){                               <br />
        //成功提交用户反馈信息<br />
    }</p>
<pre><code>@Override
public void error(ACException e) {
    //网络错误或其他，根据e.getErrorCode()做不同的提示或处理，此处一般为参数错误，请对照MAX控制台填写的key与value类型
}
</code></pre>
<p>});<br />
```<br />
2 获取室外天气<br />
SDK可以获取到室外的pm2.5, AQI(空气质量)以及天气状况.</p>
<p>如获取最新pm25，代码如下：<br />
```<br />
AC.weatherMgr().getLatestPM25(&ldquo;北京&rdquo;, new PayloadCallback<ACPM25>() {<br />
    @Override<br />
    public void success(ACPM25 pm25) {<br />
        //成功获取最新pm25信息<br />
        LogUtil.d(TAG, pm25.toString());<br />
    }</p>
<pre><code>@Override
public void error(ACException e) {
    //通过e.toString()查看错误信息
}
</code></pre>
<p>});<br />
```<br />
3 排行榜<br />
除了提供丰富的存储管理外，还提供了排行榜的功能需求，能够支持按照不同排行周期进行排行操作。</p>
<p>如下我们以记步排行为例，需求如下：</p>
<p>每天进行实时的记步排名，显示当前所有人的步数及排行（页面显示包含昵称与头像）；除此之外，我们还要求进行周统计，以周为单位显示每天的运动步数及排行。</p>
<p>新建排行榜</p>
<p>登录MAX管理平台，选择应用组件–&gt;排行榜–&gt;新建排行榜，如下图所示：</p>
<p><img alt="" src="///E://work/frontwork/ngx-os/images/%E6%8E%92%E8%A1%8C%E6%A6%9C.png" /></p>
<p>记步的统计周期一般都为每天，所以我们新建以天为统计周期的排行榜。时区我们以北京时间为例，选择东八区。<br />
新建用户附加属性</p>
<p>登录MAX管理平台，选择应用组件–&gt;用户服务–&gt;用户属性设置，如下图所示：</p>
<p><img alt="" src="///E://work/frontwork/ngx-os/images/%E7%94%A8%E6%88%B7%E5%B1%9E%E6%80%A71.png" /></p>
<p>由于我们需要显示所有用户的昵称、头像及排名名次，所以我们要新建用户附加属性，同时设置头像的访问权限为Public。（昵称为用户的基本属性，可以不用新建）<br />
设置步行步数</p>
<p>当打开我们的app之后，我们从设备(手环)/手机获取到今天的步行步数，这时我们需要调用以下接口<br />
```<br />
//如我们获取到的当前步行步数为10000<br />
double score = 10000;<br />
//timestamp为0代表当前时间<br />
AC.rankingMgr().set(&ldquo;Sports_step&rdquo;, 0, score, new VoidCallback(){<br />
    public void success(){<br />
        //步数设置成功<br />
    }</p>
<pre><code>@Override
public void error(ACException e) {
    //步数设置失败，通过e.toString()查看错误信息，并根据e.getErrorCode()错误码做不同处理。      
}
</code></pre>
<p>});<br />
```</p>
<p>获取所有用户的步数及排名<br />
```<br />
//timestamp为0代表当前时间，即今天实时的步数排名；startRank与endRank为1和-1，代表从第一名到最后一名；步数是越多排名越靠前，所以我们使用正序排名<br />
AC.rankingMgr().scan(&ldquo;Sports_step&rdquo;, &ldquo;day&rdquo;, 0, 1, -1, &ldquo;ASC&rdquo;, new PayloadCallback<List<ACRankingValue>&gt;() {<br />
    public void success(List<ACRankingValue> values) {<br />
        //values在云端已经进行排序处理，也就是说values.get(0).getPlace()为1<br />
        for (ACRankingValue value : values) {<br />
            //获取排名<br />
            long place = value.getPlace();<br />
            //获取当前步数<br />
            double score = value.getScore();<br />
            //获取该排名用户的附加属性<br />
            ACObject profile = value.getProfile();<br />
            //获取该排名用户的uid<br />
            long uid = profile.get(&ldquo;uid&rdquo;);<br />
            //获取该排名用户的昵称<br />
            String nickName = profile.getString(&ldquo;nick_name&rdquo;);<br />
            //检测该排名用户是否设置了头像,如设置了则获取头像url<br />
            if (profile.contains(&ldquo;head_url&rdquo;)) {<br />
                String headUrl = profile.getString(&ldquo;head_url&rdquo;);<br />
            }<br />
        }<br />
    }</p>
<pre><code>@Override
public void error(ACException e) {
    //获取所有人排名失败，通过e.toString()查看错误信息，并根据e.getErrorCode()错误码做不同处理。      
}
</code></pre>
<p>});<br />
```<br />
获取当前用户最近一周每天的步数及排名</p>
<p>我们需要进行周统计（每周从周一开始），并画柱状图显示每天的步数及排名。如下为获取当周每天的步数及排名<br />
```<br />
//获取当前今天为星期几<br />
int dayOfWeek = Calendar.getInstance().get(Calendar.DAY_OF_WEEK);<br />
//dayOfWeek为1表示星期天，所以取最近7天的数据；dayOfWeek为2-7，即星期一到星期六，则取(dayOfWeek - 1)天的数据<br />
int count = dayOfWeek == 1 ? 7 : dayOfWeek - 1;<br />
//timestamp为0代表当前时间，向前取count天<br />
AC.rankingMgr().ranks(&ldquo;Sports_step&rdquo;, &ldquo;day&rdquo;, 0, count, &ldquo;ASC&rdquo;, new PayloadCallback<List<ACRankingValue>&gt;() {<br />
    public void success(List<ACRankingValue> values) {<br />
        for (ACRankingValue value : values) {<br />
            //获取排名<br />
            long place = value.getPlace();<br />
            //获取当前步数<br />
            double score = value.getScore();<br />
            //时间，通过该字段转化为需要显示的时间，如下所示<br />
            long timestamp = value.getTimestamp();<br />
            String timeDisplay = new SimpleDateFormat(&ldquo;yyyy-MM-dd HH:mm:ss&rdquo;).format(timestamp);<br />
        }<br />
    }</p>
<pre><code>@Override
public void error(ACException e) {
    //获取失败，通过e.toString()查看错误信息，并根据e.getErrorCode()错误码做不同处理。   
}
</code></pre>
<p>});<br />
<code>据此，获取上周每天的步数及排名</code><br />
int dayOfWeek = Calendar.getInstance().get(Calendar.DAY_OF_WEEK);<br />
int count = dayOfWeek == 1 ? 7 : dayOfWeek - 1;<br />
long timestamp = System.currentTimeMills()/1000 - count * 24 * 60 * 60;<br />
AC.rankingMgr().ranks(&ldquo;Sports_step&rdquo;, &ldquo;day&rdquo;, timestamp, 7, &ldquo;ASC&rdquo;, new PayloadCallback<List<ACRankingValue>&gt;() {<br />
    public void success(List<ACRankingValue> values) {<br />
        &hellip;<br />
    }</p>
<pre><code>@Override
public void error(ACException e) {
    //获取失败，通过e.toString()查看错误信息，并根据e.getErrorCode()错误码做不同处理。    
}
</code></pre>
<p>}<br />
```</p></article></body></html>